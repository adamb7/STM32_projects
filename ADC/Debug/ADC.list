
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002528  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002634  08002634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800266c  0800266c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800266c  0800266c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800266c  0800266c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800266c  0800266c  0001266c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002680  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002680  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acdf  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c53  00000000  00000000  0002ad14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  0002c968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a20  00000000  00000000  0002d470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734d  00000000  00000000  0002de90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7c9  00000000  00000000  000451dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d0b  00000000  00000000  000519a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da6b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  000da704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800261c 	.word	0x0800261c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800261c 	.word	0x0800261c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa62 	bl	8000618 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82e 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c6 	bl	80002e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f886 	bl	800026c <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000160:	4811      	ldr	r0, [pc, #68]	; (80001a8 <main+0x5c>)
 8000162:	f000 fb87 	bl	8000874 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000166:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800016a:	480f      	ldr	r0, [pc, #60]	; (80001a8 <main+0x5c>)
 800016c:	f000 fc30 	bl	80009d0 <HAL_ADC_PollForConversion>
	  adc_value=HAL_ADC_GetValue(&hadc1);
 8000170:	480d      	ldr	r0, [pc, #52]	; (80001a8 <main+0x5c>)
 8000172:	f000 fd27 	bl	8000bc4 <HAL_ADC_GetValue>
 8000176:	4603      	mov	r3, r0
 8000178:	b29a      	uxth	r2, r3
 800017a:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <main+0x60>)
 800017c:	801a      	strh	r2, [r3, #0]
	  if(adc_value>700){
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <main+0x60>)
 8000180:	881b      	ldrh	r3, [r3, #0]
 8000182:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000186:	d908      	bls.n	800019a <main+0x4e>
		  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port,BLUE_LED_Pin);
 8000188:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800018c:	4808      	ldr	r0, [pc, #32]	; (80001b0 <main+0x64>)
 800018e:	f001 fa05 	bl	800159c <HAL_GPIO_TogglePin>
		  HAL_Delay(50);
 8000192:	2032      	movs	r0, #50	; 0x32
 8000194:	f000 fa72 	bl	800067c <HAL_Delay>
 8000198:	e7e2      	b.n	8000160 <main+0x14>
	  }
	  else{
		  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800019a:	2201      	movs	r2, #1
 800019c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <main+0x64>)
 80001a2:	f001 f9e3 	bl	800156c <HAL_GPIO_WritePin>
	  HAL_ADC_Start(&hadc1);
 80001a6:	e7db      	b.n	8000160 <main+0x14>
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	20000028 	.word	0x20000028
 80001b0:	40011000 	.word	0x40011000

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	; 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f002 fa22 	bl	800260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000200:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	4618      	mov	r0, r3
 800020c:	f001 f9e0 	bl	80015d0 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000216:	f000 f8c5 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fc4a 	bl	8001ad0 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000242:	f000 f8af 	bl	80003a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800024a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	4618      	mov	r0, r3
 8000254:	f001 fdf2 	bl	8001e3c <HAL_RCCEx_PeriphCLKConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800025e:	f000 f8a1 	bl	80003a4 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3750      	adds	r7, #80	; 0x50
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	1d3b      	adds	r3, r7, #4
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <MX_ADC1_Init+0x74>)
 800027e:	4a19      	ldr	r2, [pc, #100]	; (80002e4 <MX_ADC1_Init+0x78>)
 8000280:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000282:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <MX_ADC1_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028e:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000290:	2200      	movs	r2, #0
 8000292:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <MX_ADC1_Init+0x74>)
 8000296:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800029a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800029c:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_ADC1_Init+0x74>)
 800029e:	2200      	movs	r2, #0
 80002a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002a2:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002a4:	2201      	movs	r2, #1
 80002a6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002aa:	f000 fa0b 	bl	80006c4 <HAL_ADC_Init>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b4:	f000 f876 	bl	80003a4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002bc:	2301      	movs	r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80002c0:	2303      	movs	r3, #3
 80002c2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4619      	mov	r1, r3
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_ADC1_Init+0x74>)
 80002ca:	f000 fd5d 	bl	8000d88 <HAL_ADC_ConfigChannel>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d4:	f000 f866 	bl	80003a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	2000002c 	.word	0x2000002c
 80002e4:	40012400 	.word	0x40012400

080002e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	f107 0310 	add.w	r3, r7, #16
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <MX_GPIO_Init+0x90>)
 8000302:	f043 0310 	orr.w	r3, r3, #16
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_GPIO_Init+0x90>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	60fb      	str	r3, [r7, #12]
 8000312:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000314:	4b18      	ldr	r3, [pc, #96]	; (8000378 <MX_GPIO_Init+0x90>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <MX_GPIO_Init+0x90>)
 800031a:	f043 0320 	orr.w	r3, r3, #32
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <MX_GPIO_Init+0x90>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0320 	and.w	r3, r3, #32
 8000328:	60bb      	str	r3, [r7, #8]
 800032a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800032c:	4b12      	ldr	r3, [pc, #72]	; (8000378 <MX_GPIO_Init+0x90>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a11      	ldr	r2, [pc, #68]	; (8000378 <MX_GPIO_Init+0x90>)
 8000332:	f043 0304 	orr.w	r3, r3, #4
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <MX_GPIO_Init+0x90>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0304 	and.w	r3, r3, #4
 8000340:	607b      	str	r3, [r7, #4]
 8000342:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800034a:	480c      	ldr	r0, [pc, #48]	; (800037c <MX_GPIO_Init+0x94>)
 800034c:	f001 f90e 	bl	800156c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035e:	2302      	movs	r3, #2
 8000360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000362:	f107 0310 	add.w	r3, r7, #16
 8000366:	4619      	mov	r1, r3
 8000368:	4804      	ldr	r0, [pc, #16]	; (800037c <MX_GPIO_Init+0x94>)
 800036a:	f000 ff7b 	bl	8001264 <HAL_GPIO_Init>

}
 800036e:	bf00      	nop
 8000370:	3720      	adds	r7, #32
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	40021000 	.word	0x40021000
 800037c:	40011000 	.word	0x40011000

08000380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d101      	bne.n	8000396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000392:	f000 f957 	bl	8000644 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000396:	bf00      	nop
 8000398:	3708      	adds	r7, #8
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40012c00 	.word	0x40012c00

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
}
 80003aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ac:	e7fe      	b.n	80003ac <Error_Handler+0x8>
	...

080003b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <HAL_MspInit+0x5c>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	4a14      	ldr	r2, [pc, #80]	; (800040c <HAL_MspInit+0x5c>)
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	6193      	str	r3, [r2, #24]
 80003c2:	4b12      	ldr	r3, [pc, #72]	; (800040c <HAL_MspInit+0x5c>)
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	f003 0301 	and.w	r3, r3, #1
 80003ca:	60bb      	str	r3, [r7, #8]
 80003cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <HAL_MspInit+0x5c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	4a0e      	ldr	r2, [pc, #56]	; (800040c <HAL_MspInit+0x5c>)
 80003d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d8:	61d3      	str	r3, [r2, #28]
 80003da:	4b0c      	ldr	r3, [pc, #48]	; (800040c <HAL_MspInit+0x5c>)
 80003dc:	69db      	ldr	r3, [r3, #28]
 80003de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <HAL_MspInit+0x60>)
 80003e8:	685b      	ldr	r3, [r3, #4]
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	4a04      	ldr	r2, [pc, #16]	; (8000410 <HAL_MspInit+0x60>)
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3714      	adds	r7, #20
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000
 8000410:	40010000 	.word	0x40010000

08000414 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b088      	sub	sp, #32
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041c:	f107 0310 	add.w	r3, r7, #16
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a18      	ldr	r2, [pc, #96]	; (8000490 <HAL_ADC_MspInit+0x7c>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d129      	bne.n	8000488 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000434:	4b17      	ldr	r3, [pc, #92]	; (8000494 <HAL_ADC_MspInit+0x80>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a16      	ldr	r2, [pc, #88]	; (8000494 <HAL_ADC_MspInit+0x80>)
 800043a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_ADC_MspInit+0x80>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <HAL_ADC_MspInit+0x80>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a10      	ldr	r2, [pc, #64]	; (8000494 <HAL_ADC_MspInit+0x80>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <HAL_ADC_MspInit+0x80>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	60bb      	str	r3, [r7, #8]
 8000462:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000464:	2302      	movs	r3, #2
 8000466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000468:	2303      	movs	r3, #3
 800046a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	4619      	mov	r1, r3
 8000472:	4809      	ldr	r0, [pc, #36]	; (8000498 <HAL_ADC_MspInit+0x84>)
 8000474:	f000 fef6 	bl	8001264 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000478:	2200      	movs	r2, #0
 800047a:	2100      	movs	r1, #0
 800047c:	2012      	movs	r0, #18
 800047e:	f000 fec6 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000482:	2012      	movs	r0, #18
 8000484:	f000 fedf 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40012400 	.word	0x40012400
 8000494:	40021000 	.word	0x40021000
 8000498:	40010800 	.word	0x40010800

0800049c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	; 0x30
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80004ac:	2200      	movs	r2, #0
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	2019      	movs	r0, #25
 80004b2:	f000 feac 	bl	800120e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004b6:	2019      	movs	r0, #25
 80004b8:	f000 fec5 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004bc:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <HAL_InitTick+0x9c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a1d      	ldr	r2, [pc, #116]	; (8000538 <HAL_InitTick+0x9c>)
 80004c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <HAL_InitTick+0x9c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004d4:	f107 0210 	add.w	r2, r7, #16
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4611      	mov	r1, r2
 80004de:	4618      	mov	r0, r3
 80004e0:	f001 fc5e 	bl	8001da0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004e4:	f001 fc48 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80004e8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004ec:	4a13      	ldr	r2, [pc, #76]	; (800053c <HAL_InitTick+0xa0>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9b      	lsrs	r3, r3, #18
 80004f4:	3b01      	subs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HAL_InitTick+0xa4>)
 80004fa:	4a12      	ldr	r2, [pc, #72]	; (8000544 <HAL_InitTick+0xa8>)
 80004fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_InitTick+0xa4>)
 8000500:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000504:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_InitTick+0xa4>)
 8000508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_InitTick+0xa4>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <HAL_InitTick+0xa4>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000518:	4809      	ldr	r0, [pc, #36]	; (8000540 <HAL_InitTick+0xa4>)
 800051a:	f001 fe09 	bl	8002130 <HAL_TIM_Base_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d104      	bne.n	800052e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000524:	4806      	ldr	r0, [pc, #24]	; (8000540 <HAL_InitTick+0xa4>)
 8000526:	f001 fe5b 	bl	80021e0 <HAL_TIM_Base_Start_IT>
 800052a:	4603      	mov	r3, r0
 800052c:	e000      	b.n	8000530 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800052e:	2301      	movs	r3, #1
}
 8000530:	4618      	mov	r0, r3
 8000532:	3730      	adds	r7, #48	; 0x30
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40021000 	.word	0x40021000
 800053c:	431bde83 	.word	0x431bde83
 8000540:	2000005c 	.word	0x2000005c
 8000544:	40012c00 	.word	0x40012c00

08000548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800054c:	e7fe      	b.n	800054c <NMI_Handler+0x4>

0800054e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000552:	e7fe      	b.n	8000552 <HardFault_Handler+0x4>

08000554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <MemManage_Handler+0x4>

0800055a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055a:	b480      	push	{r7}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <BusFault_Handler+0x4>

08000560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000564:	e7fe      	b.n	8000564 <UsageFault_Handler+0x4>

08000566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr

08000572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	46bd      	mov	sp, r7
 8000592:	bc80      	pop	{r7}
 8000594:	4770      	bx	lr
	...

08000598 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <ADC1_2_IRQHandler+0x10>)
 800059e:	f000 fb1d 	bl	8000bdc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	2000002c 	.word	0x2000002c

080005ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <TIM1_UP_IRQHandler+0x10>)
 80005b2:	f001 fe67 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000005c 	.word	0x2000005c

080005c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ce:	e003      	b.n	80005d8 <LoopCopyDataInit>

080005d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d6:	3104      	adds	r1, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005e0:	d3f6      	bcc.n	80005d0 <CopyDataInit>
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e4:	e002      	b.n	80005ec <LoopFillZerobss>

080005e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e8:	f842 3b04 	str.w	r3, [r2], #4

080005ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005f0:	d3f9      	bcc.n	80005e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f2:	f7ff ffe5 	bl	80005c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f6:	f001 ffe5 	bl	80025c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fda7 	bl	800014c <main>
  bx lr
 80005fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000600:	08002674 	.word	0x08002674
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000610:	200000a8 	.word	0x200000a8

08000614 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <CAN1_RX1_IRQHandler>
	...

08000618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	4b08      	ldr	r3, [pc, #32]	; (8000640 <HAL_Init+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_Init+0x28>)
 8000622:	f043 0310 	orr.w	r3, r3, #16
 8000626:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000628:	2003      	movs	r0, #3
 800062a:	f000 fde5 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062e:	2000      	movs	r0, #0
 8000630:	f7ff ff34 	bl	800049c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000634:	f7ff febc 	bl	80003b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40022000 	.word	0x40022000

08000644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <HAL_IncTick+0x1c>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_IncTick+0x20>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <HAL_IncTick+0x20>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000008 	.word	0x20000008
 8000664:	200000a4 	.word	0x200000a4

08000668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  return uwTick;
 800066c:	4b02      	ldr	r3, [pc, #8]	; (8000678 <HAL_GetTick+0x10>)
 800066e:	681b      	ldr	r3, [r3, #0]
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr
 8000678:	200000a4 	.word	0x200000a4

0800067c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000684:	f7ff fff0 	bl	8000668 <HAL_GetTick>
 8000688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000694:	d005      	beq.n	80006a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000696:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_Delay+0x44>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4413      	add	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffe0 	bl	8000668 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	68fa      	ldr	r2, [r7, #12]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d8f7      	bhi.n	80006a4 <HAL_Delay+0x28>
  {
  }
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000008 	.word	0x20000008

080006c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006cc:	2300      	movs	r3, #0
 80006ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d101      	bne.n	80006e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	e0be      	b.n	8000864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	689b      	ldr	r3, [r3, #8]
 80006ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d109      	bne.n	8000708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f7ff fe86 	bl	8000414 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 fc87 	bl	800101c <ADC_ConversionStop_Disable>
 800070e:	4603      	mov	r3, r0
 8000710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000716:	f003 0310 	and.w	r3, r3, #16
 800071a:	2b00      	cmp	r3, #0
 800071c:	f040 8099 	bne.w	8000852 <HAL_ADC_Init+0x18e>
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	2b00      	cmp	r3, #0
 8000724:	f040 8095 	bne.w	8000852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800072c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000730:	f023 0302 	bic.w	r3, r3, #2
 8000734:	f043 0202 	orr.w	r2, r3, #2
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7b1b      	ldrb	r3, [r3, #12]
 800074a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800074c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	4313      	orrs	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800075c:	d003      	beq.n	8000766 <HAL_ADC_Init+0xa2>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	689b      	ldr	r3, [r3, #8]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d102      	bne.n	800076c <HAL_ADC_Init+0xa8>
 8000766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800076a:	e000      	b.n	800076e <HAL_ADC_Init+0xaa>
 800076c:	2300      	movs	r3, #0
 800076e:	693a      	ldr	r2, [r7, #16]
 8000770:	4313      	orrs	r3, r2
 8000772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7d1b      	ldrb	r3, [r3, #20]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d119      	bne.n	80007b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	7b1b      	ldrb	r3, [r3, #12]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d109      	bne.n	8000798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	3b01      	subs	r3, #1
 800078a:	035a      	lsls	r2, r3, #13
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	4313      	orrs	r3, r2
 8000790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	e00b      	b.n	80007b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079c:	f043 0220 	orr.w	r2, r3, #32
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a8:	f043 0201 	orr.w	r2, r3, #1
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	689a      	ldr	r2, [r3, #8]
 80007ca:	4b28      	ldr	r3, [pc, #160]	; (800086c <HAL_ADC_Init+0x1a8>)
 80007cc:	4013      	ands	r3, r2
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	6812      	ldr	r2, [r2, #0]
 80007d2:	68b9      	ldr	r1, [r7, #8]
 80007d4:	430b      	orrs	r3, r1
 80007d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007e0:	d003      	beq.n	80007ea <HAL_ADC_Init+0x126>
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	689b      	ldr	r3, [r3, #8]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d104      	bne.n	80007f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	3b01      	subs	r3, #1
 80007f0:	051b      	lsls	r3, r3, #20
 80007f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007fa:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	68fa      	ldr	r2, [r7, #12]
 8000804:	430a      	orrs	r2, r1
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	4b18      	ldr	r3, [pc, #96]	; (8000870 <HAL_ADC_Init+0x1ac>)
 8000810:	4013      	ands	r3, r2
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	429a      	cmp	r2, r3
 8000816:	d10b      	bne.n	8000830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000822:	f023 0303 	bic.w	r3, r3, #3
 8000826:	f043 0201 	orr.w	r2, r3, #1
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800082e:	e018      	b.n	8000862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000834:	f023 0312 	bic.w	r3, r3, #18
 8000838:	f043 0210 	orr.w	r2, r3, #16
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000844:	f043 0201 	orr.w	r2, r3, #1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800084c:	2301      	movs	r3, #1
 800084e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000850:	e007      	b.n	8000862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000856:	f043 0210 	orr.w	r2, r3, #16
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800085e:	2301      	movs	r3, #1
 8000860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000862:	7dfb      	ldrb	r3, [r7, #23]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	ffe1f7fd 	.word	0xffe1f7fd
 8000870:	ff1f0efe 	.word	0xff1f0efe

08000874 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800087c:	2300      	movs	r3, #0
 800087e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000886:	2b01      	cmp	r3, #1
 8000888:	d101      	bne.n	800088e <HAL_ADC_Start+0x1a>
 800088a:	2302      	movs	r3, #2
 800088c:	e098      	b.n	80009c0 <HAL_ADC_Start+0x14c>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 fb6e 	bl	8000f78 <ADC_Enable>
 800089c:	4603      	mov	r3, r0
 800089e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f040 8087 	bne.w	80009b6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <HAL_ADC_Start+0x154>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d105      	bne.n	80008d2 <HAL_ADC_Start+0x5e>
 80008c6:	4b41      	ldr	r3, [pc, #260]	; (80009cc <HAL_ADC_Start+0x158>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d115      	bne.n	80008fe <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d026      	beq.n	800093a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008fc:	e01d      	b.n	800093a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000902:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <HAL_ADC_Start+0x158>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d004      	beq.n	800091e <HAL_ADC_Start+0xaa>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2b      	ldr	r2, [pc, #172]	; (80009c8 <HAL_ADC_Start+0x154>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d10d      	bne.n	800093a <HAL_ADC_Start+0xc6>
 800091e:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <HAL_ADC_Start+0x158>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000932:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000942:	2b00      	cmp	r3, #0
 8000944:	d006      	beq.n	8000954 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800094a:	f023 0206 	bic.w	r2, r3, #6
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
 8000952:	e002      	b.n	800095a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f06f 0202 	mvn.w	r2, #2
 800096a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000976:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800097a:	d113      	bne.n	80009a4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000980:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <HAL_ADC_Start+0x154>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d105      	bne.n	8000992 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000986:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_ADC_Start+0x158>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800098e:	2b00      	cmp	r3, #0
 8000990:	d108      	bne.n	80009a4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	689a      	ldr	r2, [r3, #8]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	e00c      	b.n	80009be <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	e003      	b.n	80009be <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80009be:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40012800 	.word	0x40012800
 80009cc:	40012400 	.word	0x40012400

080009d0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80009da:	2300      	movs	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80009e6:	f7ff fe3f 	bl	8000668 <HAL_GetTick>
 80009ea:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00b      	beq.n	8000a12 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fe:	f043 0220 	orr.w	r2, r3, #32
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0c8      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d12a      	bne.n	8000a76 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d123      	bne.n	8000a76 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a2e:	e01a      	b.n	8000a66 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a36:	d016      	beq.n	8000a66 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d007      	beq.n	8000a4e <HAL_ADC_PollForConversion+0x7e>
 8000a3e:	f7ff fe13 	bl	8000668 <HAL_GetTick>
 8000a42:	4602      	mov	r2, r0
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d20b      	bcs.n	8000a66 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	f043 0204 	orr.w	r2, r3, #4
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000a62:	2303      	movs	r3, #3
 8000a64:	e09e      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f003 0302 	and.w	r3, r3, #2
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0dd      	beq.n	8000a30 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a74:	e06c      	b.n	8000b50 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000a76:	4b4d      	ldr	r3, [pc, #308]	; (8000bac <HAL_ADC_PollForConversion+0x1dc>)
 8000a78:	681c      	ldr	r4, [r3, #0]
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f001 fa94 	bl	8001fa8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000a80:	4603      	mov	r3, r0
 8000a82:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	6919      	ldr	r1, [r3, #16]
 8000a8c:	4b48      	ldr	r3, [pc, #288]	; (8000bb0 <HAL_ADC_PollForConversion+0x1e0>)
 8000a8e:	400b      	ands	r3, r1
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d118      	bne.n	8000ac6 <HAL_ADC_PollForConversion+0xf6>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68d9      	ldr	r1, [r3, #12]
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <HAL_ADC_PollForConversion+0x1e4>)
 8000a9c:	400b      	ands	r3, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d111      	bne.n	8000ac6 <HAL_ADC_PollForConversion+0xf6>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6919      	ldr	r1, [r3, #16]
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <HAL_ADC_PollForConversion+0x1e8>)
 8000aaa:	400b      	ands	r3, r1
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d108      	bne.n	8000ac2 <HAL_ADC_PollForConversion+0xf2>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	68d9      	ldr	r1, [r3, #12]
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_ADC_PollForConversion+0x1ec>)
 8000ab8:	400b      	ands	r3, r1
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_ADC_PollForConversion+0xf2>
 8000abe:	2314      	movs	r3, #20
 8000ac0:	e020      	b.n	8000b04 <HAL_ADC_PollForConversion+0x134>
 8000ac2:	2329      	movs	r3, #41	; 0x29
 8000ac4:	e01e      	b.n	8000b04 <HAL_ADC_PollForConversion+0x134>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	6919      	ldr	r1, [r3, #16]
 8000acc:	4b3a      	ldr	r3, [pc, #232]	; (8000bb8 <HAL_ADC_PollForConversion+0x1e8>)
 8000ace:	400b      	ands	r3, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d106      	bne.n	8000ae2 <HAL_ADC_PollForConversion+0x112>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68d9      	ldr	r1, [r3, #12]
 8000ada:	4b38      	ldr	r3, [pc, #224]	; (8000bbc <HAL_ADC_PollForConversion+0x1ec>)
 8000adc:	400b      	ands	r3, r1
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d00d      	beq.n	8000afe <HAL_ADC_PollForConversion+0x12e>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6919      	ldr	r1, [r3, #16]
 8000ae8:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <HAL_ADC_PollForConversion+0x1f0>)
 8000aea:	400b      	ands	r3, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d108      	bne.n	8000b02 <HAL_ADC_PollForConversion+0x132>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	68d9      	ldr	r1, [r3, #12]
 8000af6:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <HAL_ADC_PollForConversion+0x1f0>)
 8000af8:	400b      	ands	r3, r1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d101      	bne.n	8000b02 <HAL_ADC_PollForConversion+0x132>
 8000afe:	2354      	movs	r3, #84	; 0x54
 8000b00:	e000      	b.n	8000b04 <HAL_ADC_PollForConversion+0x134>
 8000b02:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b04:	fb02 f303 	mul.w	r3, r2, r3
 8000b08:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b0a:	e01d      	b.n	8000b48 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	d016      	beq.n	8000b42 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <HAL_ADC_PollForConversion+0x15a>
 8000b1a:	f7ff fda5 	bl	8000668 <HAL_GetTick>
 8000b1e:	4602      	mov	r2, r0
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	d20b      	bcs.n	8000b42 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2e:	f043 0204 	orr.w	r2, r3, #4
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	e030      	b.n	8000ba4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8dd      	bhi.n	8000b0c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f06f 0212 	mvn.w	r2, #18
 8000b58:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b74:	d115      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d111      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d105      	bne.n	8000ba2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f043 0201 	orr.w	r2, r3, #1
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	24924924 	.word	0x24924924
 8000bb4:	00924924 	.word	0x00924924
 8000bb8:	12492492 	.word	0x12492492
 8000bbc:	00492492 	.word	0x00492492
 8000bc0:	00249249 	.word	0x00249249

08000bc4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0320 	and.w	r3, r3, #32
 8000bee:	2b20      	cmp	r3, #32
 8000bf0:	d140      	bne.n	8000c74 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d139      	bne.n	8000c74 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c04:	f003 0310 	and.w	r3, r3, #16
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d105      	bne.n	8000c18 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c26:	d11d      	bne.n	8000c64 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d119      	bne.n	8000c64 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 0220 	bic.w	r2, r2, #32
 8000c3e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d105      	bne.n	8000c64 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c5c:	f043 0201 	orr.w	r2, r3, #1
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c64:	6878      	ldr	r0, [r7, #4]
 8000c66:	f000 f87c 	bl	8000d62 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f06f 0212 	mvn.w	r2, #18
 8000c72:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c7e:	2b80      	cmp	r3, #128	; 0x80
 8000c80:	d14f      	bne.n	8000d22 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f003 0304 	and.w	r3, r3, #4
 8000c8c:	2b04      	cmp	r3, #4
 8000c8e:	d148      	bne.n	8000d22 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f003 0310 	and.w	r3, r3, #16
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d105      	bne.n	8000ca8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000cb2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000cb6:	d012      	beq.n	8000cde <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d125      	bne.n	8000d12 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cd0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000cd4:	d11d      	bne.n	8000d12 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d119      	bne.n	8000d12 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d105      	bne.n	8000d12 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0a:	f043 0201 	orr.w	r2, r3, #1
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f9bc 	bl	8001090 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f06f 020c 	mvn.w	r2, #12
 8000d20:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d2c:	2b40      	cmp	r3, #64	; 0x40
 8000d2e:	d114      	bne.n	8000d5a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d10d      	bne.n	8000d5a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f812 	bl	8000d74 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f06f 0201 	mvn.w	r2, #1
 8000d58:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b083      	sub	sp, #12
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x20>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e0dc      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x1da>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b06      	cmp	r3, #6
 8000db6:	d81c      	bhi.n	8000df2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	4413      	add	r3, r2
 8000dc8:	3b05      	subs	r3, #5
 8000dca:	221f      	movs	r2, #31
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	4019      	ands	r1, r3
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	3b05      	subs	r3, #5
 8000de4:	fa00 f203 	lsl.w	r2, r0, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
 8000df0:	e03c      	b.n	8000e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b0c      	cmp	r3, #12
 8000df8:	d81c      	bhi.n	8000e34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4613      	mov	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	4413      	add	r3, r2
 8000e0a:	3b23      	subs	r3, #35	; 0x23
 8000e0c:	221f      	movs	r2, #31
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	4019      	ands	r1, r3
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	009b      	lsls	r3, r3, #2
 8000e22:	4413      	add	r3, r2
 8000e24:	3b23      	subs	r3, #35	; 0x23
 8000e26:	fa00 f203 	lsl.w	r2, r0, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
 8000e32:	e01b      	b.n	8000e6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	3b41      	subs	r3, #65	; 0x41
 8000e46:	221f      	movs	r2, #31
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	4019      	ands	r1, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3b41      	subs	r3, #65	; 0x41
 8000e60:	fa00 f203 	lsl.w	r2, r0, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b09      	cmp	r3, #9
 8000e72:	d91c      	bls.n	8000eae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	68d9      	ldr	r1, [r3, #12]
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	4413      	add	r3, r2
 8000e84:	3b1e      	subs	r3, #30
 8000e86:	2207      	movs	r2, #7
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	4019      	ands	r1, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	6898      	ldr	r0, [r3, #8]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	4413      	add	r3, r2
 8000e9e:	3b1e      	subs	r3, #30
 8000ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	430a      	orrs	r2, r1
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	e019      	b.n	8000ee2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	6919      	ldr	r1, [r3, #16]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2207      	movs	r2, #7
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	4019      	ands	r1, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	6898      	ldr	r0, [r3, #8]
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	4413      	add	r3, r2
 8000ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b10      	cmp	r3, #16
 8000ee8:	d003      	beq.n	8000ef2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eee:	2b11      	cmp	r3, #17
 8000ef0:	d132      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	; (8000f6c <HAL_ADC_ConfigChannel+0x1e4>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d125      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	689b      	ldr	r3, [r3, #8]
 8000f02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d126      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f18:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b10      	cmp	r3, #16
 8000f20:	d11a      	bne.n	8000f58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f28:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2c:	0c9a      	lsrs	r2, r3, #18
 8000f2e:	4613      	mov	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4413      	add	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f38:	e002      	b.n	8000f40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f9      	bne.n	8000f3a <HAL_ADC_ConfigChannel+0x1b2>
 8000f46:	e007      	b.n	8000f58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4c:	f043 0220 	orr.w	r2, r3, #32
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3714      	adds	r7, #20
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	40012400 	.word	0x40012400
 8000f70:	20000000 	.word	0x20000000
 8000f74:	431bde83 	.word	0x431bde83

08000f78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d039      	beq.n	800100a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	689a      	ldr	r2, [r3, #8]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0201 	orr.w	r2, r2, #1
 8000fa4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <ADC_Enable+0x9c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1b      	ldr	r2, [pc, #108]	; (8001018 <ADC_Enable+0xa0>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9b      	lsrs	r3, r3, #18
 8000fb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fb4:	e002      	b.n	8000fbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000fc2:	f7ff fb51 	bl	8000668 <HAL_GetTick>
 8000fc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fc8:	e018      	b.n	8000ffc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fca:	f7ff fb4d 	bl	8000668 <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d911      	bls.n	8000ffc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f043 0210 	orr.w	r2, r3, #16
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	f043 0201 	orr.w	r2, r3, #1
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	e007      	b.n	800100c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	2b01      	cmp	r3, #1
 8001008:	d1df      	bne.n	8000fca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	431bde83 	.word	0x431bde83

0800101c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	2b01      	cmp	r3, #1
 8001034:	d127      	bne.n	8001086 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001046:	f7ff fb0f 	bl	8000668 <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800104c:	e014      	b.n	8001078 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800104e:	f7ff fb0b 	bl	8000668 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d90d      	bls.n	8001078 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	f043 0210 	orr.w	r2, r3, #16
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	f043 0201 	orr.w	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e007      	b.n	8001088 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b01      	cmp	r3, #1
 8001084:	d0e3      	beq.n	800104e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
	...

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <__NVIC_EnableIRQ+0x34>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff4f 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff64 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ffb2 	bl	8001194 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff81 	bl	8001140 <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff57 	bl	8001108 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b08b      	sub	sp, #44	; 0x2c
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001272:	2300      	movs	r3, #0
 8001274:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001276:	e169      	b.n	800154c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001278:	2201      	movs	r2, #1
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8158 	bne.w	8001546 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4a9a      	ldr	r2, [pc, #616]	; (8001504 <HAL_GPIO_Init+0x2a0>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d05e      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012a0:	4a98      	ldr	r2, [pc, #608]	; (8001504 <HAL_GPIO_Init+0x2a0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d875      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012a6:	4a98      	ldr	r2, [pc, #608]	; (8001508 <HAL_GPIO_Init+0x2a4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d058      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012ac:	4a96      	ldr	r2, [pc, #600]	; (8001508 <HAL_GPIO_Init+0x2a4>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d86f      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012b2:	4a96      	ldr	r2, [pc, #600]	; (800150c <HAL_GPIO_Init+0x2a8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d052      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012b8:	4a94      	ldr	r2, [pc, #592]	; (800150c <HAL_GPIO_Init+0x2a8>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d869      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012be:	4a94      	ldr	r2, [pc, #592]	; (8001510 <HAL_GPIO_Init+0x2ac>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d04c      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012c4:	4a92      	ldr	r2, [pc, #584]	; (8001510 <HAL_GPIO_Init+0x2ac>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d863      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012ca:	4a92      	ldr	r2, [pc, #584]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d046      	beq.n	800135e <HAL_GPIO_Init+0xfa>
 80012d0:	4a90      	ldr	r2, [pc, #576]	; (8001514 <HAL_GPIO_Init+0x2b0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d85d      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d82a      	bhi.n	8001330 <HAL_GPIO_Init+0xcc>
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d859      	bhi.n	8001392 <HAL_GPIO_Init+0x12e>
 80012de:	a201      	add	r2, pc, #4	; (adr r2, 80012e4 <HAL_GPIO_Init+0x80>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	0800135f 	.word	0x0800135f
 80012e8:	08001339 	.word	0x08001339
 80012ec:	0800134b 	.word	0x0800134b
 80012f0:	0800138d 	.word	0x0800138d
 80012f4:	08001393 	.word	0x08001393
 80012f8:	08001393 	.word	0x08001393
 80012fc:	08001393 	.word	0x08001393
 8001300:	08001393 	.word	0x08001393
 8001304:	08001393 	.word	0x08001393
 8001308:	08001393 	.word	0x08001393
 800130c:	08001393 	.word	0x08001393
 8001310:	08001393 	.word	0x08001393
 8001314:	08001393 	.word	0x08001393
 8001318:	08001393 	.word	0x08001393
 800131c:	08001393 	.word	0x08001393
 8001320:	08001393 	.word	0x08001393
 8001324:	08001393 	.word	0x08001393
 8001328:	08001341 	.word	0x08001341
 800132c:	08001355 	.word	0x08001355
 8001330:	4a79      	ldr	r2, [pc, #484]	; (8001518 <HAL_GPIO_Init+0x2b4>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001336:	e02c      	b.n	8001392 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e029      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e024      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	3308      	adds	r3, #8
 8001350:	623b      	str	r3, [r7, #32]
          break;
 8001352:	e01f      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	330c      	adds	r3, #12
 800135a:	623b      	str	r3, [r7, #32]
          break;
 800135c:	e01a      	b.n	8001394 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001366:	2304      	movs	r3, #4
 8001368:	623b      	str	r3, [r7, #32]
          break;
 800136a:	e013      	b.n	8001394 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001374:	2308      	movs	r3, #8
 8001376:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69fa      	ldr	r2, [r7, #28]
 800137c:	611a      	str	r2, [r3, #16]
          break;
 800137e:	e009      	b.n	8001394 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001380:	2308      	movs	r3, #8
 8001382:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69fa      	ldr	r2, [r7, #28]
 8001388:	615a      	str	r2, [r3, #20]
          break;
 800138a:	e003      	b.n	8001394 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x130>
          break;
 8001392:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	2bff      	cmp	r3, #255	; 0xff
 8001398:	d801      	bhi.n	800139e <HAL_GPIO_Init+0x13a>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	e001      	b.n	80013a2 <HAL_GPIO_Init+0x13e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2bff      	cmp	r3, #255	; 0xff
 80013a8:	d802      	bhi.n	80013b0 <HAL_GPIO_Init+0x14c>
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	e002      	b.n	80013b6 <HAL_GPIO_Init+0x152>
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	3b08      	subs	r3, #8
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	210f      	movs	r1, #15
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	6a39      	ldr	r1, [r7, #32]
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	fa01 f303 	lsl.w	r3, r1, r3
 80013d0:	431a      	orrs	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 80b1 	beq.w	8001546 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013e4:	4b4d      	ldr	r3, [pc, #308]	; (800151c <HAL_GPIO_Init+0x2b8>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_GPIO_Init+0x2b8>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <HAL_GPIO_Init+0x2b8>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013fc:	4a48      	ldr	r2, [pc, #288]	; (8001520 <HAL_GPIO_Init+0x2bc>)
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001408:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4013      	ands	r3, r2
 800141e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a40      	ldr	r2, [pc, #256]	; (8001524 <HAL_GPIO_Init+0x2c0>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d013      	beq.n	8001450 <HAL_GPIO_Init+0x1ec>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3f      	ldr	r2, [pc, #252]	; (8001528 <HAL_GPIO_Init+0x2c4>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d00d      	beq.n	800144c <HAL_GPIO_Init+0x1e8>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a3e      	ldr	r2, [pc, #248]	; (800152c <HAL_GPIO_Init+0x2c8>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d007      	beq.n	8001448 <HAL_GPIO_Init+0x1e4>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a3d      	ldr	r2, [pc, #244]	; (8001530 <HAL_GPIO_Init+0x2cc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_GPIO_Init+0x1e0>
 8001440:	2303      	movs	r3, #3
 8001442:	e006      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001444:	2304      	movs	r3, #4
 8001446:	e004      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001448:	2302      	movs	r3, #2
 800144a:	e002      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <HAL_GPIO_Init+0x1ee>
 8001450:	2300      	movs	r3, #0
 8001452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001454:	f002 0203 	and.w	r2, r2, #3
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	4093      	lsls	r3, r2
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001462:	492f      	ldr	r1, [pc, #188]	; (8001520 <HAL_GPIO_Init+0x2bc>)
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800147c:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	492c      	ldr	r1, [pc, #176]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	43db      	mvns	r3, r3
 8001492:	4928      	ldr	r1, [pc, #160]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 8001494:	4013      	ands	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a4:	4b23      	ldr	r3, [pc, #140]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	491e      	ldr	r1, [pc, #120]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	4918      	ldr	r1, [pc, #96]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	608b      	str	r3, [r1, #8]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014da:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4914      	ldr	r1, [pc, #80]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d021      	beq.n	8001538 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <HAL_GPIO_Init+0x2d0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	60cb      	str	r3, [r1, #12]
 8001500:	e021      	b.n	8001546 <HAL_GPIO_Init+0x2e2>
 8001502:	bf00      	nop
 8001504:	10320000 	.word	0x10320000
 8001508:	10310000 	.word	0x10310000
 800150c:	10220000 	.word	0x10220000
 8001510:	10210000 	.word	0x10210000
 8001514:	10120000 	.word	0x10120000
 8001518:	10110000 	.word	0x10110000
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	40010800 	.word	0x40010800
 8001528:	40010c00 	.word	0x40010c00
 800152c:	40011000 	.word	0x40011000
 8001530:	40011400 	.word	0x40011400
 8001534:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_GPIO_Init+0x304>)
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	43db      	mvns	r3, r3
 8001540:	4909      	ldr	r1, [pc, #36]	; (8001568 <HAL_GPIO_Init+0x304>)
 8001542:	4013      	ands	r3, r2
 8001544:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	3301      	adds	r3, #1
 800154a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	fa22 f303 	lsr.w	r3, r2, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	f47f ae8e 	bne.w	8001278 <HAL_GPIO_Init+0x14>
  }
}
 800155c:	bf00      	nop
 800155e:	bf00      	nop
 8001560:	372c      	adds	r7, #44	; 0x2c
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]
 8001578:	4613      	mov	r3, r2
 800157a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800157c:	787b      	ldrb	r3, [r7, #1]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001588:	e003      	b.n	8001592 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	041a      	lsls	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	4013      	ands	r3, r2
 80015b4:	041a      	lsls	r2, r3, #16
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43d9      	mvns	r1, r3
 80015ba:	887b      	ldrh	r3, [r7, #2]
 80015bc:	400b      	ands	r3, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	611a      	str	r2, [r3, #16]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e26c      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8087 	beq.w	80016fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f0:	4b92      	ldr	r3, [pc, #584]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d00c      	beq.n	8001616 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fc:	4b8f      	ldr	r3, [pc, #572]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d112      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
 8001608:	4b8c      	ldr	r3, [pc, #560]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d10b      	bne.n	800162e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	4b89      	ldr	r3, [pc, #548]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d06c      	beq.n	80016fc <HAL_RCC_OscConfig+0x12c>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d168      	bne.n	80016fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e246      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001636:	d106      	bne.n	8001646 <HAL_RCC_OscConfig+0x76>
 8001638:	4b80      	ldr	r3, [pc, #512]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a7f      	ldr	r2, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	e02e      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10c      	bne.n	8001668 <HAL_RCC_OscConfig+0x98>
 800164e:	4b7b      	ldr	r3, [pc, #492]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a7a      	ldr	r2, [pc, #488]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	4b78      	ldr	r3, [pc, #480]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a77      	ldr	r2, [pc, #476]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0xbc>
 8001672:	4b72      	ldr	r3, [pc, #456]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a71      	ldr	r2, [pc, #452]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6f      	ldr	r3, [pc, #444]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6e      	ldr	r2, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xd4>
 800168c:	4b6b      	ldr	r3, [pc, #428]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6a      	ldr	r2, [pc, #424]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b68      	ldr	r3, [pc, #416]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a67      	ldr	r2, [pc, #412]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7fe ffdc 	bl	8000668 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b4:	f7fe ffd8 	bl	8000668 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	; 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e1fa      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5d      	ldr	r3, [pc, #372]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xe4>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7fe ffc8 	bl	8000668 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016dc:	f7fe ffc4 	bl	8000668 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1e6      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0x10c>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170a:	4b4c      	ldr	r3, [pc, #304]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001716:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 030c 	and.w	r3, r3, #12
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x18c>
 8001722:	4b46      	ldr	r3, [pc, #280]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b43      	ldr	r3, [pc, #268]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x176>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1ba      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4939      	ldr	r1, [pc, #228]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b36      	ldr	r3, [pc, #216]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176a:	f7fe ff7d 	bl	8000668 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001772:	f7fe ff79 	bl	8000668 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e19b      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b2a      	ldr	r3, [pc, #168]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4927      	ldr	r1, [pc, #156]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_RCC_OscConfig+0x270>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7fe ff5c 	bl	8000668 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b4:	f7fe ff58 	bl	8000668 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e17a      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1d      	ldr	r3, [pc, #116]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d03a      	beq.n	8001854 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d019      	beq.n	800181a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <HAL_RCC_OscConfig+0x274>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ec:	f7fe ff3c 	bl	8000668 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f4:	f7fe ff38 	bl	8000668 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e15a      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_OscConfig+0x26c>)
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 faf4 	bl	8001e00 <RCC_Delay>
 8001818:	e01c      	b.n	8001854 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <HAL_RCC_OscConfig+0x274>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7fe ff22 	bl	8000668 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001826:	e00f      	b.n	8001848 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7fe ff1e 	bl	8000668 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d908      	bls.n	8001848 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e140      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
 800183a:	bf00      	nop
 800183c:	40021000 	.word	0x40021000
 8001840:	42420000 	.word	0x42420000
 8001844:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001848:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e9      	bne.n	8001828 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80a6 	beq.w	80019ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b97      	ldr	r3, [pc, #604]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10d      	bne.n	800188e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a93      	ldr	r2, [pc, #588]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b91      	ldr	r3, [pc, #580]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	60bb      	str	r3, [r7, #8]
 8001888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188a:	2301      	movs	r3, #1
 800188c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188e:	4b8e      	ldr	r3, [pc, #568]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001896:	2b00      	cmp	r3, #0
 8001898:	d118      	bne.n	80018cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189a:	4b8b      	ldr	r3, [pc, #556]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a8a      	ldr	r2, [pc, #552]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7fe fedf 	bl	8000668 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7fe fedb 	bl	8000668 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e0fd      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b81      	ldr	r3, [pc, #516]	; (8001ac8 <HAL_RCC_OscConfig+0x4f8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x312>
 80018d4:	4b7b      	ldr	r3, [pc, #492]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	4a7a      	ldr	r2, [pc, #488]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6213      	str	r3, [r2, #32]
 80018e0:	e02d      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x334>
 80018ea:	4b76      	ldr	r3, [pc, #472]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a75      	ldr	r2, [pc, #468]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	4b73      	ldr	r3, [pc, #460]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018f8:	6a1b      	ldr	r3, [r3, #32]
 80018fa:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80018fc:	f023 0304 	bic.w	r3, r3, #4
 8001900:	6213      	str	r3, [r2, #32]
 8001902:	e01c      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b05      	cmp	r3, #5
 800190a:	d10c      	bne.n	8001926 <HAL_RCC_OscConfig+0x356>
 800190c:	4b6d      	ldr	r3, [pc, #436]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a6c      	ldr	r2, [pc, #432]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a69      	ldr	r2, [pc, #420]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e00b      	b.n	800193e <HAL_RCC_OscConfig+0x36e>
 8001926:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a66      	ldr	r2, [pc, #408]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f023 0301 	bic.w	r3, r3, #1
 8001930:	6213      	str	r3, [r2, #32]
 8001932:	4b64      	ldr	r3, [pc, #400]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	4a63      	ldr	r2, [pc, #396]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	f023 0304 	bic.w	r3, r3, #4
 800193c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d015      	beq.n	8001972 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7fe fe8f 	bl	8000668 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800194c:	e00a      	b.n	8001964 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194e:	f7fe fe8b 	bl	8000668 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	f241 3288 	movw	r2, #5000	; 0x1388
 800195c:	4293      	cmp	r3, r2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e0ab      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ee      	beq.n	800194e <HAL_RCC_OscConfig+0x37e>
 8001970:	e014      	b.n	800199c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7fe fe79 	bl	8000668 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001978:	e00a      	b.n	8001990 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197a:	f7fe fe75 	bl	8000668 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	f241 3288 	movw	r2, #5000	; 0x1388
 8001988:	4293      	cmp	r3, r2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e095      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d1ee      	bne.n	800197a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800199c:	7dfb      	ldrb	r3, [r7, #23]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d105      	bne.n	80019ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a2:	4b48      	ldr	r3, [pc, #288]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a47      	ldr	r2, [pc, #284]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8081 	beq.w	8001aba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b42      	ldr	r3, [pc, #264]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d061      	beq.n	8001a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d146      	bne.n	8001a5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7fe fe49 	bl	8000668 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019da:	f7fe fe45 	bl	8000668 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e067      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	4b35      	ldr	r3, [pc, #212]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a1b      	ldr	r3, [r3, #32]
 80019fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a00:	d108      	bne.n	8001a14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	492d      	ldr	r1, [pc, #180]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a19      	ldr	r1, [r3, #32]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	430b      	orrs	r3, r1
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7fe fe19 	bl	8000668 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3a:	f7fe fe15 	bl	8000668 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e037      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x46a>
 8001a58:	e02f      	b.n	8001aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <HAL_RCC_OscConfig+0x4fc>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7fe fe02 	bl	8000668 <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a68:	f7fe fdfe 	bl	8000668 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e020      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f0      	bne.n	8001a68 <HAL_RCC_OscConfig+0x498>
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e013      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_RCC_OscConfig+0x4f4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40007000 	.word	0x40007000
 8001acc:	42420060 	.word	0x42420060

08001ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d0      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b67      	ldr	r3, [pc, #412]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 0207 	bic.w	r2, r3, #7
 8001afa:	4965      	ldr	r1, [pc, #404]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a58      	ldr	r2, [pc, #352]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e073      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b39      	ldr	r3, [pc, #228]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4936      	ldr	r1, [pc, #216]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc0:	f7fe fd52 	bl	8000668 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7fe fd4e 	bl	8000668 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e053      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	; (8001c94 <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	; (8001c98 <HAL_RCC_ClockConfig+0x1c8>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	; (8001c9c <HAL_RCC_ClockConfig+0x1cc>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7fe fc0c 	bl	800049c <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08002654 	.word	0x08002654
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b490      	push	{r4, r7}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cac:	1d3c      	adds	r4, r7, #4
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb4:	f240 2301 	movw	r3, #513	; 0x201
 8001cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x46>
 8001ce2:	e02d      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ce6:	623b      	str	r3, [r7, #32]
      break;
 8001ce8:	e02d      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	0c9b      	lsrs	r3, r3, #18
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d013      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	0c5b      	lsrs	r3, r3, #17
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d16:	4413      	add	r3, r2
 8001d18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	4a0e      	ldr	r2, [pc, #56]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d22:	fb02 f203 	mul.w	r2, r2, r3
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2e:	e004      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	623b      	str	r3, [r7, #32]
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d42:	623b      	str	r3, [r7, #32]
      break;
 8001d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d46:	6a3b      	ldr	r3, [r7, #32]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc90      	pop	{r4, r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	08002634 	.word	0x08002634
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0adb      	lsrs	r3, r3, #11
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08002664 	.word	0x08002664

08001da0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_RCC_GetClockConfig+0x58>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <HAL_RCC_GetClockConfig+0x58>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc8:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_RCC_GetClockConfig+0x58>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_RCC_GetClockConfig+0x58>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40022000 	.word	0x40022000

08001e00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <RCC_Delay+0x34>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <RCC_Delay+0x38>)
 8001e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e12:	0a5b      	lsrs	r3, r3, #9
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e1c:	bf00      	nop
  }
  while (Delay --);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	60fa      	str	r2, [r7, #12]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f9      	bne.n	8001e1c <RCC_Delay+0x1c>
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000000 	.word	0x20000000
 8001e38:	10624dd3 	.word	0x10624dd3

08001e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d07d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5c:	4b4f      	ldr	r3, [pc, #316]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10d      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	4a4b      	ldr	r2, [pc, #300]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e72:	61d3      	str	r3, [r2, #28]
 8001e74:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e84:	4b46      	ldr	r3, [pc, #280]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d118      	bne.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a42      	ldr	r2, [pc, #264]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fbe4 	bl	8000668 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7fe fbe0 	bl	8000668 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e06d      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ec2:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d02e      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d027      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eea:	4b2e      	ldr	r3, [pc, #184]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef6:	4a29      	ldr	r2, [pc, #164]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d014      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fbaf 	bl	8000668 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe fbab 	bl	8000668 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e036      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0ee      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4917      	ldr	r1, [pc, #92]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f42:	7dfb      	ldrb	r3, [r7, #23]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	4a13      	ldr	r2, [pc, #76]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	490b      	ldr	r1, [pc, #44]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	4904      	ldr	r1, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	40007000 	.word	0x40007000
 8001fa4:	42420440 	.word	0x42420440

08001fa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b08d      	sub	sp, #52	; 0x34
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	; (800211c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001fb2:	f107 040c 	add.w	r4, r7, #12
 8001fb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fbc:	f240 2301 	movw	r3, #513	; 0x201
 8001fc0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d00a      	beq.n	8001ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	f200 8091 	bhi.w	8002106 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d04c      	beq.n	8002084 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d07c      	beq.n	80020ea <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001ff0:	e089      	b.n	8002106 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 8082 	beq.w	800210a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	0c9b      	lsrs	r3, r3, #18
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002012:	4413      	add	r3, r2
 8002014:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002018:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d018      	beq.n	8002056 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002024:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0c5b      	lsrs	r3, r3, #17
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002032:	4413      	add	r3, r2
 8002034:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002044:	4a37      	ldr	r2, [pc, #220]	; (8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	fbb2 f2f3 	udiv	r2, r2, r3
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002054:	e004      	b.n	8002060 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	4a33      	ldr	r2, [pc, #204]	; (8002128 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800205a:	fb02 f303 	mul.w	r3, r2, r3
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d102      	bne.n	8002074 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002072:	e04a      	b.n	800210a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	085b      	lsrs	r3, r3, #1
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002082:	e042      	b.n	800210a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002094:	d108      	bne.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80020a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a6:	e01f      	b.n	80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020b2:	d109      	bne.n	80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80020c0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c6:	e00f      	b.n	80020e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80020d2:	d11c      	bne.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d016      	beq.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80020e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020e6:	e012      	b.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80020e8:	e011      	b.n	800210e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80020ea:	f7ff fe45 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 80020ee:	4602      	mov	r2, r0
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0b9b      	lsrs	r3, r3, #14
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	3301      	adds	r3, #1
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002104:	e004      	b.n	8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002106:	bf00      	nop
 8002108:	e002      	b.n	8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800210a:	bf00      	nop
 800210c:	e000      	b.n	8002110 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800210e:	bf00      	nop
    }
  }
  return (frequency);
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002112:	4618      	mov	r0, r3
 8002114:	3734      	adds	r7, #52	; 0x34
 8002116:	46bd      	mov	sp, r7
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	bf00      	nop
 800211c:	08002644 	.word	0x08002644
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	003d0900 	.word	0x003d0900
 800212c:	aaaaaaab 	.word	0xaaaaaaab

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e041      	b.n	80021c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 f839 	bl	80021ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 f9b4 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d001      	beq.n	80021f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e03a      	b.n	800226e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a18      	ldr	r2, [pc, #96]	; (8002278 <HAL_TIM_Base_Start_IT+0x98>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00e      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d009      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_TIM_Base_Start_IT+0x9c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_Base_Start_IT+0x58>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a13      	ldr	r2, [pc, #76]	; (8002280 <HAL_TIM_Base_Start_IT+0xa0>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d111      	bne.n	800225c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2b06      	cmp	r3, #6
 8002248:	d010      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	e007      	b.n	800226c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 0201 	orr.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	bc80      	pop	{r7}
 8002276:	4770      	bx	lr
 8002278:	40012c00 	.word	0x40012c00
 800227c:	40000400 	.word	0x40000400
 8002280:	40000800 	.word	0x40000800

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f8ed 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8e0 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 f8ef 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f8c3 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f8b6 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f8c5 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f899 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f88c 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f89b 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f86f 	bl	80024a6 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f862 	bl	8002494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f871 	bl	80024b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fd ffbc 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f8bf 	bl	80025b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f835 	bl	80024ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f88a 	bl	80025a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800249c:	bf00      	nop
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr

080024a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bc80      	pop	{r7}
 80024c8:	4770      	bx	lr

080024ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a29      	ldr	r2, [pc, #164]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00b      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d007      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <TIM_Base_SetConfig+0xbc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d003      	beq.n	800250c <TIM_Base_SetConfig+0x30>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a25      	ldr	r2, [pc, #148]	; (800259c <TIM_Base_SetConfig+0xc0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d108      	bne.n	800251e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00b      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252c:	d007      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a19      	ldr	r2, [pc, #100]	; (8002598 <TIM_Base_SetConfig+0xbc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d003      	beq.n	800253e <TIM_Base_SetConfig+0x62>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a18      	ldr	r2, [pc, #96]	; (800259c <TIM_Base_SetConfig+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d108      	bne.n	8002550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	4313      	orrs	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a07      	ldr	r2, [pc, #28]	; (8002594 <TIM_Base_SetConfig+0xb8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	615a      	str	r2, [r3, #20]
}
 800258a:	bf00      	nop
 800258c:	3714      	adds	r7, #20
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00
 8002598:	40000400 	.word	0x40000400
 800259c:	40000800 	.word	0x40000800

080025a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr

080025b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <__libc_init_array>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	2600      	movs	r6, #0
 80025c8:	4d0c      	ldr	r5, [pc, #48]	; (80025fc <__libc_init_array+0x38>)
 80025ca:	4c0d      	ldr	r4, [pc, #52]	; (8002600 <__libc_init_array+0x3c>)
 80025cc:	1b64      	subs	r4, r4, r5
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	42a6      	cmp	r6, r4
 80025d2:	d109      	bne.n	80025e8 <__libc_init_array+0x24>
 80025d4:	f000 f822 	bl	800261c <_init>
 80025d8:	2600      	movs	r6, #0
 80025da:	4d0a      	ldr	r5, [pc, #40]	; (8002604 <__libc_init_array+0x40>)
 80025dc:	4c0a      	ldr	r4, [pc, #40]	; (8002608 <__libc_init_array+0x44>)
 80025de:	1b64      	subs	r4, r4, r5
 80025e0:	10a4      	asrs	r4, r4, #2
 80025e2:	42a6      	cmp	r6, r4
 80025e4:	d105      	bne.n	80025f2 <__libc_init_array+0x2e>
 80025e6:	bd70      	pop	{r4, r5, r6, pc}
 80025e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ec:	4798      	blx	r3
 80025ee:	3601      	adds	r6, #1
 80025f0:	e7ee      	b.n	80025d0 <__libc_init_array+0xc>
 80025f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f6:	4798      	blx	r3
 80025f8:	3601      	adds	r6, #1
 80025fa:	e7f2      	b.n	80025e2 <__libc_init_array+0x1e>
 80025fc:	0800266c 	.word	0x0800266c
 8002600:	0800266c 	.word	0x0800266c
 8002604:	0800266c 	.word	0x0800266c
 8002608:	08002670 	.word	0x08002670

0800260c <memset>:
 800260c:	4603      	mov	r3, r0
 800260e:	4402      	add	r2, r0
 8002610:	4293      	cmp	r3, r2
 8002612:	d100      	bne.n	8002616 <memset+0xa>
 8002614:	4770      	bx	lr
 8002616:	f803 1b01 	strb.w	r1, [r3], #1
 800261a:	e7f9      	b.n	8002610 <memset+0x4>

0800261c <_init>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	bf00      	nop
 8002620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002622:	bc08      	pop	{r3}
 8002624:	469e      	mov	lr, r3
 8002626:	4770      	bx	lr

08002628 <_fini>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr
