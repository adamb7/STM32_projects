
ADC_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080022ac  080022ac  000122ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022d4  080022d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022d8  080022d8  000122d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  080022e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080022e8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad0b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c53  00000000  00000000  0002ad40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002c998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  0002d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001734d  00000000  00000000  0002ded0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7dd  00000000  00000000  0004521d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088d0e  00000000  00000000  000519fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da708  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d18  00000000  00000000  000da75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002294 	.word	0x08002294

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002294 	.word	0x08002294

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa5e 	bl	8000610 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f810 	bl	8000178 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8a8 	bl	80002ac <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f868 	bl	8000230 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8000160:	4804      	ldr	r0, [pc, #16]	; (8000174 <main+0x28>)
 8000162:	f000 fb83 	bl	800086c <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(200);
 8000166:	20c8      	movs	r0, #200	; 0xc8
 8000168:	f000 fa84 	bl	8000674 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 800016c:	4801      	ldr	r0, [pc, #4]	; (8000174 <main+0x28>)
 800016e:	f000 fb7d 	bl	800086c <HAL_ADC_Start_IT>
	  HAL_Delay(200);
 8000172:	e7f8      	b.n	8000166 <main+0x1a>
 8000174:	20000028 	.word	0x20000028

08000178 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b094      	sub	sp, #80	; 0x50
 800017c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000182:	2228      	movs	r2, #40	; 0x28
 8000184:	2100      	movs	r1, #0
 8000186:	4618      	mov	r0, r3
 8000188:	f002 f87c 	bl	8002284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800018c:	f107 0314 	add.w	r3, r7, #20
 8000190:	2200      	movs	r2, #0
 8000192:	601a      	str	r2, [r3, #0]
 8000194:	605a      	str	r2, [r3, #4]
 8000196:	609a      	str	r2, [r3, #8]
 8000198:	60da      	str	r2, [r3, #12]
 800019a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a8:	2301      	movs	r3, #1
 80001aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b2:	2300      	movs	r3, #0
 80001b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ba:	2302      	movs	r3, #2
 80001bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001c4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 f8fe 	bl	80013d0 <HAL_RCC_OscConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001da:	f000 f8df 	bl	800039c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001de:	230f      	movs	r3, #15
 80001e0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e2:	2302      	movs	r3, #2
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f0:	2300      	movs	r3, #0
 80001f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f4:	f107 0314 	add.w	r3, r7, #20
 80001f8:	2102      	movs	r1, #2
 80001fa:	4618      	mov	r0, r3
 80001fc:	f001 fb68 	bl	80018d0 <HAL_RCC_ClockConfig>
 8000200:	4603      	mov	r3, r0
 8000202:	2b00      	cmp	r3, #0
 8000204:	d001      	beq.n	800020a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000206:	f000 f8c9 	bl	800039c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020a:	2302      	movs	r3, #2
 800020c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800020e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000212:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	4618      	mov	r0, r3
 8000218:	f001 fd10 	bl	8001c3c <HAL_RCCEx_PeriphCLKConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000222:	f000 f8bb 	bl	800039c <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3750      	adds	r7, #80	; 0x50
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	; (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fa25 	bl	80006bc <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f890 	bl	800039c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800027c:	2301      	movs	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000284:	2303      	movs	r3, #3
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	; (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fc7b 	bl	8000b88 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f880 	bl	800039c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000028 	.word	0x20000028
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_GPIO_Init+0x90>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a1d      	ldr	r2, [pc, #116]	; (800033c <MX_GPIO_Init+0x90>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_GPIO_Init+0x90>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_GPIO_Init+0x90>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a17      	ldr	r2, [pc, #92]	; (800033c <MX_GPIO_Init+0x90>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b15      	ldr	r3, [pc, #84]	; (800033c <MX_GPIO_Init+0x90>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b12      	ldr	r3, [pc, #72]	; (800033c <MX_GPIO_Init+0x90>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a11      	ldr	r2, [pc, #68]	; (800033c <MX_GPIO_Init+0x90>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b0f      	ldr	r3, [pc, #60]	; (800033c <MX_GPIO_Init+0x90>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800030e:	480c      	ldr	r0, [pc, #48]	; (8000340 <MX_GPIO_Init+0x94>)
 8000310:	f001 f82c 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031a:	2301      	movs	r3, #1
 800031c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000322:	2302      	movs	r3, #2
 8000324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4804      	ldr	r0, [pc, #16]	; (8000340 <MX_GPIO_Init+0x94>)
 800032e:	f000 fe99 	bl	8001064 <HAL_GPIO_Init>

}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40021000 	.word	0x40021000
 8000340:	40011000 	.word	0x40011000

08000344 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800034c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000350:	4806      	ldr	r0, [pc, #24]	; (800036c <HAL_ADC_ConvCpltCallback+0x28>)
 8000352:	f001 f823 	bl	800139c <HAL_GPIO_TogglePin>
	value_adc = HAL_ADC_GetValue(&hadc1);
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000358:	f000 fb3e 	bl	80009d8 <HAL_ADC_GetValue>
 800035c:	4603      	mov	r3, r0
 800035e:	4a05      	ldr	r2, [pc, #20]	; (8000374 <HAL_ADC_ConvCpltCallback+0x30>)
 8000360:	6013      	str	r3, [r2, #0]
}
 8000362:	bf00      	nop
 8000364:	3708      	adds	r7, #8
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40011000 	.word	0x40011000
 8000370:	20000028 	.word	0x20000028
 8000374:	20000058 	.word	0x20000058

08000378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a04      	ldr	r2, [pc, #16]	; (8000398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000386:	4293      	cmp	r3, r2
 8000388:	d101      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800038a:	f000 f957 	bl	800063c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	40012c00 	.word	0x40012c00

0800039c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a0:	b672      	cpsid	i
}
 80003a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <Error_Handler+0x8>
	...

080003a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b085      	sub	sp, #20
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <HAL_MspInit+0x5c>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a14      	ldr	r2, [pc, #80]	; (8000404 <HAL_MspInit+0x5c>)
 80003b4:	f043 0301 	orr.w	r3, r3, #1
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <HAL_MspInit+0x5c>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0301 	and.w	r3, r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003c6:	4b0f      	ldr	r3, [pc, #60]	; (8000404 <HAL_MspInit+0x5c>)
 80003c8:	69db      	ldr	r3, [r3, #28]
 80003ca:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <HAL_MspInit+0x5c>)
 80003cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d0:	61d3      	str	r3, [r2, #28]
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <HAL_MspInit+0x5c>)
 80003d4:	69db      	ldr	r3, [r3, #28]
 80003d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003de:	4b0a      	ldr	r3, [pc, #40]	; (8000408 <HAL_MspInit+0x60>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f2:	60fb      	str	r3, [r7, #12]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <HAL_MspInit+0x60>)
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fa:	bf00      	nop
 80003fc:	3714      	adds	r7, #20
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000
 8000408:	40010000 	.word	0x40010000

0800040c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4a18      	ldr	r2, [pc, #96]	; (8000488 <HAL_ADC_MspInit+0x7c>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d129      	bne.n	8000480 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800042c:	4b17      	ldr	r3, [pc, #92]	; (800048c <HAL_ADC_MspInit+0x80>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a16      	ldr	r2, [pc, #88]	; (800048c <HAL_ADC_MspInit+0x80>)
 8000432:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <HAL_ADC_MspInit+0x80>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000440:	60fb      	str	r3, [r7, #12]
 8000442:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_ADC_MspInit+0x80>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a10      	ldr	r2, [pc, #64]	; (800048c <HAL_ADC_MspInit+0x80>)
 800044a:	f043 0304 	orr.w	r3, r3, #4
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b0e      	ldr	r3, [pc, #56]	; (800048c <HAL_ADC_MspInit+0x80>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0304 	and.w	r3, r3, #4
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800045c:	2302      	movs	r3, #2
 800045e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	2303      	movs	r3, #3
 8000462:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4809      	ldr	r0, [pc, #36]	; (8000490 <HAL_ADC_MspInit+0x84>)
 800046c:	f000 fdfa 	bl	8001064 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000470:	2200      	movs	r2, #0
 8000472:	2100      	movs	r1, #0
 8000474:	2012      	movs	r0, #18
 8000476:	f000 fdca 	bl	800100e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800047a:	2012      	movs	r0, #18
 800047c:	f000 fde3 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000480:	bf00      	nop
 8000482:	3720      	adds	r7, #32
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	40012400 	.word	0x40012400
 800048c:	40021000 	.word	0x40021000
 8000490:	40010800 	.word	0x40010800

08000494 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800049c:	2300      	movs	r3, #0
 800049e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80004a0:	2300      	movs	r3, #0
 80004a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	2019      	movs	r0, #25
 80004aa:	f000 fdb0 	bl	800100e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80004ae:	2019      	movs	r0, #25
 80004b0:	f000 fdc9 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004b4:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <HAL_InitTick+0x9c>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <HAL_InitTick+0x9c>)
 80004ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <HAL_InitTick+0x9c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004c8:	60fb      	str	r3, [r7, #12]
 80004ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004cc:	f107 0210 	add.w	r2, r7, #16
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 fb62 	bl	8001ba0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004dc:	f001 fb4c 	bl	8001b78 <HAL_RCC_GetPCLK2Freq>
 80004e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <HAL_InitTick+0xa0>)
 80004e6:	fba2 2303 	umull	r2, r3, r2, r3
 80004ea:	0c9b      	lsrs	r3, r3, #18
 80004ec:	3b01      	subs	r3, #1
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80004f0:	4b11      	ldr	r3, [pc, #68]	; (8000538 <HAL_InitTick+0xa4>)
 80004f2:	4a12      	ldr	r2, [pc, #72]	; (800053c <HAL_InitTick+0xa8>)
 80004f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <HAL_InitTick+0xa4>)
 80004f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004fc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0xa4>)
 8000500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000502:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_InitTick+0xa4>)
 8000506:	2200      	movs	r2, #0
 8000508:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800050a:	4b0b      	ldr	r3, [pc, #44]	; (8000538 <HAL_InitTick+0xa4>)
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <HAL_InitTick+0xa4>)
 8000512:	f001 fc49 	bl	8001da8 <HAL_TIM_Base_Init>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d104      	bne.n	8000526 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <HAL_InitTick+0xa4>)
 800051e:	f001 fc9b 	bl	8001e58 <HAL_TIM_Base_Start_IT>
 8000522:	4603      	mov	r3, r0
 8000524:	e000      	b.n	8000528 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
}
 8000528:	4618      	mov	r0, r3
 800052a:	3730      	adds	r7, #48	; 0x30
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40021000 	.word	0x40021000
 8000534:	431bde83 	.word	0x431bde83
 8000538:	2000005c 	.word	0x2000005c
 800053c:	40012c00 	.word	0x40012c00

08000540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <NMI_Handler+0x4>

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
	...

08000590 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000594:	4802      	ldr	r0, [pc, #8]	; (80005a0 <ADC1_2_IRQHandler+0x10>)
 8000596:	f000 fa2b 	bl	80009f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028

080005a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005a8:	4802      	ldr	r0, [pc, #8]	; (80005b4 <TIM1_UP_IRQHandler+0x10>)
 80005aa:	f001 fca7 	bl	8001efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000005c 	.word	0x2000005c

080005b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr

080005c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005c6:	e003      	b.n	80005d0 <LoopCopyDataInit>

080005c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005c8:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005ce:	3104      	adds	r1, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d0:	480a      	ldr	r0, [pc, #40]	; (80005fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005d2:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005d8:	d3f6      	bcc.n	80005c8 <CopyDataInit>
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005dc:	e002      	b.n	80005e4 <LoopFillZerobss>

080005de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e0:	f842 3b04 	str.w	r3, [r2], #4

080005e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005e8:	d3f9      	bcc.n	80005de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005ea:	f7ff ffe5 	bl	80005b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ee:	f001 fe25 	bl	800223c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005f2:	f7ff fdab 	bl	800014c <main>
  bx lr
 80005f6:	4770      	bx	lr
  ldr r3, =_sidata
 80005f8:	080022dc 	.word	0x080022dc
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000604:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000608:	200000a8 	.word	0x200000a8

0800060c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <CAN1_RX1_IRQHandler>
	...

08000610 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <HAL_Init+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a07      	ldr	r2, [pc, #28]	; (8000638 <HAL_Init+0x28>)
 800061a:	f043 0310 	orr.w	r3, r3, #16
 800061e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 fce9 	bl	8000ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff34 	bl	8000494 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800062c:	f7ff febc 	bl	80003a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40022000 	.word	0x40022000

0800063c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000640:	4b05      	ldr	r3, [pc, #20]	; (8000658 <HAL_IncTick+0x1c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	4b05      	ldr	r3, [pc, #20]	; (800065c <HAL_IncTick+0x20>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4413      	add	r3, r2
 800064c:	4a03      	ldr	r2, [pc, #12]	; (800065c <HAL_IncTick+0x20>)
 800064e:	6013      	str	r3, [r2, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr
 8000658:	20000008 	.word	0x20000008
 800065c:	200000a4 	.word	0x200000a4

08000660 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  return uwTick;
 8000664:	4b02      	ldr	r3, [pc, #8]	; (8000670 <HAL_GetTick+0x10>)
 8000666:	681b      	ldr	r3, [r3, #0]
}
 8000668:	4618      	mov	r0, r3
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr
 8000670:	200000a4 	.word	0x200000a4

08000674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800067c:	f7ff fff0 	bl	8000660 <HAL_GetTick>
 8000680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800068c:	d005      	beq.n	800069a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <HAL_Delay+0x44>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	4413      	add	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800069a:	bf00      	nop
 800069c:	f7ff ffe0 	bl	8000660 <HAL_GetTick>
 80006a0:	4602      	mov	r2, r0
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d8f7      	bhi.n	800069c <HAL_Delay+0x28>
  {
  }
}
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	3710      	adds	r7, #16
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008

080006bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d101      	bne.n	80006de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80006da:	2301      	movs	r3, #1
 80006dc:	e0be      	b.n	800085c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d109      	bne.n	8000700 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fe86 	bl	800040c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 fb8b 	bl	8000e1c <ADC_ConversionStop_Disable>
 8000706:	4603      	mov	r3, r0
 8000708:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800070e:	f003 0310 	and.w	r3, r3, #16
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8099 	bne.w	800084a <HAL_ADC_Init+0x18e>
 8000718:	7dfb      	ldrb	r3, [r7, #23]
 800071a:	2b00      	cmp	r3, #0
 800071c:	f040 8095 	bne.w	800084a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000724:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000728:	f023 0302 	bic.w	r3, r3, #2
 800072c:	f043 0202 	orr.w	r2, r3, #2
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800073c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7b1b      	ldrb	r3, [r3, #12]
 8000742:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000744:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	4313      	orrs	r3, r2
 800074a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000754:	d003      	beq.n	800075e <HAL_ADC_Init+0xa2>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d102      	bne.n	8000764 <HAL_ADC_Init+0xa8>
 800075e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000762:	e000      	b.n	8000766 <HAL_ADC_Init+0xaa>
 8000764:	2300      	movs	r3, #0
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	4313      	orrs	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	7d1b      	ldrb	r3, [r3, #20]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d119      	bne.n	80007a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	7b1b      	ldrb	r3, [r3, #12]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d109      	bne.n	8000790 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	3b01      	subs	r3, #1
 8000782:	035a      	lsls	r2, r3, #13
 8000784:	693b      	ldr	r3, [r7, #16]
 8000786:	4313      	orrs	r3, r2
 8000788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	e00b      	b.n	80007a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000794:	f043 0220 	orr.w	r2, r3, #32
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a0:	f043 0201 	orr.w	r2, r3, #1
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685b      	ldr	r3, [r3, #4]
 80007ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	430a      	orrs	r2, r1
 80007ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689a      	ldr	r2, [r3, #8]
 80007c2:	4b28      	ldr	r3, [pc, #160]	; (8000864 <HAL_ADC_Init+0x1a8>)
 80007c4:	4013      	ands	r3, r2
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	68b9      	ldr	r1, [r7, #8]
 80007cc:	430b      	orrs	r3, r1
 80007ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007d8:	d003      	beq.n	80007e2 <HAL_ADC_Init+0x126>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d104      	bne.n	80007ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	691b      	ldr	r3, [r3, #16]
 80007e6:	3b01      	subs	r3, #1
 80007e8:	051b      	lsls	r3, r3, #20
 80007ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	430a      	orrs	r2, r1
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	689a      	ldr	r2, [r3, #8]
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <HAL_ADC_Init+0x1ac>)
 8000808:	4013      	ands	r3, r2
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	429a      	cmp	r2, r3
 800080e:	d10b      	bne.n	8000828 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800081a:	f023 0303 	bic.w	r3, r3, #3
 800081e:	f043 0201 	orr.w	r2, r3, #1
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000826:	e018      	b.n	800085a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800082c:	f023 0312 	bic.w	r3, r3, #18
 8000830:	f043 0210 	orr.w	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083c:	f043 0201 	orr.w	r2, r3, #1
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000844:	2301      	movs	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000848:	e007      	b.n	800085a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800084e:	f043 0210 	orr.w	r2, r3, #16
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800085a:	7dfb      	ldrb	r3, [r7, #23]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	ffe1f7fd 	.word	0xffe1f7fd
 8000868:	ff1f0efe 	.word	0xff1f0efe

0800086c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800087e:	2b01      	cmp	r3, #1
 8000880:	d101      	bne.n	8000886 <HAL_ADC_Start_IT+0x1a>
 8000882:	2302      	movs	r3, #2
 8000884:	e0a0      	b.n	80009c8 <HAL_ADC_Start_IT+0x15c>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f000 fa72 	bl	8000d78 <ADC_Enable>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000898:	7bfb      	ldrb	r3, [r7, #15]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f040 808f 	bne.w	80009be <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008a8:	f023 0301 	bic.w	r3, r3, #1
 80008ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a45      	ldr	r2, [pc, #276]	; (80009d0 <HAL_ADC_Start_IT+0x164>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d105      	bne.n	80008ca <HAL_ADC_Start_IT+0x5e>
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <HAL_ADC_Start_IT+0x168>)
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d115      	bne.n	80008f6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d026      	beq.n	8000932 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80008f4:	e01d      	b.n	8000932 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a33      	ldr	r2, [pc, #204]	; (80009d4 <HAL_ADC_Start_IT+0x168>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d004      	beq.n	8000916 <HAL_ADC_Start_IT+0xaa>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a2f      	ldr	r2, [pc, #188]	; (80009d0 <HAL_ADC_Start_IT+0x164>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d10d      	bne.n	8000932 <HAL_ADC_Start_IT+0xc6>
 8000916:	4b2f      	ldr	r3, [pc, #188]	; (80009d4 <HAL_ADC_Start_IT+0x168>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800092a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d006      	beq.n	800094c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	f023 0206 	bic.w	r2, r3, #6
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	62da      	str	r2, [r3, #44]	; 0x2c
 800094a:	e002      	b.n	8000952 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f06f 0202 	mvn.w	r2, #2
 8000962:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f042 0220 	orr.w	r2, r2, #32
 8000972:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800097e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000982:	d113      	bne.n	80009ac <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000988:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <HAL_ADC_Start_IT+0x164>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d105      	bne.n	800099a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <HAL_ADC_Start_IT+0x168>)
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	e00c      	b.n	80009c6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	e003      	b.n	80009c6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40012800 	.word	0x40012800
 80009d4:	40012400 	.word	0x40012400

080009d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685b      	ldr	r3, [r3, #4]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b20      	cmp	r3, #32
 8000a04:	d140      	bne.n	8000a88 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d139      	bne.n	8000a88 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d105      	bne.n	8000a2c <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a36:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a3a:	d11d      	bne.n	8000a78 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d119      	bne.n	8000a78 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f022 0220 	bic.w	r2, r2, #32
 8000a52:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a70:	f043 0201 	orr.w	r2, r3, #1
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff fc63 	bl	8000344 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f06f 0212 	mvn.w	r2, #18
 8000a86:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a92:	2b80      	cmp	r3, #128	; 0x80
 8000a94:	d14f      	bne.n	8000b36 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d148      	bne.n	8000b36 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d105      	bne.n	8000abc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000ac6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000aca:	d012      	beq.n	8000af2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d125      	bne.n	8000b26 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ae4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ae8:	d11d      	bne.n	8000b26 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d119      	bne.n	8000b26 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	685a      	ldr	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b00:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d105      	bne.n	8000b26 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f043 0201 	orr.w	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f9b2 	bl	8000e90 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f06f 020c 	mvn.w	r2, #12
 8000b34:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b40:	2b40      	cmp	r3, #64	; 0x40
 8000b42:	d114      	bne.n	8000b6e <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d10d      	bne.n	8000b6e <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f809 	bl	8000b76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f06f 0201 	mvn.w	r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x20>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e0dc      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x1da>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b06      	cmp	r3, #6
 8000bb6:	d81c      	bhi.n	8000bf2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3b05      	subs	r3, #5
 8000bca:	221f      	movs	r2, #31
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	4019      	ands	r1, r3
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	6818      	ldr	r0, [r3, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685a      	ldr	r2, [r3, #4]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	3b05      	subs	r3, #5
 8000be4:	fa00 f203 	lsl.w	r2, r0, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	430a      	orrs	r2, r1
 8000bee:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf0:	e03c      	b.n	8000c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	2b0c      	cmp	r3, #12
 8000bf8:	d81c      	bhi.n	8000c34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	4613      	mov	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4413      	add	r3, r2
 8000c0a:	3b23      	subs	r3, #35	; 0x23
 8000c0c:	221f      	movs	r2, #31
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4019      	ands	r1, r3
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4613      	mov	r3, r2
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	3b23      	subs	r3, #35	; 0x23
 8000c26:	fa00 f203 	lsl.w	r2, r0, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
 8000c32:	e01b      	b.n	8000c6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	3b41      	subs	r3, #65	; 0x41
 8000c46:	221f      	movs	r2, #31
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4019      	ands	r1, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b41      	subs	r3, #65	; 0x41
 8000c60:	fa00 f203 	lsl.w	r2, r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b09      	cmp	r3, #9
 8000c72:	d91c      	bls.n	8000cae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68d9      	ldr	r1, [r3, #12]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	3b1e      	subs	r3, #30
 8000c86:	2207      	movs	r2, #7
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	4019      	ands	r1, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	3b1e      	subs	r3, #30
 8000ca0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	e019      	b.n	8000ce2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	6919      	ldr	r1, [r3, #16]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2207      	movs	r2, #7
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4019      	ands	r1, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	6898      	ldr	r0, [r3, #8]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b10      	cmp	r3, #16
 8000ce8:	d003      	beq.n	8000cf2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cee:	2b11      	cmp	r3, #17
 8000cf0:	d132      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <HAL_ADC_ConfigChannel+0x1e4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d125      	bne.n	8000d48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d126      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d18:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b10      	cmp	r3, #16
 8000d20:	d11a      	bne.n	8000d58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a13      	ldr	r2, [pc, #76]	; (8000d74 <HAL_ADC_ConfigChannel+0x1ec>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	0c9a      	lsrs	r2, r3, #18
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d38:	e002      	b.n	8000d40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f9      	bne.n	8000d3a <HAL_ADC_ConfigChannel+0x1b2>
 8000d46:	e007      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f043 0220 	orr.w	r2, r3, #32
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	40012400 	.word	0x40012400
 8000d70:	20000000 	.word	0x20000000
 8000d74:	431bde83 	.word	0x431bde83

08000d78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d039      	beq.n	8000e0a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	689a      	ldr	r2, [r3, #8]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f042 0201 	orr.w	r2, r2, #1
 8000da4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000da6:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <ADC_Enable+0x9c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <ADC_Enable+0xa0>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	0c9b      	lsrs	r3, r3, #18
 8000db2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000db4:	e002      	b.n	8000dbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dc2:	f7ff fc4d 	bl	8000660 <HAL_GetTick>
 8000dc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dc8:	e018      	b.n	8000dfc <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000dca:	f7ff fc49 	bl	8000660 <HAL_GetTick>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	1ad3      	subs	r3, r2, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d911      	bls.n	8000dfc <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	f043 0210 	orr.w	r2, r3, #16
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de8:	f043 0201 	orr.w	r2, r3, #1
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e007      	b.n	8000e0c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d1df      	bne.n	8000dca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	431bde83 	.word	0x431bde83

08000e1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d127      	bne.n	8000e86 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689a      	ldr	r2, [r3, #8]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0201 	bic.w	r2, r2, #1
 8000e44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e46:	f7ff fc0b 	bl	8000660 <HAL_GetTick>
 8000e4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e4c:	e014      	b.n	8000e78 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e4e:	f7ff fc07 	bl	8000660 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d90d      	bls.n	8000e78 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e60:	f043 0210 	orr.w	r2, r3, #16
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	e007      	b.n	8000e88 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d0e3      	beq.n	8000e4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
	...

08000ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	60d3      	str	r3, [r2, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc80      	pop	{r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0a1b      	lsrs	r3, r3, #8
 8000ef6:	f003 0307 	and.w	r3, r3, #7
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	db0b      	blt.n	8000f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	f003 021f 	and.w	r2, r3, #31
 8000f20:	4906      	ldr	r1, [pc, #24]	; (8000f3c <__NVIC_EnableIRQ+0x34>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	095b      	lsrs	r3, r3, #5
 8000f28:	2001      	movs	r0, #1
 8000f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100

08000f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	db0a      	blt.n	8000f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	490c      	ldr	r1, [pc, #48]	; (8000f8c <__NVIC_SetPriority+0x4c>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	0112      	lsls	r2, r2, #4
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	440b      	add	r3, r1
 8000f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f68:	e00a      	b.n	8000f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	4908      	ldr	r1, [pc, #32]	; (8000f90 <__NVIC_SetPriority+0x50>)
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	f003 030f 	and.w	r3, r3, #15
 8000f76:	3b04      	subs	r3, #4
 8000f78:	0112      	lsls	r2, r2, #4
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	440b      	add	r3, r1
 8000f7e:	761a      	strb	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	e000e100 	.word	0xe000e100
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b089      	sub	sp, #36	; 0x24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f1c3 0307 	rsb	r3, r3, #7
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	bf28      	it	cs
 8000fb2:	2304      	movcs	r3, #4
 8000fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3304      	adds	r3, #4
 8000fba:	2b06      	cmp	r3, #6
 8000fbc:	d902      	bls.n	8000fc4 <NVIC_EncodePriority+0x30>
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3b03      	subs	r3, #3
 8000fc2:	e000      	b.n	8000fc6 <NVIC_EncodePriority+0x32>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	401a      	ands	r2, r3
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe6:	43d9      	mvns	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	4313      	orrs	r3, r2
         );
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3724      	adds	r7, #36	; 0x24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff4f 	bl	8000ea4 <__NVIC_SetPriorityGrouping>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100e:	b580      	push	{r7, lr}
 8001010:	b086      	sub	sp, #24
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	60b9      	str	r1, [r7, #8]
 8001018:	607a      	str	r2, [r7, #4]
 800101a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff64 	bl	8000eec <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ffb2 	bl	8000f94 <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff81 	bl	8000f40 <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff57 	bl	8000f08 <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
	...

08001064 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001064:	b480      	push	{r7}
 8001066:	b08b      	sub	sp, #44	; 0x2c
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001076:	e169      	b.n	800134c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001078:	2201      	movs	r2, #1
 800107a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	f040 8158 	bne.w	8001346 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	4a9a      	ldr	r2, [pc, #616]	; (8001304 <HAL_GPIO_Init+0x2a0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d05e      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010a0:	4a98      	ldr	r2, [pc, #608]	; (8001304 <HAL_GPIO_Init+0x2a0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d875      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010a6:	4a98      	ldr	r2, [pc, #608]	; (8001308 <HAL_GPIO_Init+0x2a4>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d058      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010ac:	4a96      	ldr	r2, [pc, #600]	; (8001308 <HAL_GPIO_Init+0x2a4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d86f      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010b2:	4a96      	ldr	r2, [pc, #600]	; (800130c <HAL_GPIO_Init+0x2a8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d052      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010b8:	4a94      	ldr	r2, [pc, #592]	; (800130c <HAL_GPIO_Init+0x2a8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d869      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010be:	4a94      	ldr	r2, [pc, #592]	; (8001310 <HAL_GPIO_Init+0x2ac>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d04c      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010c4:	4a92      	ldr	r2, [pc, #584]	; (8001310 <HAL_GPIO_Init+0x2ac>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d863      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010ca:	4a92      	ldr	r2, [pc, #584]	; (8001314 <HAL_GPIO_Init+0x2b0>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d046      	beq.n	800115e <HAL_GPIO_Init+0xfa>
 80010d0:	4a90      	ldr	r2, [pc, #576]	; (8001314 <HAL_GPIO_Init+0x2b0>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d85d      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d82a      	bhi.n	8001130 <HAL_GPIO_Init+0xcc>
 80010da:	2b12      	cmp	r3, #18
 80010dc:	d859      	bhi.n	8001192 <HAL_GPIO_Init+0x12e>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HAL_GPIO_Init+0x80>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	0800115f 	.word	0x0800115f
 80010e8:	08001139 	.word	0x08001139
 80010ec:	0800114b 	.word	0x0800114b
 80010f0:	0800118d 	.word	0x0800118d
 80010f4:	08001193 	.word	0x08001193
 80010f8:	08001193 	.word	0x08001193
 80010fc:	08001193 	.word	0x08001193
 8001100:	08001193 	.word	0x08001193
 8001104:	08001193 	.word	0x08001193
 8001108:	08001193 	.word	0x08001193
 800110c:	08001193 	.word	0x08001193
 8001110:	08001193 	.word	0x08001193
 8001114:	08001193 	.word	0x08001193
 8001118:	08001193 	.word	0x08001193
 800111c:	08001193 	.word	0x08001193
 8001120:	08001193 	.word	0x08001193
 8001124:	08001193 	.word	0x08001193
 8001128:	08001141 	.word	0x08001141
 800112c:	08001155 	.word	0x08001155
 8001130:	4a79      	ldr	r2, [pc, #484]	; (8001318 <HAL_GPIO_Init+0x2b4>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001136:	e02c      	b.n	8001192 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e029      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	623b      	str	r3, [r7, #32]
          break;
 8001148:	e024      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	3308      	adds	r3, #8
 8001150:	623b      	str	r3, [r7, #32]
          break;
 8001152:	e01f      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	330c      	adds	r3, #12
 800115a:	623b      	str	r3, [r7, #32]
          break;
 800115c:	e01a      	b.n	8001194 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d102      	bne.n	800116c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001166:	2304      	movs	r3, #4
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e013      	b.n	8001194 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d105      	bne.n	8001180 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001174:	2308      	movs	r3, #8
 8001176:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	611a      	str	r2, [r3, #16]
          break;
 800117e:	e009      	b.n	8001194 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001180:	2308      	movs	r3, #8
 8001182:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	615a      	str	r2, [r3, #20]
          break;
 800118a:	e003      	b.n	8001194 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
          break;
 8001190:	e000      	b.n	8001194 <HAL_GPIO_Init+0x130>
          break;
 8001192:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	2bff      	cmp	r3, #255	; 0xff
 8001198:	d801      	bhi.n	800119e <HAL_GPIO_Init+0x13a>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	e001      	b.n	80011a2 <HAL_GPIO_Init+0x13e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	3304      	adds	r3, #4
 80011a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	; 0xff
 80011a8:	d802      	bhi.n	80011b0 <HAL_GPIO_Init+0x14c>
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	e002      	b.n	80011b6 <HAL_GPIO_Init+0x152>
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	3b08      	subs	r3, #8
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	210f      	movs	r1, #15
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401a      	ands	r2, r3
 80011c8:	6a39      	ldr	r1, [r7, #32]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	fa01 f303 	lsl.w	r3, r1, r3
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80b1 	beq.w	8001346 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e4:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b4a      	ldr	r3, [pc, #296]	; (800131c <HAL_GPIO_Init+0x2b8>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011fc:	4a48      	ldr	r2, [pc, #288]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001208:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	220f      	movs	r2, #15
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	43db      	mvns	r3, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4013      	ands	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a40      	ldr	r2, [pc, #256]	; (8001324 <HAL_GPIO_Init+0x2c0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d013      	beq.n	8001250 <HAL_GPIO_Init+0x1ec>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a3f      	ldr	r2, [pc, #252]	; (8001328 <HAL_GPIO_Init+0x2c4>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d00d      	beq.n	800124c <HAL_GPIO_Init+0x1e8>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a3e      	ldr	r2, [pc, #248]	; (800132c <HAL_GPIO_Init+0x2c8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d007      	beq.n	8001248 <HAL_GPIO_Init+0x1e4>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3d      	ldr	r2, [pc, #244]	; (8001330 <HAL_GPIO_Init+0x2cc>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d101      	bne.n	8001244 <HAL_GPIO_Init+0x1e0>
 8001240:	2303      	movs	r3, #3
 8001242:	e006      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001244:	2304      	movs	r3, #4
 8001246:	e004      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001248:	2302      	movs	r3, #2
 800124a:	e002      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <HAL_GPIO_Init+0x1ee>
 8001250:	2300      	movs	r3, #0
 8001252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001254:	f002 0203 	and.w	r2, r2, #3
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	4093      	lsls	r3, r2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001262:	492f      	ldr	r1, [pc, #188]	; (8001320 <HAL_GPIO_Init+0x2bc>)
 8001264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001266:	089b      	lsrs	r3, r3, #2
 8001268:	3302      	adds	r3, #2
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	492c      	ldr	r1, [pc, #176]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	600b      	str	r3, [r1, #0]
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	43db      	mvns	r3, r3
 8001292:	4928      	ldr	r1, [pc, #160]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 8001294:	4013      	ands	r3, r2
 8001296:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a4:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012a6:	685a      	ldr	r2, [r3, #4]
 80012a8:	4922      	ldr	r1, [pc, #136]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	604b      	str	r3, [r1, #4]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	491e      	ldr	r1, [pc, #120]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	4918      	ldr	r1, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012da:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	4914      	ldr	r1, [pc, #80]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d021      	beq.n	8001338 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	490e      	ldr	r1, [pc, #56]	; (8001334 <HAL_GPIO_Init+0x2d0>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
 8001300:	e021      	b.n	8001346 <HAL_GPIO_Init+0x2e2>
 8001302:	bf00      	nop
 8001304:	10320000 	.word	0x10320000
 8001308:	10310000 	.word	0x10310000
 800130c:	10220000 	.word	0x10220000
 8001310:	10210000 	.word	0x10210000
 8001314:	10120000 	.word	0x10120000
 8001318:	10110000 	.word	0x10110000
 800131c:	40021000 	.word	0x40021000
 8001320:	40010000 	.word	0x40010000
 8001324:	40010800 	.word	0x40010800
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40011000 	.word	0x40011000
 8001330:	40011400 	.word	0x40011400
 8001334:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_GPIO_Init+0x304>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	43db      	mvns	r3, r3
 8001340:	4909      	ldr	r1, [pc, #36]	; (8001368 <HAL_GPIO_Init+0x304>)
 8001342:	4013      	ands	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	3301      	adds	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	f47f ae8e 	bne.w	8001078 <HAL_GPIO_Init+0x14>
  }
}
 800135c:	bf00      	nop
 800135e:	bf00      	nop
 8001360:	372c      	adds	r7, #44	; 0x2c
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	40010400 	.word	0x40010400

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	611a      	str	r2, [r3, #16]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4013      	ands	r3, r2
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43d9      	mvns	r1, r3
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	400b      	ands	r3, r1
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	611a      	str	r2, [r3, #16]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
	...

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e26c      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8087 	beq.w	80014fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f0:	4b92      	ldr	r3, [pc, #584]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 030c 	and.w	r3, r3, #12
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d00c      	beq.n	8001416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013fc:	4b8f      	ldr	r3, [pc, #572]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d112      	bne.n	800142e <HAL_RCC_OscConfig+0x5e>
 8001408:	4b8c      	ldr	r3, [pc, #560]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001414:	d10b      	bne.n	800142e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001416:	4b89      	ldr	r3, [pc, #548]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d06c      	beq.n	80014fc <HAL_RCC_OscConfig+0x12c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d168      	bne.n	80014fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e246      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001436:	d106      	bne.n	8001446 <HAL_RCC_OscConfig+0x76>
 8001438:	4b80      	ldr	r3, [pc, #512]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a7f      	ldr	r2, [pc, #508]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800143e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e02e      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b7b      	ldr	r3, [pc, #492]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7a      	ldr	r2, [pc, #488]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b78      	ldr	r3, [pc, #480]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a77      	ldr	r2, [pc, #476]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001460:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0xbc>
 8001472:	4b72      	ldr	r3, [pc, #456]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a71      	ldr	r2, [pc, #452]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b6f      	ldr	r3, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xd4>
 800148c:	4b6b      	ldr	r3, [pc, #428]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a6a      	ldr	r2, [pc, #424]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b68      	ldr	r3, [pc, #416]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a67      	ldr	r2, [pc, #412]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff f8d8 	bl	8000660 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff f8d4 	bl	8000660 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1fa      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xe4>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff f8c4 	bl	8000660 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff f8c0 	bl	8000660 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1e6      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x10c>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150a:	4b4c      	ldr	r3, [pc, #304]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001516:	4b49      	ldr	r3, [pc, #292]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 030c 	and.w	r3, r3, #12
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x18c>
 8001522:	4b46      	ldr	r3, [pc, #280]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b43      	ldr	r3, [pc, #268]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x176>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1ba      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b3d      	ldr	r3, [pc, #244]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4939      	ldr	r1, [pc, #228]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff f879 	bl	8000660 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff f875 	bl	8000660 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e19b      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b2d      	ldr	r3, [pc, #180]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b2a      	ldr	r3, [pc, #168]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4927      	ldr	r1, [pc, #156]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_RCC_OscConfig+0x270>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ac:	f7ff f858 	bl	8000660 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff f854 	bl	8000660 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e17a      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d03a      	beq.n	8001654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d019      	beq.n	800161a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_RCC_OscConfig+0x274>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ec:	f7ff f838 	bl	8000660 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff f834 	bl	8000660 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e15a      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_RCC_OscConfig+0x26c>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f000 faf4 	bl	8001c00 <RCC_Delay>
 8001618:	e01c      	b.n	8001654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161a:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <HAL_RCC_OscConfig+0x274>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001620:	f7ff f81e 	bl	8000660 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001626:	e00f      	b.n	8001648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff f81a 	bl	8000660 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d908      	bls.n	8001648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e140      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	42420000 	.word	0x42420000
 8001644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001648:	4b9e      	ldr	r3, [pc, #632]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e9      	bne.n	8001628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 80a6 	beq.w	80017ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001666:	4b97      	ldr	r3, [pc, #604]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10d      	bne.n	800168e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001672:	4b94      	ldr	r3, [pc, #592]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a93      	ldr	r2, [pc, #588]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]
 800167e:	4b91      	ldr	r3, [pc, #580]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d118      	bne.n	80016cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169a:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <HAL_RCC_OscConfig+0x4f8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a8a      	ldr	r2, [pc, #552]	; (80018c8 <HAL_RCC_OscConfig+0x4f8>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a6:	f7fe ffdb 	bl	8000660 <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ae:	f7fe ffd7 	bl	8000660 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	; 0x64
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e0fd      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c0:	4b81      	ldr	r3, [pc, #516]	; (80018c8 <HAL_RCC_OscConfig+0x4f8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d0f0      	beq.n	80016ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d106      	bne.n	80016e2 <HAL_RCC_OscConfig+0x312>
 80016d4:	4b7b      	ldr	r3, [pc, #492]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	4a7a      	ldr	r2, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6213      	str	r3, [r2, #32]
 80016e0:	e02d      	b.n	800173e <HAL_RCC_OscConfig+0x36e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x334>
 80016ea:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4a75      	ldr	r2, [pc, #468]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6213      	str	r3, [r2, #32]
 80016f6:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	4a72      	ldr	r2, [pc, #456]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80016fc:	f023 0304 	bic.w	r3, r3, #4
 8001700:	6213      	str	r3, [r2, #32]
 8001702:	e01c      	b.n	800173e <HAL_RCC_OscConfig+0x36e>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b05      	cmp	r3, #5
 800170a:	d10c      	bne.n	8001726 <HAL_RCC_OscConfig+0x356>
 800170c:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	4a6c      	ldr	r2, [pc, #432]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	6213      	str	r3, [r2, #32]
 8001718:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6213      	str	r3, [r2, #32]
 8001724:	e00b      	b.n	800173e <HAL_RCC_OscConfig+0x36e>
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001728:	6a1b      	ldr	r3, [r3, #32]
 800172a:	4a66      	ldr	r2, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	6213      	str	r3, [r2, #32]
 8001732:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	f023 0304 	bic.w	r3, r3, #4
 800173c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d015      	beq.n	8001772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7fe ff8b 	bl	8000660 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174e:	f7fe ff87 	bl	8000660 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	f241 3288 	movw	r2, #5000	; 0x1388
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e0ab      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001764:	4b57      	ldr	r3, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ee      	beq.n	800174e <HAL_RCC_OscConfig+0x37e>
 8001770:	e014      	b.n	800179c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7fe ff75 	bl	8000660 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7fe ff71 	bl	8000660 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	; 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e095      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001790:	4b4c      	ldr	r3, [pc, #304]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1ee      	bne.n	800177a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d105      	bne.n	80017ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4b48      	ldr	r3, [pc, #288]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	4a47      	ldr	r2, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 8081 	beq.w	80018ba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d061      	beq.n	8001888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d146      	bne.n	800185a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017cc:	4b3f      	ldr	r3, [pc, #252]	; (80018cc <HAL_RCC_OscConfig+0x4fc>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7fe ff45 	bl	8000660 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7fe ff41 	bl	8000660 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e067      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ec:	4b35      	ldr	r3, [pc, #212]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1f0      	bne.n	80017da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d108      	bne.n	8001814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001802:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	492d      	ldr	r1, [pc, #180]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a19      	ldr	r1, [r3, #32]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	430b      	orrs	r3, r1
 8001826:	4927      	ldr	r1, [pc, #156]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_OscConfig+0x4fc>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7fe ff15 	bl	8000660 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183a:	f7fe ff11 	bl	8000660 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e037      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x46a>
 8001858:	e02f      	b.n	80018ba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HAL_RCC_OscConfig+0x4fc>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7fe fefe 	bl	8000660 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001868:	f7fe fefa 	bl	8000660 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e020      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x498>
 8001886:	e018      	b.n	80018ba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e013      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x4f4>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42420060 	.word	0x42420060

080018d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0d0      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d910      	bls.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f023 0207 	bic.w	r2, r3, #7
 80018fa:	4965      	ldr	r1, [pc, #404]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001902:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	683a      	ldr	r2, [r7, #0]
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0b8      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d020      	beq.n	8001962 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001936:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0308 	and.w	r3, r3, #8
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001950:	4b50      	ldr	r3, [pc, #320]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	494d      	ldr	r1, [pc, #308]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	d040      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e07f      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198e:	4b41      	ldr	r3, [pc, #260]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e073      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e06b      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019ae:	4b39      	ldr	r3, [pc, #228]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f023 0203 	bic.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4936      	ldr	r1, [pc, #216]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c0:	f7fe fe4e 	bl	8000660 <HAL_GetTick>
 80019c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c6:	e00a      	b.n	80019de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c8:	f7fe fe4a 	bl	8000660 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e053      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 020c 	and.w	r2, r3, #12
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d1eb      	bne.n	80019c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d210      	bcs.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f023 0207 	bic.w	r2, r3, #7
 8001a06:	4922      	ldr	r1, [pc, #136]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d001      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e032      	b.n	8001a86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4916      	ldr	r1, [pc, #88]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	490e      	ldr	r1, [pc, #56]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5e:	f000 f821 	bl	8001aa4 <HAL_RCC_GetSysClockFreq>
 8001a62:	4602      	mov	r2, r0
 8001a64:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	5ccb      	ldrb	r3, [r1, r3]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1cc>)
 8001a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd08 	bl	8000494 <HAL_InitTick>

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40022000 	.word	0x40022000
 8001a94:	40021000 	.word	0x40021000
 8001a98:	080022bc 	.word	0x080022bc
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20000004 	.word	0x20000004

08001aa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa4:	b490      	push	{r4, r7}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001aac:	1d3c      	adds	r4, r7, #4
 8001aae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab4:	f240 2301 	movw	r3, #513	; 0x201
 8001ab8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ace:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x46>
 8001ae2:	e02d      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae6:	623b      	str	r3, [r7, #32]
      break;
 8001ae8:	e02d      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	0c9b      	lsrs	r3, r3, #18
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af6:	4413      	add	r3, r2
 8001af8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001afc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	0c5b      	lsrs	r3, r3, #17
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b16:	4413      	add	r3, r2
 8001b18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b22:	fb02 f203 	mul.w	r2, r2, r3
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	e004      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	623b      	str	r3, [r7, #32]
      break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b42:	623b      	str	r3, [r7, #32]
      break;
 8001b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b46:	6a3b      	ldr	r3, [r7, #32]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc90      	pop	{r4, r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	080022ac 	.word	0x080022ac
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	007a1200 	.word	0x007a1200
 8001b60:	003d0900 	.word	0x003d0900

08001b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b68:	4b02      	ldr	r3, [pc, #8]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000000 	.word	0x20000000

08001b78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b7c:	f7ff fff2 	bl	8001b64 <HAL_RCC_GetHCLKFreq>
 8001b80:	4602      	mov	r2, r0
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	4903      	ldr	r1, [pc, #12]	; (8001b9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b8e:	5ccb      	ldrb	r3, [r1, r3]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	080022cc 	.word	0x080022cc

08001ba0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	220f      	movs	r2, #15
 8001bae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bb0:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <HAL_RCC_GetClockConfig+0x58>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_RCC_GetClockConfig+0x58>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_GetClockConfig+0x58>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_RCC_GetClockConfig+0x58>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_GetClockConfig+0x5c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0207 	and.w	r2, r3, #7
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40022000 	.word	0x40022000

08001c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <RCC_Delay+0x34>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <RCC_Delay+0x38>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a5b      	lsrs	r3, r3, #9
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c1c:	bf00      	nop
  }
  while (Delay --);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <RCC_Delay+0x1c>
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000000 	.word	0x20000000
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d07d      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10d      	bne.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c68:	4b4c      	ldr	r3, [pc, #304]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c72:	61d3      	str	r3, [r2, #28]
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c76:	69db      	ldr	r3, [r3, #28]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c84:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d118      	bne.n	8001cc2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a42      	ldr	r2, [pc, #264]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9c:	f7fe fce0 	bl	8000660 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca4:	f7fe fcdc 	bl	8000660 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e06d      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b3a      	ldr	r3, [pc, #232]	; (8001da0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d02e      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d027      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce0:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ce8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cf0:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cf6:	4a29      	ldr	r2, [pc, #164]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d014      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7fe fcab 	bl	8000660 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	e00a      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7fe fca7 	bl	8000660 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e036      	b.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ee      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d32:	6a1b      	ldr	r3, [r3, #32]
 8001d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	4917      	ldr	r1, [pc, #92]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a13      	ldr	r2, [pc, #76]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d52:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	490b      	ldr	r1, [pc, #44]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d008      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	4904      	ldr	r1, [pc, #16]	; (8001d9c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40007000 	.word	0x40007000
 8001da4:	42420440 	.word	0x42420440

08001da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e041      	b.n	8001e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d106      	bne.n	8001dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f839 	bl	8001e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3304      	adds	r3, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4610      	mov	r0, r2
 8001de8:	f000 f9b4 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b083      	sub	sp, #12
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d001      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e03a      	b.n	8001ee6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_TIM_Base_Start_IT+0x98>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00e      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x58>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9a:	d009      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x58>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_TIM_Base_Start_IT+0x58>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d111      	bne.n	8001ed4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d010      	beq.n	8001ee4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f042 0201 	orr.w	r2, r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed2:	e007      	b.n	8001ee4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40000800 	.word	0x40000800

08001efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d122      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d11b      	bne.n	8001f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0202 	mvn.w	r2, #2
 8001f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8ed 	bl	800211e <HAL_TIM_IC_CaptureCallback>
 8001f44:	e005      	b.n	8001f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8e0 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f8ef 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0204 	mvn.w	r2, #4
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2202      	movs	r2, #2
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8c3 	bl	800211e <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f8b6 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f8c5 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0208 	mvn.w	r2, #8
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f899 	bl	800211e <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f88c 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f89b 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0310 	and.w	r3, r3, #16
 800200a:	2b10      	cmp	r3, #16
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b10      	cmp	r3, #16
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2208      	movs	r2, #8
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f86f 	bl	800211e <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f862 	bl	800210c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f871 	bl	8002130 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0201 	mvn.w	r2, #1
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7fe f97c 	bl	8000378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208a:	2b80      	cmp	r3, #128	; 0x80
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002098:	2b80      	cmp	r3, #128	; 0x80
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f8bf 	bl	800222a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b6:	2b40      	cmp	r3, #64	; 0x40
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c4:	2b40      	cmp	r3, #64	; 0x40
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f835 	bl	8002142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d10e      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b20      	cmp	r3, #32
 80020f2:	d107      	bne.n	8002104 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0220 	mvn.w	r2, #32
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f88a 	bl	8002218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a29      	ldr	r2, [pc, #164]	; (800220c <TIM_Base_SetConfig+0xb8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00b      	beq.n	8002184 <TIM_Base_SetConfig+0x30>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d007      	beq.n	8002184 <TIM_Base_SetConfig+0x30>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a26      	ldr	r2, [pc, #152]	; (8002210 <TIM_Base_SetConfig+0xbc>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0x30>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a25      	ldr	r2, [pc, #148]	; (8002214 <TIM_Base_SetConfig+0xc0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1c      	ldr	r2, [pc, #112]	; (800220c <TIM_Base_SetConfig+0xb8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00b      	beq.n	80021b6 <TIM_Base_SetConfig+0x62>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a4:	d007      	beq.n	80021b6 <TIM_Base_SetConfig+0x62>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <TIM_Base_SetConfig+0xbc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d003      	beq.n	80021b6 <TIM_Base_SetConfig+0x62>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <TIM_Base_SetConfig+0xc0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d108      	bne.n	80021c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <TIM_Base_SetConfig+0xb8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d103      	bne.n	80021fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	691a      	ldr	r2, [r3, #16]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	615a      	str	r2, [r3, #20]
}
 8002202:	bf00      	nop
 8002204:	3714      	adds	r7, #20
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <__libc_init_array>:
 800223c:	b570      	push	{r4, r5, r6, lr}
 800223e:	2600      	movs	r6, #0
 8002240:	4d0c      	ldr	r5, [pc, #48]	; (8002274 <__libc_init_array+0x38>)
 8002242:	4c0d      	ldr	r4, [pc, #52]	; (8002278 <__libc_init_array+0x3c>)
 8002244:	1b64      	subs	r4, r4, r5
 8002246:	10a4      	asrs	r4, r4, #2
 8002248:	42a6      	cmp	r6, r4
 800224a:	d109      	bne.n	8002260 <__libc_init_array+0x24>
 800224c:	f000 f822 	bl	8002294 <_init>
 8002250:	2600      	movs	r6, #0
 8002252:	4d0a      	ldr	r5, [pc, #40]	; (800227c <__libc_init_array+0x40>)
 8002254:	4c0a      	ldr	r4, [pc, #40]	; (8002280 <__libc_init_array+0x44>)
 8002256:	1b64      	subs	r4, r4, r5
 8002258:	10a4      	asrs	r4, r4, #2
 800225a:	42a6      	cmp	r6, r4
 800225c:	d105      	bne.n	800226a <__libc_init_array+0x2e>
 800225e:	bd70      	pop	{r4, r5, r6, pc}
 8002260:	f855 3b04 	ldr.w	r3, [r5], #4
 8002264:	4798      	blx	r3
 8002266:	3601      	adds	r6, #1
 8002268:	e7ee      	b.n	8002248 <__libc_init_array+0xc>
 800226a:	f855 3b04 	ldr.w	r3, [r5], #4
 800226e:	4798      	blx	r3
 8002270:	3601      	adds	r6, #1
 8002272:	e7f2      	b.n	800225a <__libc_init_array+0x1e>
 8002274:	080022d4 	.word	0x080022d4
 8002278:	080022d4 	.word	0x080022d4
 800227c:	080022d4 	.word	0x080022d4
 8002280:	080022d8 	.word	0x080022d8

08002284 <memset>:
 8002284:	4603      	mov	r3, r0
 8002286:	4402      	add	r2, r0
 8002288:	4293      	cmp	r3, r2
 800228a:	d100      	bne.n	800228e <memset+0xa>
 800228c:	4770      	bx	lr
 800228e:	f803 1b01 	strb.w	r1, [r3], #1
 8002292:	e7f9      	b.n	8002288 <memset+0x4>

08002294 <_init>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	bf00      	nop
 8002298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800229a:	bc08      	pop	{r3}
 800229c:	469e      	mov	lr, r3
 800229e:	4770      	bx	lr

080022a0 <_fini>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr
