
GPIO_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a664  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800a770  0800a770  0001a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a798  0800a798  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a798  0800a798  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a798  0800a798  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a798  0800a798  0001a798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a79c  0800a79c  0001a79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000010  0800a7b0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  0800a7b0  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e5c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001747  00000000  00000000  00028e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  0002a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00016734  00000000  00000000  0002a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000967c  00000000  00000000  00040e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00083cfc  00000000  00000000  0004a518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ce214  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002838  00000000  00000000  000ce268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00000020  00000000  00000000  000d0aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a758 	.word	0x0800a758

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	0800a758 	.word	0x0800a758

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb0a 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8f4 	bl	8000344 <MX_GPIO_Init>
  MX_TIM1_Init();
 800015c:	f000 f84f 	bl	80001fe <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	4802      	ldr	r0, [pc, #8]	; (8000170 <main+0x24>)
 8000168:	f001 ff0f 	bl	8001f8a <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016c:	e7fe      	b.n	800016c <main+0x20>
 800016e:	bf00      	nop
 8000170:	40011000 	.word	0x40011000

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f00a fae0 	bl	800a748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000196:	2301      	movs	r3, #1
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800019a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800019e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001a0:	2300      	movs	r3, #0
 80001a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001a8:	2302      	movs	r3, #2
 80001aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001b8:	f107 0318 	add.w	r3, r7, #24
 80001bc:	4618      	mov	r0, r3
 80001be:	f001 fff9 	bl	80021b4 <HAL_RCC_OscConfig>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d001      	beq.n	80001cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001c8:	f000 f972 	bl	80004b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001cc:	230f      	movs	r3, #15
 80001ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d0:	2302      	movs	r3, #2
 80001d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80001d4:	2380      	movs	r3, #128	; 0x80
 80001d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80001d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80001dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001de:	2300      	movs	r3, #0
 80001e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e2:	1d3b      	adds	r3, r7, #4
 80001e4:	2102      	movs	r1, #2
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fa64 	bl	80026b4 <HAL_RCC_ClockConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80001f2:	f000 f95d 	bl	80004b0 <Error_Handler>
  }
}
 80001f6:	bf00      	nop
 80001f8:	3740      	adds	r7, #64	; 0x40
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}

080001fe <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b096      	sub	sp, #88	; 0x58
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000204:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000212:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800021c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
 8000224:	605a      	str	r2, [r3, #4]
 8000226:	609a      	str	r2, [r3, #8]
 8000228:	60da      	str	r2, [r3, #12]
 800022a:	611a      	str	r2, [r3, #16]
 800022c:	615a      	str	r2, [r3, #20]
 800022e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2220      	movs	r2, #32
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f00a fa86 	bl	800a748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800023c:	4b3f      	ldr	r3, [pc, #252]	; (800033c <MX_TIM1_Init+0x13e>)
 800023e:	4a40      	ldr	r2, [pc, #256]	; (8000340 <MX_TIM1_Init+0x142>)
 8000240:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 720;
 8000242:	4b3e      	ldr	r3, [pc, #248]	; (800033c <MX_TIM1_Init+0x13e>)
 8000244:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000248:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800024a:	4b3c      	ldr	r3, [pc, #240]	; (800033c <MX_TIM1_Init+0x13e>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000250:	4b3a      	ldr	r3, [pc, #232]	; (800033c <MX_TIM1_Init+0x13e>)
 8000252:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000256:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000258:	4b38      	ldr	r3, [pc, #224]	; (800033c <MX_TIM1_Init+0x13e>)
 800025a:	2200      	movs	r2, #0
 800025c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800025e:	4b37      	ldr	r3, [pc, #220]	; (800033c <MX_TIM1_Init+0x13e>)
 8000260:	2200      	movs	r2, #0
 8000262:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000264:	4b35      	ldr	r3, [pc, #212]	; (800033c <MX_TIM1_Init+0x13e>)
 8000266:	2200      	movs	r2, #0
 8000268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800026a:	4834      	ldr	r0, [pc, #208]	; (800033c <MX_TIM1_Init+0x13e>)
 800026c:	f002 fcd8 	bl	8002c20 <HAL_TIM_Base_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000276:	f000 f91b 	bl	80004b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800027a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000284:	4619      	mov	r1, r3
 8000286:	482d      	ldr	r0, [pc, #180]	; (800033c <MX_TIM1_Init+0x13e>)
 8000288:	f007 f838 	bl	80072fc <HAL_TIM_ConfigClockSource>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000292:	f000 f90d 	bl	80004b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000296:	4829      	ldr	r0, [pc, #164]	; (800033c <MX_TIM1_Init+0x13e>)
 8000298:	f003 fcc6 	bl	8003c28 <HAL_TIM_PWM_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80002a2:	f000 f905 	bl	80004b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002a6:	2300      	movs	r3, #0
 80002a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80002ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80002b2:	4619      	mov	r1, r3
 80002b4:	4821      	ldr	r0, [pc, #132]	; (800033c <MX_TIM1_Init+0x13e>)
 80002b6:	f00a f81f 	bl	800a2f8 <HAL_TIMEx_MasterConfigSynchronization>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80002c0:	f000 f8f6 	bl	80004b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002c4:	2360      	movs	r3, #96	; 0x60
 80002c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 80002c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002ce:	2300      	movs	r3, #0
 80002d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80002d2:	2300      	movs	r3, #0
 80002d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002d6:	2300      	movs	r3, #0
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80002da:	2300      	movs	r3, #0
 80002dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80002de:	2300      	movs	r3, #0
 80002e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002e6:	2200      	movs	r2, #0
 80002e8:	4619      	mov	r1, r3
 80002ea:	4814      	ldr	r0, [pc, #80]	; (800033c <MX_TIM1_Init+0x13e>)
 80002ec:	f006 f9ea 	bl	80066c4 <HAL_TIM_PWM_ConfigChannel>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80002f6:	f000 f8db 	bl	80004b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000306:	2300      	movs	r3, #0
 8000308:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800030a:	2300      	movs	r3, #0
 800030c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800030e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000312:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <MX_TIM1_Init+0x13e>)
 800031e:	f00a f849 	bl	800a3b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000328:	f000 f8c2 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <MX_TIM1_Init+0x13e>)
 800032e:	f000 f91d 	bl	800056c <HAL_TIM_MspPostInit>

}
 8000332:	bf00      	nop
 8000334:	3758      	adds	r7, #88	; 0x58
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000030 	.word	0x20000030
 8000340:	40012c00 	.word	0x40012c00

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000358:	4b2e      	ldr	r3, [pc, #184]	; (8000414 <MX_GPIO_Init+0xd0>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a2d      	ldr	r2, [pc, #180]	; (8000414 <MX_GPIO_Init+0xd0>)
 800035e:	f043 0310 	orr.w	r3, r3, #16
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <MX_GPIO_Init+0xd0>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0310 	and.w	r3, r3, #16
 800036c:	60fb      	str	r3, [r7, #12]
 800036e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000370:	4b28      	ldr	r3, [pc, #160]	; (8000414 <MX_GPIO_Init+0xd0>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	4a27      	ldr	r2, [pc, #156]	; (8000414 <MX_GPIO_Init+0xd0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6193      	str	r3, [r2, #24]
 800037c:	4b25      	ldr	r3, [pc, #148]	; (8000414 <MX_GPIO_Init+0xd0>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	f003 0320 	and.w	r3, r3, #32
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <MX_GPIO_Init+0xd0>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a21      	ldr	r2, [pc, #132]	; (8000414 <MX_GPIO_Init+0xd0>)
 800038e:	f043 0308 	orr.w	r3, r3, #8
 8000392:	6193      	str	r3, [r2, #24]
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <MX_GPIO_Init+0xd0>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	f003 0308 	and.w	r3, r3, #8
 800039c:	607b      	str	r3, [r7, #4]
 800039e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a0:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	4a1b      	ldr	r2, [pc, #108]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003a6:	f043 0304 	orr.w	r3, r3, #4
 80003aa:	6193      	str	r3, [r2, #24]
 80003ac:	4b19      	ldr	r3, [pc, #100]	; (8000414 <MX_GPIO_Init+0xd0>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	f003 0304 	and.w	r3, r3, #4
 80003b4:	603b      	str	r3, [r7, #0]
 80003b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003be:	4816      	ldr	r0, [pc, #88]	; (8000418 <MX_GPIO_Init+0xd4>)
 80003c0:	f001 fde3 	bl	8001f8a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2302      	movs	r3, #2
 80003d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80003d6:	f107 0310 	add.w	r3, r7, #16
 80003da:	4619      	mov	r1, r3
 80003dc:	480e      	ldr	r0, [pc, #56]	; (8000418 <MX_GPIO_Init+0xd4>)
 80003de:	f001 fb7d 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SWITCH_PIN_Pin */
  GPIO_InitStruct.Pin = SWITCH_PIN_Pin;
 80003e2:	2301      	movs	r3, #1
 80003e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_GPIO_Init+0xd8>)
 80003e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SWITCH_PIN_GPIO_Port, &GPIO_InitStruct);
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	4619      	mov	r1, r3
 80003f4:	480a      	ldr	r0, [pc, #40]	; (8000420 <MX_GPIO_Init+0xdc>)
 80003f6:	f001 fb71 	bl	8001adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2100      	movs	r1, #0
 80003fe:	2006      	movs	r0, #6
 8000400:	f000 fd31 	bl	8000e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000404:	2006      	movs	r0, #6
 8000406:	f000 fd4a 	bl	8000e9e <HAL_NVIC_EnableIRQ>

}
 800040a:	bf00      	nop
 800040c:	3720      	adds	r7, #32
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000
 8000418:	40011000 	.word	0x40011000
 800041c:	10310000 	.word	0x10310000
 8000420:	40010c00 	.word	0x40010c00

08000424 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(SWITCH_PIN_EXTI_IRQn);
 800042e:	2006      	movs	r0, #6
 8000430:	f000 fd43 	bl	8000eba <HAL_NVIC_DisableIRQ>
	if(SWITCH_PIN_Pin == GPIO_Pin){
 8000434:	88fb      	ldrh	r3, [r7, #6]
 8000436:	2b01      	cmp	r3, #1
 8000438:	d102      	bne.n	8000440 <HAL_GPIO_EXTI_Callback+0x1c>
	    HAL_TIM_Base_Start_IT(&htim1);
 800043a:	4803      	ldr	r0, [pc, #12]	; (8000448 <HAL_GPIO_EXTI_Callback+0x24>)
 800043c:	f002 fd16 	bl	8002e6c <HAL_TIM_Base_Start_IT>
	}
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000030 	.word	0x20000030

0800044c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	uint8_t current;
	current = HAL_GPIO_ReadPin(SWITCH_PIN_GPIO_Port, SWITCH_PIN_Pin);
 8000454:	2101      	movs	r1, #1
 8000456:	4812      	ldr	r0, [pc, #72]	; (80004a0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000458:	f001 fd80 	bl	8001f5c <HAL_GPIO_ReadPin>
 800045c:	4603      	mov	r3, r0
 800045e:	73fb      	strb	r3, [r7, #15]
	if((0 == current) && (1 == prevState)){
 8000460:	7bfb      	ldrb	r3, [r7, #15]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d10e      	bne.n	8000484 <HAL_TIM_PeriodElapsedCallback+0x38>
 8000466:	4b0f      	ldr	r3, [pc, #60]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d10a      	bne.n	8000484 <HAL_TIM_PeriodElapsedCallback+0x38>
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800046e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000472:	480d      	ldr	r0, [pc, #52]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000474:	f001 fda1 	bl	8001fba <HAL_GPIO_TogglePin>
		touchCount++;
 8000478:	4b0c      	ldr	r3, [pc, #48]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	3301      	adds	r3, #1
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b0a      	ldr	r3, [pc, #40]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000482:	701a      	strb	r2, [r3, #0]
	}
	prevState = current;
 8000484:	4a07      	ldr	r2, [pc, #28]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000486:	7bfb      	ldrb	r3, [r7, #15]
 8000488:	7013      	strb	r3, [r2, #0]
	HAL_TIM_Base_Stop_IT(htim);
 800048a:	6878      	ldr	r0, [r7, #4]
 800048c:	f002 fd40 	bl	8002f10 <HAL_TIM_Base_Stop_IT>
	HAL_NVIC_EnableIRQ(SWITCH_PIN_EXTI_IRQn);
 8000490:	2006      	movs	r0, #6
 8000492:	f000 fd04 	bl	8000e9e <HAL_NVIC_EnableIRQ>
}
 8000496:	bf00      	nop
 8000498:	3710      	adds	r7, #16
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40010c00 	.word	0x40010c00
 80004a4:	20000000 	.word	0x20000000
 80004a8:	40011000 	.word	0x40011000
 80004ac:	2000002c 	.word	0x2000002c

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
 80004ba:	bf00      	nop

080004bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <HAL_MspInit+0x5c>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <HAL_MspInit+0x5c>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <HAL_MspInit+0x5c>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b0f      	ldr	r3, [pc, #60]	; (8000518 <HAL_MspInit+0x5c>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <HAL_MspInit+0x5c>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <HAL_MspInit+0x5c>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_MspInit+0x60>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	4a04      	ldr	r2, [pc, #16]	; (800051c <HAL_MspInit+0x60>)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	bf00      	nop
 8000510:	3714      	adds	r7, #20
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000
 800051c:	40010000 	.word	0x40010000

08000520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <HAL_TIM_Base_MspInit+0x44>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d113      	bne.n	800055a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000532:	4b0d      	ldr	r3, [pc, #52]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a0c      	ldr	r2, [pc, #48]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000538:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_TIM_Base_MspInit+0x48>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2019      	movs	r0, #25
 8000550:	f000 fc89 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000554:	2019      	movs	r0, #25
 8000556:	f000 fca2 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40012c00 	.word	0x40012c00
 8000568:	40021000 	.word	0x40021000

0800056c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
 800057c:	605a      	str	r2, [r3, #4]
 800057e:	609a      	str	r2, [r3, #8]
 8000580:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a10      	ldr	r2, [pc, #64]	; (80005c8 <HAL_TIM_MspPostInit+0x5c>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d118      	bne.n	80005be <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_TIM_MspPostInit+0x60>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_TIM_MspPostInit+0x60>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_TIM_MspPostInit+0x60>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_OUT_PIN_Pin;
 80005a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005aa:	2302      	movs	r3, #2
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_OUT_PIN_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <HAL_TIM_MspPostInit+0x64>)
 80005ba:	f001 fa8f 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40012c00 	.word	0x40012c00
 80005cc:	40021000 	.word	0x40021000
 80005d0:	40010800 	.word	0x40010800

080005d4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_TIM_Base_MspDeInit+0x2c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_TIM_Base_MspDeInit+0x30>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a06      	ldr	r2, [pc, #24]	; (8000604 <HAL_TIM_Base_MspDeInit+0x30>)
 80005ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005f0:	6193      	str	r3, [r2, #24]

    /* TIM1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
 80005f2:	2019      	movs	r0, #25
 80005f4:	f000 fc61 	bl	8000eba <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM1_MspDeInit 1 */

  /* USER CODE END TIM1_MspDeInit 1 */
  }

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40012c00 	.word	0x40012c00
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800060c:	e7fe      	b.n	800060c <NMI_Handler+0x4>

0800060e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <HardFault_Handler+0x4>

08000614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <MemManage_Handler+0x4>

0800061a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800061e:	e7fe      	b.n	800061e <BusFault_Handler+0x4>

08000620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000624:	e7fe      	b.n	8000624 <UsageFault_Handler+0x4>

08000626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000626:	b480      	push	{r7}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr

08000632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000632:	b480      	push	{r7}
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr

0800063e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr

0800064a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064e:	f000 f8f5 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800065a:	2001      	movs	r0, #1
 800065c:	f001 fced 	bl	800203a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000668:	4802      	ldr	r0, [pc, #8]	; (8000674 <TIM1_UP_IRQHandler+0x10>)
 800066a:	f005 fe38 	bl	80062de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000030 	.word	0x20000030

08000678 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <SystemCoreClockUpdate+0xd0>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	f003 030c 	and.w	r3, r3, #12
 800069e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b08      	cmp	r3, #8
 80006a4:	d011      	beq.n	80006ca <SystemCoreClockUpdate+0x46>
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b08      	cmp	r3, #8
 80006aa:	d83a      	bhi.n	8000722 <SystemCoreClockUpdate+0x9e>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d003      	beq.n	80006ba <SystemCoreClockUpdate+0x36>
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2b04      	cmp	r3, #4
 80006b6:	d004      	beq.n	80006c2 <SystemCoreClockUpdate+0x3e>
 80006b8:	e033      	b.n	8000722 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80006ba:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 80006bc:	4a27      	ldr	r2, [pc, #156]	; (800075c <SystemCoreClockUpdate+0xd8>)
 80006be:	601a      	str	r2, [r3, #0]
      break;
 80006c0:	e033      	b.n	800072a <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80006c2:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 80006c4:	4a25      	ldr	r2, [pc, #148]	; (800075c <SystemCoreClockUpdate+0xd8>)
 80006c6:	601a      	str	r2, [r3, #0]
      break;
 80006c8:	e02f      	b.n	800072a <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemCoreClockUpdate+0xd0>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80006d2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemCoreClockUpdate+0xd0>)
 80006d6:	685b      	ldr	r3, [r3, #4]
 80006d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006dc:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	0c9b      	lsrs	r3, r3, #18
 80006e2:	3302      	adds	r3, #2
 80006e4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d106      	bne.n	80006fa <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <SystemCoreClockUpdate+0xdc>)
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	4a18      	ldr	r2, [pc, #96]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 80006f6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 80006f8:	e017      	b.n	800072a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <SystemCoreClockUpdate+0xd0>)
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	4a15      	ldr	r2, [pc, #84]	; (8000760 <SystemCoreClockUpdate+0xdc>)
 800070a:	fb02 f303 	mul.w	r3, r2, r3
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 8000710:	6013      	str	r3, [r2, #0]
      break;
 8000712:	e00a      	b.n	800072a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4a11      	ldr	r2, [pc, #68]	; (800075c <SystemCoreClockUpdate+0xd8>)
 8000718:	fb02 f303 	mul.w	r3, r2, r3
 800071c:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 800071e:	6013      	str	r3, [r2, #0]
      break;
 8000720:	e003      	b.n	800072a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 8000724:	4a0d      	ldr	r2, [pc, #52]	; (800075c <SystemCoreClockUpdate+0xd8>)
 8000726:	601a      	str	r2, [r3, #0]
      break;
 8000728:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <SystemCoreClockUpdate+0xd0>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	f003 030f 	and.w	r3, r3, #15
 8000734:	4a0b      	ldr	r2, [pc, #44]	; (8000764 <SystemCoreClockUpdate+0xe0>)
 8000736:	5cd3      	ldrb	r3, [r2, r3]
 8000738:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	fa22 f303 	lsr.w	r3, r2, r3
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <SystemCoreClockUpdate+0xd4>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000
 8000758:	20000004 	.word	0x20000004
 800075c:	007a1200 	.word	0x007a1200
 8000760:	003d0900 	.word	0x003d0900
 8000764:	0800a770 	.word	0x0800a770

08000768 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 fb69 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f82c 	bl	80007dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe9a 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_DeInit+0x2c>)
 800079a:	f04f 32ff 	mov.w	r2, #4294967295
 800079e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB1_RELEASE_RESET();
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <HAL_DeInit+0x2c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_DeInit+0x2c>)
 80007a8:	f04f 32ff 	mov.w	r2, #4294967295
 80007ac:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80007ae:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <HAL_DeInit+0x2c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80007b4:	f000 f80c 	bl	80007d0 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_InitTick+0x54>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x58>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fb6f 	bl	8000ede <HAL_SYSTICK_Config>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
 8000808:	e00e      	b.n	8000828 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b0f      	cmp	r3, #15
 800080e:	d80a      	bhi.n	8000826 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000810:	2200      	movs	r2, #0
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	f04f 30ff 	mov.w	r0, #4294967295
 8000818:	f000 fb25 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4a06      	ldr	r2, [pc, #24]	; (8000838 <HAL_InitTick+0x5c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000004 	.word	0x20000004
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000008 	.word	0x20000008

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	; (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	461a      	mov	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4413      	add	r3, r2
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <HAL_IncTick+0x20>)
 800084e:	6013      	str	r3, [r2, #0]
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr
 8000858:	2000000c 	.word	0x2000000c
 800085c:	20000078 	.word	0x20000078

08000860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	; (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	4618      	mov	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000078 	.word	0x20000078

08000874 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000878:	4b02      	ldr	r3, [pc, #8]	; (8000884 <HAL_GetTickPrio+0x10>)
 800087a:	681b      	ldr	r3, [r3, #0]
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	20000008 	.word	0x20000008

08000888 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	4603      	mov	r3, r0
 8000890:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000892:	2300      	movs	r3, #0
 8000894:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_SetTickFreq+0x48>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	429a      	cmp	r2, r3
 800089e:	d012      	beq.n	80008c6 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_SetTickFreq+0x48>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <HAL_SetTickFreq+0x48>)
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 80008ac:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_SetTickFreq+0x4c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff ff93 	bl	80007dc <HAL_InitTick>
 80008b6:	4603      	mov	r3, r0
 80008b8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d002      	beq.n	80008c6 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 80008c0:	4a03      	ldr	r2, [pc, #12]	; (80008d0 <HAL_SetTickFreq+0x48>)
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000000c 	.word	0x2000000c
 80008d4:	20000008 	.word	0x20000008

080008d8 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <HAL_GetTickFreq+0x10>)
 80008de:	781b      	ldrb	r3, [r3, #0]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	2000000c 	.word	0x2000000c

080008ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008f4:	f7ff ffb4 	bl	8000860 <HAL_GetTick>
 80008f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000904:	d005      	beq.n	8000912 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_Delay+0x44>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	4413      	add	r3, r2
 8000910:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000912:	bf00      	nop
 8000914:	f7ff ffa4 	bl	8000860 <HAL_GetTick>
 8000918:	4602      	mov	r2, r0
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1ad3      	subs	r3, r2, r3
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	429a      	cmp	r2, r3
 8000922:	d8f7      	bhi.n	8000914 <HAL_Delay+0x28>
  {
  }
}
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000000c 	.word	0x2000000c

08000934 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_SuspendTick+0x18>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a03      	ldr	r2, [pc, #12]	; (800094c <HAL_SuspendTick+0x18>)
 800093e:	f023 0302 	bic.w	r3, r3, #2
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	e000e010 	.word	0xe000e010

08000950 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <HAL_ResumeTick+0x18>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a03      	ldr	r2, [pc, #12]	; (8000968 <HAL_ResumeTick+0x18>)
 800095a:	f043 0302 	orr.w	r3, r3, #2
 800095e:	6013      	str	r3, [r2, #0]
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	e000e010 	.word	0xe000e010

0800096c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return __STM32F1xx_HAL_VERSION;
 8000970:	4b02      	ldr	r3, [pc, #8]	; (800097c <HAL_GetHalVersion+0x10>)
}
 8000972:	4618      	mov	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	01010700 	.word	0x01010700

08000980 <HAL_GetREVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetREVID+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	0c1b      	lsrs	r3, r3, #16
}
 800098a:	4618      	mov	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e0042000 	.word	0xe0042000

08000998 <HAL_GetDEVID>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetDEVID+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr
 80009ac:	e0042000 	.word	0xe0042000

080009b0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <HAL_GetUIDw0+0x10>)
 80009b6:	681b      	ldr	r3, [r3, #0]
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	1ffff7e8 	.word	0x1ffff7e8

080009c4 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80009c8:	4b02      	ldr	r3, [pc, #8]	; (80009d4 <HAL_GetUIDw1+0x10>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	1ffff7ec 	.word	0x1ffff7ec

080009d8 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <HAL_GetUIDw2+0x10>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	1ffff7f0 	.word	0x1ffff7f0

080009ec <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4a03      	ldr	r2, [pc, #12]	; (8000a04 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6053      	str	r3, [r2, #4]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	e0042000 	.word	0xe0042000

08000a08 <HAL_DBGMCU_DisableDBGSleepMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <HAL_DBGMCU_DisableDBGSleepMode+0x18>)
 8000a12:	f023 0301 	bic.w	r3, r3, #1
 8000a16:	6053      	str	r3, [r2, #4]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	e0042000 	.word	0xe0042000

08000a24 <HAL_DBGMCU_EnableDBGStopMode>:
  *       interrupt.
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000a2e:	f043 0302 	orr.w	r3, r3, #2
 8000a32:	6053      	str	r3, [r2, #4]
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	e0042000 	.word	0xe0042000

08000a40 <HAL_DBGMCU_DisableDBGStopMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000a4a:	f023 0302 	bic.w	r3, r3, #2
 8000a4e:	6053      	str	r3, [r2, #4]
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	e0042000 	.word	0xe0042000

08000a5c <HAL_DBGMCU_EnableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000a60:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4a03      	ldr	r2, [pc, #12]	; (8000a74 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6053      	str	r3, [r2, #4]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	e0042000 	.word	0xe0042000

08000a78 <HAL_DBGMCU_DisableDBGStandbyMode>:
  *       debug mode (not accessible by the user software in normal mode).
  *       Refer to errata sheet of these devices for more details.
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	4a03      	ldr	r2, [pc, #12]	; (8000a90 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000a82:	f023 0304 	bic.w	r3, r3, #4
 8000a86:	6053      	str	r3, [r2, #4]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr
 8000a90:	e0042000 	.word	0xe0042000

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <__NVIC_EnableIRQ+0x34>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100

08000b30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db12      	blt.n	8000b68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	490a      	ldr	r1, [pc, #40]	; (8000b74 <__NVIC_DisableIRQ+0x44>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	3320      	adds	r3, #32
 8000b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b5c:	f3bf 8f4f 	dsb	sy
}
 8000b60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b62:	f3bf 8f6f 	isb	sy
}
 8000b66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000e100 	.word	0xe000e100

08000b78 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db0e      	blt.n	8000ba8 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <__NVIC_GetPendingIRQ+0x3c>)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	095b      	lsrs	r3, r3, #5
 8000b92:	3340      	adds	r3, #64	; 0x40
 8000b94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	f003 031f 	and.w	r3, r3, #31
 8000b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	e000      	b.n	8000baa <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8000ba8:	2300      	movs	r3, #0
  }
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db0c      	blt.n	8000be4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	4907      	ldr	r1, [pc, #28]	; (8000bf0 <__NVIC_SetPendingIRQ+0x38>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	3340      	adds	r3, #64	; 0x40
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	db0c      	blt.n	8000c20 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	f003 021f 	and.w	r2, r3, #31
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <__NVIC_ClearPendingIRQ+0x38>)
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	095b      	lsrs	r3, r3, #5
 8000c14:	2001      	movs	r0, #1
 8000c16:	fa00 f202 	lsl.w	r2, r0, r2
 8000c1a:	3360      	adds	r3, #96	; 0x60
 8000c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0e      	blt.n	8000c60 <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8000c42:	4a0a      	ldr	r2, [pc, #40]	; (8000c6c <__NVIC_GetActive+0x3c>)
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	095b      	lsrs	r3, r3, #5
 8000c4a:	3380      	adds	r3, #128	; 0x80
 8000c4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f003 031f 	and.w	r3, r3, #31
 8000c56:	fa22 f303 	lsr.w	r3, r2, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	e000      	b.n	8000c62 <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 8000c60:	2300      	movs	r3, #0
  }
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	e000e100 	.word	0xe000e100

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db09      	blt.n	8000cea <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8000cd6:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <__NVIC_GetPriority+0x44>)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4413      	add	r3, r2
 8000cde:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	e009      	b.n	8000cfe <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <__NVIC_GetPriority+0x48>)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	f003 030f 	and.w	r3, r3, #15
 8000cf2:	3b04      	subs	r3, #4
 8000cf4:	4413      	add	r3, r2
 8000cf6:	7e1b      	ldrb	r3, [r3, #24]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	091b      	lsrs	r3, r3, #4
 8000cfc:	b2db      	uxtb	r3, r3
  }
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b089      	sub	sp, #36	; 0x24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	f1c3 0307 	rsb	r3, r3, #7
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	bf28      	it	cs
 8000d2e:	2304      	movcs	r3, #4
 8000d30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3304      	adds	r3, #4
 8000d36:	2b06      	cmp	r3, #6
 8000d38:	d902      	bls.n	8000d40 <NVIC_EncodePriority+0x30>
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3b03      	subs	r3, #3
 8000d3e:	e000      	b.n	8000d42 <NVIC_EncodePriority+0x32>
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	401a      	ands	r2, r3
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d58:	f04f 31ff 	mov.w	r1, #4294967295
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43d9      	mvns	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	4313      	orrs	r3, r2
         );
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3724      	adds	r7, #36	; 0x24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	; 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f1c3 0307 	rsb	r3, r3, #7
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	bf28      	it	cs
 8000d94:	2304      	movcs	r3, #4
 8000d96:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d902      	bls.n	8000da6 <NVIC_DecodePriority+0x32>
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3b03      	subs	r3, #3
 8000da4:	e000      	b.n	8000da8 <NVIC_DecodePriority+0x34>
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	40da      	lsrs	r2, r3
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	401a      	ands	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8000dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	601a      	str	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8000de4:	f3bf 8f4f 	dsb	sy
}
 8000de8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <__NVIC_SystemReset+0x24>)
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000df2:	4904      	ldr	r1, [pc, #16]	; (8000e04 <__NVIC_SystemReset+0x24>)
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_SystemReset+0x28>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000dfa:	f3bf 8f4f 	dsb	sy
}
 8000dfe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <__NVIC_SystemReset+0x20>
 8000e04:	e000ed00 	.word	0xe000ed00
 8000e08:	05fa0004 	.word	0x05fa0004

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff1e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fe1b 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff fe30 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff44 	bl	8000d10 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff feed 	bl	8000c70 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fe23 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fe31 	bl	8000b30 <__NVIC_DisableIRQ>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8000eda:	f7ff ff81 	bl	8000de0 <__NVIC_SystemReset>

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff90 	bl	8000e0c <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8000efa:	f7ff fdef 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000efe:	4603      	mov	r3, r0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority: Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority: Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t *pPreemptPriority, uint32_t *pSubPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fed3 	bl	8000cc4 <__NVIC_GetPriority>
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	f7ff ff26 	bl	8000d74 <NVIC_DecodePriority>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe3a 	bl	8000bb8 <__NVIC_SetPendingIRQ>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fe0c 	bl	8000b78 <__NVIC_GetPendingIRQ>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff fe3b 	bl	8000bf4 <__NVIC_ClearPendingIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Return 1 if active else 0 */
  return NVIC_GetActive(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe4b 	bl	8000c30 <__NVIC_GetActive>
 8000f9a:	4603      	mov	r3, r0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d106      	bne.n	8000fc0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fb8:	f043 0304 	orr.w	r3, r3, #4
 8000fbc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000fbe:	e005      	b.n	8000fcc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a04      	ldr	r2, [pc, #16]	; (8000fd8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	6013      	str	r3, [r2, #0]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000fe0:	f000 f802 	bl	8000fe8 <HAL_SYSTICK_Callback>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e043      	b.n	8001092 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_DMA_Init+0xa8>)
 8001012:	4413      	add	r3, r2
 8001014:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_DMA_Init+0xac>)
 8001016:	fba2 2303 	umull	r2, r3, r2, r3
 800101a:	091b      	lsrs	r3, r3, #4
 800101c:	009a      	lsls	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_DMA_Init+0xb0>)
 8001026:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2202      	movs	r2, #2
 800102c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800103e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001042:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800104c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3714      	adds	r7, #20
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	bffdfff8 	.word	0xbffdfff8
 80010a0:	cccccccd 	.word	0xcccccccd
 80010a4:	40020000 	.word	0x40020000

080010a8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d101      	bne.n	80010ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e046      	b.n	8001148 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0201 	bic.w	r2, r2, #1
 80010c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_DMA_DeInit+0xac>)
 80010f2:	4413      	add	r3, r2
 80010f4:	4a18      	ldr	r2, [pc, #96]	; (8001158 <HAL_DMA_DeInit+0xb0>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	091b      	lsrs	r3, r3, #4
 80010fc:	009a      	lsls	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_DMA_DeInit+0xb4>)
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	bffdfff8 	.word	0xbffdfff8
 8001158:	cccccccd 	.word	0xcccccccd
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_DMA_Start>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d101      	bne.n	8001180 <HAL_DMA_Start+0x20>
 800117c:	2302      	movs	r3, #2
 800117e:	e02d      	b.n	80011dc <HAL_DMA_Start+0x7c>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	2201      	movs	r2, #1
 8001184:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800118e:	2b01      	cmp	r3, #1
 8001190:	d11d      	bne.n	80011ce <HAL_DMA_Start+0x6e>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2202      	movs	r2, #2
 8001196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	639a      	str	r2, [r3, #56]	; 0x38
            
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0201 	bic.w	r2, r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 fc63 	bl	8001a82 <DMA_SetConfig>
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e005      	b.n	80011da <HAL_DMA_Start+0x7a>
  }
  else
  {
   /* Process Unlocked */
   __HAL_UNLOCK(hdma);  
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
   status = HAL_BUSY;
 80011d6:	2302      	movs	r3, #2
 80011d8:	75fb      	strb	r3, [r7, #23]
  }  
  return status;
 80011da:	7dfb      	ldrb	r3, [r7, #23]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d101      	bne.n	8001204 <HAL_DMA_Start_IT+0x20>
 8001200:	2302      	movs	r3, #2
 8001202:	e04a      	b.n	800129a <HAL_DMA_Start_IT+0xb6>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001212:	2b01      	cmp	r3, #1
 8001214:	d13a      	bne.n	800128c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2202      	movs	r2, #2
 800121a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 fc21 	bl	8001a82 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f042 020e 	orr.w	r2, r2, #14
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e00f      	b.n	800127a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0204 	bic.w	r2, r2, #4
 8001268:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f042 020a 	orr.w	r2, r2, #10
 8001278:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	e005      	b.n	8001298 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001294:	2302      	movs	r3, #2
 8001296:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001298:	7dfb      	ldrb	r3, [r7, #23]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b085      	sub	sp, #20
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d008      	beq.n	80012ca <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2204      	movs	r2, #4
 80012bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e020      	b.n	800130c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 020e 	bic.w	r2, r2, #14
 80012d8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0201 	bic.w	r2, r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012f2:	2101      	movs	r1, #1
 80012f4:	fa01 f202 	lsl.w	r2, r1, r2
 80012f8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001328:	2b02      	cmp	r3, #2
 800132a:	d005      	beq.n	8001338 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e051      	b.n	80013dc <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 020e 	bic.w	r2, r2, #14
 8001346:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <HAL_DMA_Abort_IT+0xd2>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d029      	beq.n	80013b6 <HAL_DMA_Abort_IT+0xa0>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <HAL_DMA_Abort_IT+0xd6>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d022      	beq.n	80013b2 <HAL_DMA_Abort_IT+0x9c>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1f      	ldr	r2, [pc, #124]	; (80013f0 <HAL_DMA_Abort_IT+0xda>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d01a      	beq.n	80013ac <HAL_DMA_Abort_IT+0x96>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1e      	ldr	r2, [pc, #120]	; (80013f4 <HAL_DMA_Abort_IT+0xde>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d012      	beq.n	80013a6 <HAL_DMA_Abort_IT+0x90>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a1c      	ldr	r2, [pc, #112]	; (80013f8 <HAL_DMA_Abort_IT+0xe2>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00a      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x8a>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_DMA_Abort_IT+0xe6>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d102      	bne.n	800139a <HAL_DMA_Abort_IT+0x84>
 8001394:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001398:	e00e      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 800139a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800139e:	e00b      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 80013a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a4:	e008      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 80013a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013aa:	e005      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 80013ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b0:	e002      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 80013b2:	2310      	movs	r3, #16
 80013b4:	e000      	b.n	80013b8 <HAL_DMA_Abort_IT+0xa2>
 80013b6:	2301      	movs	r3, #1
 80013b8:	4a11      	ldr	r2, [pc, #68]	; (8001400 <HAL_DMA_Abort_IT+0xea>)
 80013ba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	4798      	blx	r3
    } 
  }
  return status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40020008 	.word	0x40020008
 80013ec:	4002001c 	.word	0x4002001c
 80013f0:	40020030 	.word	0x40020030
 80013f4:	40020044 	.word	0x40020044
 80013f8:	40020058 	.word	0x40020058
 80013fc:	4002006c 	.word	0x4002006c
 8001400:	40020000 	.word	0x40020000

08001404 <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel: Specifies the DMA level complete.
  * @param  Timeout:       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800141a:	2b02      	cmp	r3, #2
 800141c:	d008      	beq.n	8001430 <HAL_DMA_PollForTransfer+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2204      	movs	r2, #4
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e168      	b.n	8001702 <HAL_DMA_PollForTransfer+0x2fe>
  }

  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001444:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e15b      	b.n	8001702 <HAL_DMA_PollForTransfer+0x2fe>
  }
  
  /* Get the level transfer complete flag */
  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d131      	bne.n	80014b4 <HAL_DMA_PollForTransfer+0xb0>
  {
    /* Transfer Complete flag */
    temp = __HAL_DMA_GET_TC_FLAG_INDEX(hdma);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a9d      	ldr	r2, [pc, #628]	; (80016cc <HAL_DMA_PollForTransfer+0x2c8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d029      	beq.n	80014ae <HAL_DMA_PollForTransfer+0xaa>
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a9c      	ldr	r2, [pc, #624]	; (80016d0 <HAL_DMA_PollForTransfer+0x2cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d022      	beq.n	80014aa <HAL_DMA_PollForTransfer+0xa6>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a9a      	ldr	r2, [pc, #616]	; (80016d4 <HAL_DMA_PollForTransfer+0x2d0>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01a      	beq.n	80014a4 <HAL_DMA_PollForTransfer+0xa0>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a99      	ldr	r2, [pc, #612]	; (80016d8 <HAL_DMA_PollForTransfer+0x2d4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d012      	beq.n	800149e <HAL_DMA_PollForTransfer+0x9a>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a97      	ldr	r2, [pc, #604]	; (80016dc <HAL_DMA_PollForTransfer+0x2d8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00a      	beq.n	8001498 <HAL_DMA_PollForTransfer+0x94>
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a96      	ldr	r2, [pc, #600]	; (80016e0 <HAL_DMA_PollForTransfer+0x2dc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d102      	bne.n	8001492 <HAL_DMA_PollForTransfer+0x8e>
 800148c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001490:	e00e      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 8001492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001496:	e00b      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 8001498:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800149c:	e008      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	e005      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 80014a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014a8:	e002      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 80014aa:	2320      	movs	r3, #32
 80014ac:	e000      	b.n	80014b0 <HAL_DMA_PollForTransfer+0xac>
 80014ae:	2302      	movs	r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e030      	b.n	8001516 <HAL_DMA_PollForTransfer+0x112>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = __HAL_DMA_GET_HT_FLAG_INDEX(hdma);
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a84      	ldr	r2, [pc, #528]	; (80016cc <HAL_DMA_PollForTransfer+0x2c8>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d029      	beq.n	8001512 <HAL_DMA_PollForTransfer+0x10e>
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a83      	ldr	r2, [pc, #524]	; (80016d0 <HAL_DMA_PollForTransfer+0x2cc>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d022      	beq.n	800150e <HAL_DMA_PollForTransfer+0x10a>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a81      	ldr	r2, [pc, #516]	; (80016d4 <HAL_DMA_PollForTransfer+0x2d0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d01a      	beq.n	8001508 <HAL_DMA_PollForTransfer+0x104>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a80      	ldr	r2, [pc, #512]	; (80016d8 <HAL_DMA_PollForTransfer+0x2d4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d012      	beq.n	8001502 <HAL_DMA_PollForTransfer+0xfe>
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a7e      	ldr	r2, [pc, #504]	; (80016dc <HAL_DMA_PollForTransfer+0x2d8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d00a      	beq.n	80014fc <HAL_DMA_PollForTransfer+0xf8>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a7d      	ldr	r2, [pc, #500]	; (80016e0 <HAL_DMA_PollForTransfer+0x2dc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d102      	bne.n	80014f6 <HAL_DMA_PollForTransfer+0xf2>
 80014f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f4:	e00e      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 80014f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014fa:	e00b      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 80014fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001500:	e008      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 8001502:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001506:	e005      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 8001508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800150c:	e002      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 800150e:	2340      	movs	r3, #64	; 0x40
 8001510:	e000      	b.n	8001514 <HAL_DMA_PollForTransfer+0x110>
 8001512:	2304      	movs	r3, #4
 8001514:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001516:	f7ff f9a3 	bl	8000860 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 800151c:	e06b      	b.n	80015f6 <HAL_DMA_PollForTransfer+0x1f2>
  {
    if((__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET))
 800151e:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <HAL_DMA_PollForTransfer+0x2e0>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4969      	ldr	r1, [pc, #420]	; (80016cc <HAL_DMA_PollForTransfer+0x2c8>)
 8001528:	428b      	cmp	r3, r1
 800152a:	d029      	beq.n	8001580 <HAL_DMA_PollForTransfer+0x17c>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4967      	ldr	r1, [pc, #412]	; (80016d0 <HAL_DMA_PollForTransfer+0x2cc>)
 8001532:	428b      	cmp	r3, r1
 8001534:	d022      	beq.n	800157c <HAL_DMA_PollForTransfer+0x178>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4966      	ldr	r1, [pc, #408]	; (80016d4 <HAL_DMA_PollForTransfer+0x2d0>)
 800153c:	428b      	cmp	r3, r1
 800153e:	d01a      	beq.n	8001576 <HAL_DMA_PollForTransfer+0x172>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4964      	ldr	r1, [pc, #400]	; (80016d8 <HAL_DMA_PollForTransfer+0x2d4>)
 8001546:	428b      	cmp	r3, r1
 8001548:	d012      	beq.n	8001570 <HAL_DMA_PollForTransfer+0x16c>
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4963      	ldr	r1, [pc, #396]	; (80016dc <HAL_DMA_PollForTransfer+0x2d8>)
 8001550:	428b      	cmp	r3, r1
 8001552:	d00a      	beq.n	800156a <HAL_DMA_PollForTransfer+0x166>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4961      	ldr	r1, [pc, #388]	; (80016e0 <HAL_DMA_PollForTransfer+0x2dc>)
 800155a:	428b      	cmp	r3, r1
 800155c:	d102      	bne.n	8001564 <HAL_DMA_PollForTransfer+0x160>
 800155e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001562:	e00e      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 8001564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001568:	e00b      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 800156a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800156e:	e008      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 8001570:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001574:	e005      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 8001576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800157a:	e002      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	e000      	b.n	8001582 <HAL_DMA_PollForTransfer+0x17e>
 8001580:	2308      	movs	r3, #8
 8001582:	4013      	ands	r3, r2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <HAL_DMA_PollForTransfer+0x1b4>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0a4      	b.n	8001702 <HAL_DMA_PollForTransfer+0x2fe>
    }
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015be:	d01a      	beq.n	80015f6 <HAL_DMA_PollForTransfer+0x1f2>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_DMA_PollForTransfer+0x1d2>
 80015c6:	f7ff f94b 	bl	8000860 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d20f      	bcs.n	80015f6 <HAL_DMA_PollForTransfer+0x1f2>
      {
        /* Update error code */
        SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	f043 0220 	orr.w	r2, r3, #32
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e085      	b.n	8001702 <HAL_DMA_PollForTransfer+0x2fe>
  while(__HAL_DMA_GET_FLAG(hdma, temp) == RESET)
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_DMA_PollForTransfer+0x2e0>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4013      	ands	r3, r2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d08d      	beq.n	800151e <HAL_DMA_PollForTransfer+0x11a>
      }
    }
  }

  if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d136      	bne.n	8001676 <HAL_DMA_PollForTransfer+0x272>
  {
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <HAL_DMA_PollForTransfer+0x2c8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d029      	beq.n	8001666 <HAL_DMA_PollForTransfer+0x262>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a2e      	ldr	r2, [pc, #184]	; (80016d0 <HAL_DMA_PollForTransfer+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d022      	beq.n	8001662 <HAL_DMA_PollForTransfer+0x25e>
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_DMA_PollForTransfer+0x2d0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01a      	beq.n	800165c <HAL_DMA_PollForTransfer+0x258>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <HAL_DMA_PollForTransfer+0x2d4>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d012      	beq.n	8001656 <HAL_DMA_PollForTransfer+0x252>
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_DMA_PollForTransfer+0x2d8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00a      	beq.n	8001650 <HAL_DMA_PollForTransfer+0x24c>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a28      	ldr	r2, [pc, #160]	; (80016e0 <HAL_DMA_PollForTransfer+0x2dc>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d102      	bne.n	800164a <HAL_DMA_PollForTransfer+0x246>
 8001644:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001648:	e00e      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 800164a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800164e:	e00b      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 8001650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001654:	e008      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 8001656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800165a:	e005      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 800165c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001660:	e002      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 8001662:	2320      	movs	r3, #32
 8001664:	e000      	b.n	8001668 <HAL_DMA_PollForTransfer+0x264>
 8001666:	2302      	movs	r3, #2
 8001668:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_DMA_PollForTransfer+0x2e0>)
 800166a:	6053      	str	r3, [r2, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001674:	e040      	b.n	80016f8 <HAL_DMA_PollForTransfer+0x2f4>
  }
  else
  {
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_DMA_PollForTransfer+0x2c8>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d038      	beq.n	80016f2 <HAL_DMA_PollForTransfer+0x2ee>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_DMA_PollForTransfer+0x2cc>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d031      	beq.n	80016ee <HAL_DMA_PollForTransfer+0x2ea>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_DMA_PollForTransfer+0x2d0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d029      	beq.n	80016e8 <HAL_DMA_PollForTransfer+0x2e4>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_DMA_PollForTransfer+0x2d4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d012      	beq.n	80016c4 <HAL_DMA_PollForTransfer+0x2c0>
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <HAL_DMA_PollForTransfer+0x2d8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00a      	beq.n	80016be <HAL_DMA_PollForTransfer+0x2ba>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_DMA_PollForTransfer+0x2dc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d102      	bne.n	80016b8 <HAL_DMA_PollForTransfer+0x2b4>
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	e01d      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016bc:	e01a      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80016c2:	e017      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016c8:	e014      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016ca:	bf00      	nop
 80016cc:	40020008 	.word	0x40020008
 80016d0:	4002001c 	.word	0x4002001c
 80016d4:	40020030 	.word	0x40020030
 80016d8:	40020044 	.word	0x40020044
 80016dc:	40020058 	.word	0x40020058
 80016e0:	4002006c 	.word	0x4002006c
 80016e4:	40020000 	.word	0x40020000
 80016e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ec:	e002      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016ee:	2340      	movs	r3, #64	; 0x40
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_PollForTransfer+0x2f0>
 80016f2:	2304      	movs	r3, #4
 80016f4:	4a05      	ldr	r2, [pc, #20]	; (800170c <HAL_DMA_PollForTransfer+0x308>)
 80016f6:	6053      	str	r3, [r2, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40020000 	.word	0x40020000

08001710 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2204      	movs	r2, #4
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d04f      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xc8>
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	d04a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b00      	cmp	r3, #0
 800174e:	d107      	bne.n	8001760 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f022 0204 	bic.w	r2, r2, #4
 800175e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a66      	ldr	r2, [pc, #408]	; (8001900 <HAL_DMA_IRQHandler+0x1f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d029      	beq.n	80017be <HAL_DMA_IRQHandler+0xae>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a65      	ldr	r2, [pc, #404]	; (8001904 <HAL_DMA_IRQHandler+0x1f4>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d022      	beq.n	80017ba <HAL_DMA_IRQHandler+0xaa>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a63      	ldr	r2, [pc, #396]	; (8001908 <HAL_DMA_IRQHandler+0x1f8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0xa4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a62      	ldr	r2, [pc, #392]	; (800190c <HAL_DMA_IRQHandler+0x1fc>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d012      	beq.n	80017ae <HAL_DMA_IRQHandler+0x9e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a60      	ldr	r2, [pc, #384]	; (8001910 <HAL_DMA_IRQHandler+0x200>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00a      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x98>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_DMA_IRQHandler+0x204>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <HAL_DMA_IRQHandler+0x92>
 800179c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a0:	e00e      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017a6:	e00b      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80017ac:	e008      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017b2:	e005      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b8:	e002      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	e000      	b.n	80017c0 <HAL_DMA_IRQHandler+0xb0>
 80017be:	2304      	movs	r3, #4
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_DMA_IRQHandler+0x208>)
 80017c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8094 	beq.w	80018f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80017d6:	e08e      	b.n	80018f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	2202      	movs	r2, #2
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d056      	beq.n	8001896 <HAL_DMA_IRQHandler+0x186>
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d051      	beq.n	8001896 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d10b      	bne.n	8001818 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f022 020a 	bic.w	r2, r2, #10
 800180e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a38      	ldr	r2, [pc, #224]	; (8001900 <HAL_DMA_IRQHandler+0x1f0>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d029      	beq.n	8001876 <HAL_DMA_IRQHandler+0x166>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a37      	ldr	r2, [pc, #220]	; (8001904 <HAL_DMA_IRQHandler+0x1f4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d022      	beq.n	8001872 <HAL_DMA_IRQHandler+0x162>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a35      	ldr	r2, [pc, #212]	; (8001908 <HAL_DMA_IRQHandler+0x1f8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01a      	beq.n	800186c <HAL_DMA_IRQHandler+0x15c>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a34      	ldr	r2, [pc, #208]	; (800190c <HAL_DMA_IRQHandler+0x1fc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d012      	beq.n	8001866 <HAL_DMA_IRQHandler+0x156>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a32      	ldr	r2, [pc, #200]	; (8001910 <HAL_DMA_IRQHandler+0x200>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d00a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x150>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a31      	ldr	r2, [pc, #196]	; (8001914 <HAL_DMA_IRQHandler+0x204>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <HAL_DMA_IRQHandler+0x14a>
 8001854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001858:	e00e      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 800185a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185e:	e00b      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 8001860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001864:	e008      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 8001866:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800186a:	e005      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 800186c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001870:	e002      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 8001872:	2320      	movs	r3, #32
 8001874:	e000      	b.n	8001878 <HAL_DMA_IRQHandler+0x168>
 8001876:	2302      	movs	r3, #2
 8001878:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_DMA_IRQHandler+0x208>)
 800187a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001888:	2b00      	cmp	r3, #0
 800188a:	d034      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001894:	e02f      	b.n	80018f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2208      	movs	r2, #8
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d028      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x1e8>
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d023      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 020e 	bic.w	r2, r2, #14
 80018be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	4798      	blx	r3
    }
  }
  return;
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
}
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40020008 	.word	0x40020008
 8001904:	4002001c 	.word	0x4002001c
 8001908:	40020030 	.word	0x40020030
 800190c:	40020044 	.word	0x40020044
 8001910:	40020058 	.word	0x40020058
 8001914:	4002006c 	.word	0x4002006c
 8001918:	40020000 	.word	0x40020000

0800191c <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	460b      	mov	r3, r1
 8001926:	607a      	str	r2, [r7, #4]
 8001928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_DMA_RegisterCallback+0x20>
 8001938:	2302      	movs	r3, #2
 800193a:	e031      	b.n	80019a0 <HAL_DMA_RegisterCallback+0x84>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800194a:	2b01      	cmp	r3, #1
 800194c:	d121      	bne.n	8001992 <HAL_DMA_RegisterCallback+0x76>
  {
    switch (CallbackID)
 800194e:	7afb      	ldrb	r3, [r7, #11]
 8001950:	2b03      	cmp	r3, #3
 8001952:	d81b      	bhi.n	800198c <HAL_DMA_RegisterCallback+0x70>
 8001954:	a201      	add	r2, pc, #4	; (adr r2, 800195c <HAL_DMA_RegisterCallback+0x40>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800196d 	.word	0x0800196d
 8001960:	08001975 	.word	0x08001975
 8001964:	0800197d 	.word	0x0800197d
 8001968:	08001985 	.word	0x08001985
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001972:	e010      	b.n	8001996 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 800197a:	e00c      	b.n	8001996 <HAL_DMA_RegisterCallback+0x7a>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8001982:	e008      	b.n	8001996 <HAL_DMA_RegisterCallback+0x7a>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 800198a:	e004      	b.n	8001996 <HAL_DMA_RegisterCallback+0x7a>
      
    default:
      status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8001990:	e001      	b.n	8001996 <HAL_DMA_RegisterCallback+0x7a>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 800199e:	7dfb      	ldrb	r3, [r7, #23]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	371c      	adds	r7, #28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr

080019aa <HAL_DMA_UnRegisterCallback>:
  * @param CallbackID: User Callback identifer
  *                    a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b085      	sub	sp, #20
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d101      	bne.n	80019c8 <HAL_DMA_UnRegisterCallback+0x1e>
 80019c4:	2302      	movs	r3, #2
 80019c6:	e040      	b.n	8001a4a <HAL_DMA_UnRegisterCallback+0xa0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d130      	bne.n	8001a3c <HAL_DMA_UnRegisterCallback+0x92>
  {
    switch (CallbackID)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d82a      	bhi.n	8001a36 <HAL_DMA_UnRegisterCallback+0x8c>
 80019e0:	a201      	add	r2, pc, #4	; (adr r2, 80019e8 <HAL_DMA_UnRegisterCallback+0x3e>)
 80019e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e6:	bf00      	nop
 80019e8:	080019fd 	.word	0x080019fd
 80019ec:	08001a05 	.word	0x08001a05
 80019f0:	08001a0d 	.word	0x08001a0d
 80019f4:	08001a15 	.word	0x08001a15
 80019f8:	08001a1d 	.word	0x08001a1d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = NULL;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8001a02:	e01d      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = NULL;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8001a0a:	e019      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8001a12:	e015      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = NULL;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8001a1a:	e011      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>

    case   HAL_DMA_XFER_ALL_CB_ID:
      hdma->XferCpltCallback = NULL;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
      hdma->XferHalfCpltCallback = NULL;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
      hdma->XferErrorCallback = NULL;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hdma->XferAbortCallback = NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8001a34:	e004      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>

    default:
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3a:	e001      	b.n	8001a40 <HAL_DMA_UnRegisterCallback+0x96>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a98:	2101      	movs	r1, #1
 8001a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2b10      	cmp	r3, #16
 8001aae:	d108      	bne.n	8001ac2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ac0:	e007      	b.n	8001ad2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]
}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b08b      	sub	sp, #44	; 0x2c
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aee:	e169      	b.n	8001dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001af0:	2201      	movs	r2, #1
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	f040 8158 	bne.w	8001dbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a9a      	ldr	r2, [pc, #616]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d05e      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b18:	4a98      	ldr	r2, [pc, #608]	; (8001d7c <HAL_GPIO_Init+0x2a0>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d875      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b1e:	4a98      	ldr	r2, [pc, #608]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d058      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b24:	4a96      	ldr	r2, [pc, #600]	; (8001d80 <HAL_GPIO_Init+0x2a4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d86f      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b2a:	4a96      	ldr	r2, [pc, #600]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d052      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b30:	4a94      	ldr	r2, [pc, #592]	; (8001d84 <HAL_GPIO_Init+0x2a8>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d869      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b36:	4a94      	ldr	r2, [pc, #592]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d04c      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b3c:	4a92      	ldr	r2, [pc, #584]	; (8001d88 <HAL_GPIO_Init+0x2ac>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d863      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b42:	4a92      	ldr	r2, [pc, #584]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d046      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
 8001b48:	4a90      	ldr	r2, [pc, #576]	; (8001d8c <HAL_GPIO_Init+0x2b0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d85d      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d82a      	bhi.n	8001ba8 <HAL_GPIO_Init+0xcc>
 8001b52:	2b12      	cmp	r3, #18
 8001b54:	d859      	bhi.n	8001c0a <HAL_GPIO_Init+0x12e>
 8001b56:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <HAL_GPIO_Init+0x80>)
 8001b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5c:	08001bd7 	.word	0x08001bd7
 8001b60:	08001bb1 	.word	0x08001bb1
 8001b64:	08001bc3 	.word	0x08001bc3
 8001b68:	08001c05 	.word	0x08001c05
 8001b6c:	08001c0b 	.word	0x08001c0b
 8001b70:	08001c0b 	.word	0x08001c0b
 8001b74:	08001c0b 	.word	0x08001c0b
 8001b78:	08001c0b 	.word	0x08001c0b
 8001b7c:	08001c0b 	.word	0x08001c0b
 8001b80:	08001c0b 	.word	0x08001c0b
 8001b84:	08001c0b 	.word	0x08001c0b
 8001b88:	08001c0b 	.word	0x08001c0b
 8001b8c:	08001c0b 	.word	0x08001c0b
 8001b90:	08001c0b 	.word	0x08001c0b
 8001b94:	08001c0b 	.word	0x08001c0b
 8001b98:	08001c0b 	.word	0x08001c0b
 8001b9c:	08001c0b 	.word	0x08001c0b
 8001ba0:	08001bb9 	.word	0x08001bb9
 8001ba4:	08001bcd 	.word	0x08001bcd
 8001ba8:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <HAL_GPIO_Init+0x2b4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d013      	beq.n	8001bd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bae:	e02c      	b.n	8001c0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e029      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	3304      	adds	r3, #4
 8001bbe:	623b      	str	r3, [r7, #32]
          break;
 8001bc0:	e024      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	623b      	str	r3, [r7, #32]
          break;
 8001bca:	e01f      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	330c      	adds	r3, #12
 8001bd2:	623b      	str	r3, [r7, #32]
          break;
 8001bd4:	e01a      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d102      	bne.n	8001be4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bde:	2304      	movs	r3, #4
 8001be0:	623b      	str	r3, [r7, #32]
          break;
 8001be2:	e013      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d105      	bne.n	8001bf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	611a      	str	r2, [r3, #16]
          break;
 8001bf6:	e009      	b.n	8001c0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	615a      	str	r2, [r3, #20]
          break;
 8001c02:	e003      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c04:	2300      	movs	r3, #0
 8001c06:	623b      	str	r3, [r7, #32]
          break;
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x130>
          break;
 8001c0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d801      	bhi.n	8001c16 <HAL_GPIO_Init+0x13a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_Init+0x13e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3304      	adds	r3, #4
 8001c1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d802      	bhi.n	8001c28 <HAL_GPIO_Init+0x14c>
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x152>
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	3b08      	subs	r3, #8
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	210f      	movs	r1, #15
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	401a      	ands	r2, r3
 8001c40:	6a39      	ldr	r1, [r7, #32]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	fa01 f303 	lsl.w	r3, r1, r3
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 80b1 	beq.w	8001dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5c:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a4c      	ldr	r2, [pc, #304]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c62:	f043 0301 	orr.w	r3, r3, #1
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c74:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c84:	f003 0303 	and.w	r3, r3, #3
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	220f      	movs	r2, #15
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a40      	ldr	r2, [pc, #256]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d013      	beq.n	8001cc8 <HAL_GPIO_Init+0x1ec>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a3f      	ldr	r2, [pc, #252]	; (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00d      	beq.n	8001cc4 <HAL_GPIO_Init+0x1e8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3e      	ldr	r2, [pc, #248]	; (8001da4 <HAL_GPIO_Init+0x2c8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3d      	ldr	r2, [pc, #244]	; (8001da8 <HAL_GPIO_Init+0x2cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d101      	bne.n	8001cbc <HAL_GPIO_Init+0x1e0>
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e006      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	e004      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e000      	b.n	8001cca <HAL_GPIO_Init+0x1ee>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ccc:	f002 0203 	and.w	r2, r2, #3
 8001cd0:	0092      	lsls	r2, r2, #2
 8001cd2:	4093      	lsls	r3, r2
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cda:	492f      	ldr	r1, [pc, #188]	; (8001d98 <HAL_GPIO_Init+0x2bc>)
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf4:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	492c      	ldr	r1, [pc, #176]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4928      	ldr	r1, [pc, #160]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b23      	ldr	r3, [pc, #140]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4922      	ldr	r1, [pc, #136]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	491e      	ldr	r1, [pc, #120]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d44:	4b19      	ldr	r3, [pc, #100]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	4918      	ldr	r1, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d52:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4914      	ldr	r1, [pc, #80]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d021      	beq.n	8001db0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d6c:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	490e      	ldr	r1, [pc, #56]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
 8001d78:	e021      	b.n	8001dbe <HAL_GPIO_Init+0x2e2>
 8001d7a:	bf00      	nop
 8001d7c:	10320000 	.word	0x10320000
 8001d80:	10310000 	.word	0x10310000
 8001d84:	10220000 	.word	0x10220000
 8001d88:	10210000 	.word	0x10210000
 8001d8c:	10120000 	.word	0x10120000
 8001d90:	10110000 	.word	0x10110000
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010000 	.word	0x40010000
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	40011000 	.word	0x40011000
 8001da8:	40011400 	.word	0x40011400
 8001dac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_GPIO_Init+0x304>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <HAL_GPIO_Init+0x304>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	fa22 f303 	lsr.w	r3, r2, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f47f ae8e 	bne.w	8001af0 <HAL_GPIO_Init+0x14>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	372c      	adds	r7, #44	; 0x2c
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40010400 	.word	0x40010400

08001de4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001df2:	e09a      	b.n	8001f2a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f000 808d 	beq.w	8001f24 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8001e0a:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_GPIO_DeInit+0x160>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	697a      	ldr	r2, [r7, #20]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a46      	ldr	r2, [pc, #280]	; (8001f48 <HAL_GPIO_DeInit+0x164>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d013      	beq.n	8001e5c <HAL_GPIO_DeInit+0x78>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a45      	ldr	r2, [pc, #276]	; (8001f4c <HAL_GPIO_DeInit+0x168>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d00d      	beq.n	8001e58 <HAL_GPIO_DeInit+0x74>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a44      	ldr	r2, [pc, #272]	; (8001f50 <HAL_GPIO_DeInit+0x16c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d007      	beq.n	8001e54 <HAL_GPIO_DeInit+0x70>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <HAL_GPIO_DeInit+0x170>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d101      	bne.n	8001e50 <HAL_GPIO_DeInit+0x6c>
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e006      	b.n	8001e5e <HAL_GPIO_DeInit+0x7a>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e004      	b.n	8001e5e <HAL_GPIO_DeInit+0x7a>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e002      	b.n	8001e5e <HAL_GPIO_DeInit+0x7a>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_GPIO_DeInit+0x7a>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	f002 0203 	and.w	r2, r2, #3
 8001e64:	0092      	lsls	r2, r2, #2
 8001e66:	4093      	lsls	r3, r2
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d132      	bne.n	8001ed4 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	220f      	movs	r2, #15
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8001e7e:	4a31      	ldr	r2, [pc, #196]	; (8001f44 <HAL_GPIO_DeInit+0x160>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	43da      	mvns	r2, r3
 8001e8e:	482d      	ldr	r0, [pc, #180]	; (8001f44 <HAL_GPIO_DeInit+0x160>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	400a      	ands	r2, r1
 8001e96:	3302      	adds	r3, #2
 8001e98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001e9c:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	492c      	ldr	r1, [pc, #176]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001eaa:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4929      	ldr	r1, [pc, #164]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001eb8:	4b27      	ldr	r3, [pc, #156]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4925      	ldr	r1, [pc, #148]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8001ec6:	4b24      	ldr	r3, [pc, #144]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	4922      	ldr	r1, [pc, #136]	; (8001f58 <HAL_GPIO_DeInit+0x174>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2bff      	cmp	r3, #255	; 0xff
 8001ed8:	d801      	bhi.n	8001ede <HAL_GPIO_DeInit+0xfa>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e001      	b.n	8001ee2 <HAL_GPIO_DeInit+0xfe>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2bff      	cmp	r3, #255	; 0xff
 8001ee8:	d802      	bhi.n	8001ef0 <HAL_GPIO_DeInit+0x10c>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_DeInit+0x112>
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3b08      	subs	r3, #8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	210f      	movs	r1, #15
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	401a      	ands	r2, r3
 8001f08:	2104      	movs	r1, #4
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f10:	431a      	orrs	r2, r3
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	3301      	adds	r3, #1
 8001f28:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f47f af5e 	bne.w	8001df4 <HAL_GPIO_DeInit+0x10>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	3724      	adds	r7, #36	; 0x24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	40010000 	.word	0x40010000
 8001f48:	40010800 	.word	0x40010800
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000
 8001f54:	40011400 	.word	0x40011400
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	887b      	ldrh	r3, [r7, #2]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	e001      	b.n	8001f7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr

08001f8a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]
 8001f96:	4613      	mov	r3, r2
 8001f98:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f9a:	787b      	ldrb	r3, [r7, #1]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fa0:	887a      	ldrh	r2, [r7, #2]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa6:	e003      	b.n	8001fb0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa8:	887b      	ldrh	r3, [r7, #2]
 8001faa:	041a      	lsls	r2, r3, #16
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	611a      	str	r2, [r3, #16]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b085      	sub	sp, #20
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fcc:	887a      	ldrh	r2, [r7, #2]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	041a      	lsls	r2, r3, #16
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43d9      	mvns	r1, r3
 8001fd8:	887b      	ldrh	r3, [r7, #2]
 8001fda:	400b      	ands	r3, r1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	611a      	str	r2, [r3, #16]
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <HAL_GPIO_LockPin>:
* @param  GPIO_Pin: specifies the port bit to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ffc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 8001ffe:	887a      	ldrh	r2, [r7, #2]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 800200c:	887a      	ldrh	r2, [r7, #2]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	619a      	str	r2, [r3, #24]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
  if ((uint32_t)(GPIOx->LCKR & GPIO_LCKR_LCKK))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
  }
}
 8002030:	4618      	mov	r0, r3
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr

0800203a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	88fb      	ldrh	r3, [r7, #6]
 800204a:	4013      	ands	r3, r2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002050:	4a05      	ldr	r2, [pc, #20]	; (8002068 <HAL_GPIO_EXTI_IRQHandler+0x2e>)
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe f9e3 	bl	8000424 <HAL_GPIO_EXTI_Callback>
  }
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40010400 	.word	0x40010400
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002086:	f7fe fbeb 	bl	8000860 <HAL_GetTick>
 800208a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800208c:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a44      	ldr	r2, [pc, #272]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fbe1 	bl	8000860 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e077      	b.n	800219c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80020ac:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020c0:	4a38      	ldr	r2, [pc, #224]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 80020c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80020c8:	f7fe fbca 	bl	8000860 <HAL_GetTick>
 80020cc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80020ce:	4b35      	ldr	r3, [pc, #212]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d6:	f7fe fbc3 	bl	8000860 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e057      	b.n	800219c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80020f8:	4b2b      	ldr	r3, [pc, #172]	; (80021a8 <HAL_RCC_DeInit+0x128>)
 80020fa:	4a2c      	ldr	r2, [pc, #176]	; (80021ac <HAL_RCC_DeInit+0x12c>)
 80020fc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_RCC_DeInit+0x130>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7fe fb6a 	bl	80007dc <HAL_InitTick>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e044      	b.n	800219c <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002112:	f7fe fba5 	bl	8000860 <HAL_GetTick>
 8002116:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800211e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fb9b 	bl	8000860 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e031      	b.n	800219c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8002144:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800214a:	f7fe fb89 	bl	8000860 <HAL_GetTick>
 800214e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a13      	ldr	r2, [pc, #76]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002156:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800215a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800215c:	e008      	b.n	8002170 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800215e:	f7fe fb7f 	bl	8000860 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b64      	cmp	r3, #100	; 0x64
 800216a:	d901      	bls.n	8002170 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e015      	b.n	800219c <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_DeInit+0x124>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	20000004 	.word	0x20000004
 80021ac:	007a1200 	.word	0x007a1200
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e26c      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d00c      	beq.n	80021fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
 80021ec:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b89      	ldr	r3, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x12c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d168      	bne.n	80022e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e246      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x76>
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x98>
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xbc>
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a71      	ldr	r2, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fae6 	bl	8000860 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7fe fae2 	bl	8000860 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1fa      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe4>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7fe fad2 	bl	8000860 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7fe face 	bl	8000860 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1e6      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x10c>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1ba      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4939      	ldr	r1, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fa87 	bl	8000860 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7fe fa83 	bl	8000860 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e19b      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fa66 	bl	8000860 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7fe fa62 	bl	8000860 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e17a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03a      	beq.n	8002438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7fe fa46 	bl	8000860 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7fe fa42 	bl	8000860 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e15a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 fbee 	bl	8002bd8 <RCC_Delay>
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7fe fa2c 	bl	8000860 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7fe fa28 	bl	8000860 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d908      	bls.n	800242c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e140      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	42420000 	.word	0x42420000
 8002428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b9e      	ldr	r3, [pc, #632]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e9      	bne.n	800240c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a6 	beq.w	8002592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b97      	ldr	r3, [pc, #604]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a93      	ldr	r2, [pc, #588]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a8a      	ldr	r2, [pc, #552]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7fe f9e9 	bl	8000860 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7fe f9e5 	bl	8000860 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0fd      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x312>
 80024b8:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x334>
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	e01c      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x356>
 80024f0:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7fe f999 	bl	8000860 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7fe f995 	bl	8000860 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0ab      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x37e>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7fe f983 	bl	8000860 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7fe f97f 	bl	8000860 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e095      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a47      	ldr	r2, [pc, #284]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8081 	beq.w	800269e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d061      	beq.n	800266c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d146      	bne.n	800263e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7fe f953 	bl	8000860 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7fe f94f 	bl	8000860 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e067      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	492d      	ldr	r1, [pc, #180]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a19      	ldr	r1, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	430b      	orrs	r3, r1
 800260a:	4927      	ldr	r1, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7fe f923 	bl	8000860 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe f91f 	bl	8000860 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e037      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x46a>
 800263c:	e02f      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe f90c 	bl	8000860 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7fe f908 	bl	8000860 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e020      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x498>
 800266a:	e018      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e013      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42420060 	.word	0x42420060

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a4:	f7fe f85c 	bl	8000860 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7fe f858 	bl	8000860 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f871 	bl	8002928 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1d0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd ffba 	bl	80007dc <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	0800a770 	.word	0x0800a770
 8002880:	20000004 	.word	0x20000004
 8002884:	20000008 	.word	0x20000008

08002888 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002894:	f107 0318 	add.w	r3, r7, #24
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80028a6:	2303      	movs	r3, #3
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 80028ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b2:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <HAL_RCC_MCOConfig+0x68>)
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <HAL_RCC_MCOConfig+0x68>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	6193      	str	r3, [r2, #24]
 80028c0:	4b0b      	ldr	r3, [pc, #44]	; (80028f0 <HAL_RCC_MCOConfig+0x68>)
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80028cc:	f107 0318 	add.w	r3, r7, #24
 80028d0:	4619      	mov	r1, r3
 80028d2:	4808      	ldr	r0, [pc, #32]	; (80028f4 <HAL_RCC_MCOConfig+0x6c>)
 80028d4:	f7ff f902 	bl	8001adc <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_RCC_MCOConfig+0x68>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <HAL_RCC_MCOConfig+0x68>)
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
}
 80028e8:	bf00      	nop
 80028ea:	3728      	adds	r7, #40	; 0x28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40010800 	.word	0x40010800

080028f8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCC_EnableCSS+0x14>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	4242004c 	.word	0x4242004c

08002910 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 8002914:	4b03      	ldr	r3, [pc, #12]	; (8002924 <HAL_RCC_DisableCSS+0x14>)
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]
}
 800291a:	bf00      	nop
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	4242004c 	.word	0x4242004c

08002928 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002928:	b490      	push	{r4, r7}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002930:	1d3c      	adds	r4, r7, #4
 8002932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002938:	f240 2301 	movw	r3, #513	; 0x201
 800293c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	2300      	movs	r3, #0
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002952:	4b22      	ldr	r3, [pc, #136]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 030c 	and.w	r3, r3, #12
 800295e:	2b04      	cmp	r3, #4
 8002960:	d002      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x40>
 8002962:	2b08      	cmp	r3, #8
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0x46>
 8002966:	e02d      	b.n	80029c4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	e02d      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	0c9b      	lsrs	r3, r3, #18
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800297a:	4413      	add	r3, r2
 800297c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002980:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c5b      	lsrs	r3, r3, #17
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800299a:	4413      	add	r3, r2
 800299c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029a0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a6:	fb02 f203 	mul.w	r2, r2, r3
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
 80029b2:	e004      	b.n	80029be <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	4a0b      	ldr	r2, [pc, #44]	; (80029e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	623b      	str	r3, [r7, #32]
      break;
 80029c2:	e002      	b.n	80029ca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c6:	623b      	str	r3, [r7, #32]
      break;
 80029c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ca:	6a3b      	ldr	r3, [r7, #32]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3728      	adds	r7, #40	; 0x28
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc90      	pop	{r4, r7}
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	0800a788 	.word	0x0800a788
 80029dc:	40021000 	.word	0x40021000
 80029e0:	007a1200 	.word	0x007a1200
 80029e4:	003d0900 	.word	0x003d0900

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b02      	ldr	r3, [pc, #8]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	20000004 	.word	0x20000004

080029fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a00:	f7ff fff2 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a12:	5ccb      	ldrb	r3, [r1, r3]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	0800a780 	.word	0x0800a780

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a28:	f7ff ffde 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4903      	ldr	r1, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	0800a780 	.word	0x0800a780

08002a4c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	220f      	movs	r2, #15
 8002a58:	601a      	str	r2, [r3, #0]
  /* Get the Prediv1 source --------------------------------------------------*/
  RCC_OscInitStruct->Prediv1Source = READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
#endif /* RCC_CFGR2_PREDIV1SRC */

  /* Get the HSE configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8002a5a:	4b3c      	ldr	r3, [pc, #240]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a66:	d104      	bne.n	8002a72 <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	e00e      	b.n	8002a90 <HAL_RCC_GetOscConfig+0x44>
  }
  else if ((RCC->CR & RCC_CR_HSEON) == RCC_CR_HSEON)
 8002a72:	4b36      	ldr	r3, [pc, #216]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7e:	d104      	bne.n	8002a8a <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	e002      	b.n	8002a90 <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	605a      	str	r2, [r3, #4]
  }
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
 8002a90:	4b2e      	ldr	r3, [pc, #184]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3200 	and.w	r2, r3, #131072	; 0x20000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]

  /* Get the HSI configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_HSION) == RCC_CR_HSION)
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d103      	bne.n	8002ab0 <HAL_RCC_GetOscConfig+0x64>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	611a      	str	r2, [r3, #16]
 8002aae:	e002      	b.n	8002ab6 <HAL_RCC_GetOscConfig+0x6a>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	f003 021f 	and.w	r2, r3, #31
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	615a      	str	r2, [r3, #20]

  /* Get the LSE configuration -----------------------------------------------*/
  if ((RCC->BDCR & RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8002ac4:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d103      	bne.n	8002ad8 <HAL_RCC_GetOscConfig+0x8c>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2205      	movs	r2, #5
 8002ad4:	60da      	str	r2, [r3, #12]
 8002ad6:	e00c      	b.n	8002af2 <HAL_RCC_GetOscConfig+0xa6>
  }
  else if ((RCC->BDCR & RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d103      	bne.n	8002aec <HAL_RCC_GetOscConfig+0xa0>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetOscConfig+0xa6>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	60da      	str	r2, [r3, #12]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if ((RCC->CSR & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002af2:	4b16      	ldr	r3, [pc, #88]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d103      	bne.n	8002b06 <HAL_RCC_GetOscConfig+0xba>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	619a      	str	r2, [r3, #24]
 8002b04:	e002      	b.n	8002b0c <HAL_RCC_GetOscConfig+0xc0>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	619a      	str	r2, [r3, #24]
  }


  /* Get the PLL configuration -----------------------------------------------*/
  if ((RCC->CR & RCC_CR_PLLON) == RCC_CR_PLLON)
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d103      	bne.n	8002b22 <HAL_RCC_GetOscConfig+0xd6>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	61da      	str	r2, [r3, #28]
 8002b20:	e002      	b.n	8002b28 <HAL_RCC_GetOscConfig+0xdc>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	61da      	str	r2, [r3, #28]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMULL);
 8002b34:	4b05      	ldr	r3, [pc, #20]	; (8002b4c <HAL_RCC_GetOscConfig+0x100>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24
    RCC_OscInitStruct->PLL2.PLL2State = RCC_PLL2_OFF;
  }
  RCC_OscInitStruct->PLL2.HSEPrediv2Value = __HAL_RCC_HSE_GET_PREDIV2();
  RCC_OscInitStruct->PLL2.PLL2MUL = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PLL2MUL);
#endif /* RCC_CR_PLL2ON */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bc80      	pop	{r7}
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000

08002b50 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0203 	and.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002b84:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCC_GetClockConfig+0x58>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	08db      	lsrs	r3, r3, #3
 8002b8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b92:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_RCC_GetClockConfig+0x5c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0207 	and.w	r2, r3, #7
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b80      	cmp	r3, #128	; 0x80
 8002bbe:	d104      	bne.n	8002bca <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002bc0:	f000 f828 	bl	8002c14 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002bc6:	2280      	movs	r2, #128	; 0x80
 8002bc8:	701a      	strb	r2, [r3, #0]
  }
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	4002100a 	.word	0x4002100a

08002bd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002be0:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <RCC_Delay+0x34>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0a      	ldr	r2, [pc, #40]	; (8002c10 <RCC_Delay+0x38>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	0a5b      	lsrs	r3, r3, #9
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bf4:	bf00      	nop
  }
  while (Delay --);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	1e5a      	subs	r2, r3, #1
 8002bfa:	60fa      	str	r2, [r7, #12]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1f9      	bne.n	8002bf4 <RCC_Delay+0x1c>
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	10624dd3 	.word	0x10624dd3

08002c14 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002c18:	bf00      	nop
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e041      	b.n	8002cb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd fc6a 	bl	8000520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f004 ff8c 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_TIM_Base_DeInit+0x40>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	f240 4344 	movw	r3, #1092	; 0x444
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_Base_DeInit+0x40>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fd fc68 	bl	80005d4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	b085      	sub	sp, #20
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d001      	beq.n	8002da2 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e032      	b.n	8002e08 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_TIM_Base_Start+0x8a>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d00e      	beq.n	8002dd2 <HAL_TIM_Base_Start+0x48>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d009      	beq.n	8002dd2 <HAL_TIM_Base_Start+0x48>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <HAL_TIM_Base_Start+0x8e>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d004      	beq.n	8002dd2 <HAL_TIM_Base_Start+0x48>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_TIM_Base_Start+0x92>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d010      	beq.n	8002e06 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0201 	orr.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df4:	e007      	b.n	8002e06 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800

08002e20 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6a1a      	ldr	r2, [r3, #32]
 8002e2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e32:	4013      	ands	r3, r2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <HAL_TIM_Base_Stop+0x38>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6a1a      	ldr	r2, [r3, #32]
 8002e3e:	f240 4344 	movw	r3, #1092	; 0x444
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d107      	bne.n	8002e58 <HAL_TIM_Base_Stop+0x38>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d001      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e03a      	b.n	8002efa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a18      	ldr	r2, [pc, #96]	; (8002f04 <HAL_TIM_Base_Start_IT+0x98>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00e      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eae:	d009      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_TIM_Base_Start_IT+0x9c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d004      	beq.n	8002ec4 <HAL_TIM_Base_Start_IT+0x58>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a13      	ldr	r2, [pc, #76]	; (8002f0c <HAL_TIM_Base_Start_IT+0xa0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d111      	bne.n	8002ee8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b06      	cmp	r3, #6
 8002ed4:	d010      	beq.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f042 0201 	orr.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee6:	e007      	b.n	8002ef8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	40012c00 	.word	0x40012c00
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800

08002f10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a1a      	ldr	r2, [r3, #32]
 8002f2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10f      	bne.n	8002f58 <HAL_TIM_Base_Stop_IT+0x48>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	f240 4344 	movw	r3, #1092	; 0x444
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_Base_Stop_IT+0x48>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIM_Base_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	4613      	mov	r3, r2
 8002f78:	80fb      	strh	r3, [r7, #6]

  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Set the TIM state */
  if (htim->State == HAL_TIM_STATE_BUSY)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d101      	bne.n	8002f8a <HAL_TIM_Base_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002f86:	2302      	movs	r3, #2
 8002f88:	e066      	b.n	8003058 <HAL_TIM_Base_Start_DMA+0xec>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d125      	bne.n	8002fe2 <HAL_TIM_Base_Start_DMA+0x76>
  {
    if ((pData == NULL) && (Length > 0U))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_TIM_Base_Start_DMA+0x3a>
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_TIM_Base_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e058      	b.n	8003058 <HAL_TIM_Base_Start_DMA+0xec>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  {
    return HAL_ERROR;
  }

  /* Set the DMA Period elapsed callbacks */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	4a2b      	ldr	r2, [pc, #172]	; (8003060 <HAL_TIM_Base_Start_DMA+0xf4>)
 8002fb4:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_TIM_Base_Start_DMA+0xf8>)
 8002fbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4a29      	ldr	r2, [pc, #164]	; (8003068 <HAL_TIM_Base_Start_DMA+0xfc>)
 8002fc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel */
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)pData, (uint32_t)&htim->Instance->ARR, Length) != HAL_OK)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a18      	ldr	r0, [r3, #32]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	332c      	adds	r3, #44	; 0x2c
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	88fb      	ldrh	r3, [r7, #6]
 8002fd6:	f7fe f905 	bl	80011e4 <HAL_DMA_Start_IT>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d004      	beq.n	8002fea <HAL_TIM_Base_Start_DMA+0x7e>
 8002fe0:	e001      	b.n	8002fe6 <HAL_TIM_Base_Start_DMA+0x7a>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e038      	b.n	8003058 <HAL_TIM_Base_Start_DMA+0xec>
  {
    /* Return error status */
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e036      	b.n	8003058 <HAL_TIM_Base_Start_DMA+0xec>
  }

  /* Enable the TIM Update DMA request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_UPDATE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ff8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1b      	ldr	r2, [pc, #108]	; (800306c <HAL_TIM_Base_Start_DMA+0x100>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIM_Base_Start_DMA+0xb6>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d009      	beq.n	8003022 <HAL_TIM_Base_Start_DMA+0xb6>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a17      	ldr	r2, [pc, #92]	; (8003070 <HAL_TIM_Base_Start_DMA+0x104>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIM_Base_Start_DMA+0xb6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a15      	ldr	r2, [pc, #84]	; (8003074 <HAL_TIM_Base_Start_DMA+0x108>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d111      	bne.n	8003046 <HAL_TIM_Base_Start_DMA+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2b06      	cmp	r3, #6
 8003032:	d010      	beq.n	8003056 <HAL_TIM_Base_Start_DMA+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0201 	orr.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003044:	e007      	b.n	8003056 <HAL_TIM_Base_Start_DMA+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	08007ae9 	.word	0x08007ae9
 8003064:	08007b17 	.word	0x08007b17
 8003068:	08007817 	.word	0x08007817
 800306c:	40012c00 	.word	0x40012c00
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800

08003078 <HAL_TIM_Base_Stop_DMA>:
  * @brief  Stops the TIM Base generation in DMA mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_DMA(TIM_HandleTypeDef *htim)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_INSTANCE(htim->Instance));

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800308e:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe f93e 	bl	8001316 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1a      	ldr	r2, [r3, #32]
 80030a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80030a4:	4013      	ands	r3, r2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_TIM_Base_Stop_DMA+0x52>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a1a      	ldr	r2, [r3, #32]
 80030b0:	f240 4344 	movw	r3, #1092	; 0x444
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_Base_Stop_DMA+0x52>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e041      	b.n	8003172 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d106      	bne.n	8003108 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f88d 	bl	8003222 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f004 fd2e 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6a1a      	ldr	r2, [r3, #32]
 8003190:	f241 1311 	movw	r3, #4369	; 0x1111
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_TIM_OC_DeInit+0x40>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6a1a      	ldr	r2, [r3, #32]
 80031a0:	f240 4344 	movw	r3, #1092	; 0x444
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d107      	bne.n	80031ba <HAL_TIM_OC_DeInit+0x40>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 0201 	bic.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f83a 	bl	8003234 <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_TIM_OC_Start+0x24>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	bf14      	ite	ne
 8003262:	2301      	movne	r3, #1
 8003264:	2300      	moveq	r3, #0
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e022      	b.n	80032b0 <HAL_TIM_OC_Start+0x6a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d109      	bne.n	8003284 <HAL_TIM_OC_Start+0x3e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	bf14      	ite	ne
 800327c:	2301      	movne	r3, #1
 800327e:	2300      	moveq	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e015      	b.n	80032b0 <HAL_TIM_OC_Start+0x6a>
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b08      	cmp	r3, #8
 8003288:	d109      	bne.n	800329e <HAL_TIM_OC_Start+0x58>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b01      	cmp	r3, #1
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	e008      	b.n	80032b0 <HAL_TIM_OC_Start+0x6a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e05e      	b.n	8003376 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d104      	bne.n	80032c8 <HAL_TIM_OC_Start+0x82>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c6:	e013      	b.n	80032f0 <HAL_TIM_OC_Start+0xaa>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d104      	bne.n	80032d8 <HAL_TIM_OC_Start+0x92>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d6:	e00b      	b.n	80032f0 <HAL_TIM_OC_Start+0xaa>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d104      	bne.n	80032e8 <HAL_TIM_OC_Start+0xa2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032e6:	e003      	b.n	80032f0 <HAL_TIM_OC_Start+0xaa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2201      	movs	r2, #1
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f005 f85a 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1f      	ldr	r2, [pc, #124]	; (8003380 <HAL_TIM_OC_Start+0x13a>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d107      	bne.n	8003318 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003316:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a18      	ldr	r2, [pc, #96]	; (8003380 <HAL_TIM_OC_Start+0x13a>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00e      	beq.n	8003340 <HAL_TIM_OC_Start+0xfa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332a:	d009      	beq.n	8003340 <HAL_TIM_OC_Start+0xfa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a14      	ldr	r2, [pc, #80]	; (8003384 <HAL_TIM_OC_Start+0x13e>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d004      	beq.n	8003340 <HAL_TIM_OC_Start+0xfa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_TIM_OC_Start+0x142>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d111      	bne.n	8003364 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b06      	cmp	r3, #6
 8003350:	d010      	beq.n	8003374 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003362:	e007      	b.n	8003374 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800

0800338c <HAL_TIM_OC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2200      	movs	r2, #0
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f005 f807 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a29      	ldr	r2, [pc, #164]	; (8003450 <HAL_TIM_OC_Stop+0xc4>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d117      	bne.n	80033de <HAL_TIM_OC_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6a1a      	ldr	r2, [r3, #32]
 80033b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80033b8:	4013      	ands	r3, r2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10f      	bne.n	80033de <HAL_TIM_OC_Stop+0x52>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	f240 4344 	movw	r3, #1092	; 0x444
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d107      	bne.n	80033de <HAL_TIM_OC_Stop+0x52>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a1a      	ldr	r2, [r3, #32]
 80033e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80033e8:	4013      	ands	r3, r2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10f      	bne.n	800340e <HAL_TIM_OC_Stop+0x82>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a1a      	ldr	r2, [r3, #32]
 80033f4:	f240 4344 	movw	r3, #1092	; 0x444
 80033f8:	4013      	ands	r3, r2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d107      	bne.n	800340e <HAL_TIM_OC_Stop+0x82>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0201 	bic.w	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_TIM_OC_Stop+0x92>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	e013      	b.n	8003446 <HAL_TIM_OC_Stop+0xba>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b04      	cmp	r3, #4
 8003422:	d104      	bne.n	800342e <HAL_TIM_OC_Stop+0xa2>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800342c:	e00b      	b.n	8003446 <HAL_TIM_OC_Stop+0xba>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	2b08      	cmp	r3, #8
 8003432:	d104      	bne.n	800343e <HAL_TIM_OC_Stop+0xb2>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800343c:	e003      	b.n	8003446 <HAL_TIM_OC_Stop+0xba>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40012c00 	.word	0x40012c00

08003454 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d109      	bne.n	8003478 <HAL_TIM_OC_Start_IT+0x24>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	bf14      	ite	ne
 8003470:	2301      	movne	r3, #1
 8003472:	2300      	moveq	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	e022      	b.n	80034be <HAL_TIM_OC_Start_IT+0x6a>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b04      	cmp	r3, #4
 800347c:	d109      	bne.n	8003492 <HAL_TIM_OC_Start_IT+0x3e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	bf14      	ite	ne
 800348a:	2301      	movne	r3, #1
 800348c:	2300      	moveq	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	e015      	b.n	80034be <HAL_TIM_OC_Start_IT+0x6a>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b08      	cmp	r3, #8
 8003496:	d109      	bne.n	80034ac <HAL_TIM_OC_Start_IT+0x58>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	e008      	b.n	80034be <HAL_TIM_OC_Start_IT+0x6a>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e0a4      	b.n	8003610 <HAL_TIM_OC_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <HAL_TIM_OC_Start_IT+0x82>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d4:	e013      	b.n	80034fe <HAL_TIM_OC_Start_IT+0xaa>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d104      	bne.n	80034e6 <HAL_TIM_OC_Start_IT+0x92>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2202      	movs	r2, #2
 80034e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034e4:	e00b      	b.n	80034fe <HAL_TIM_OC_Start_IT+0xaa>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b08      	cmp	r3, #8
 80034ea:	d104      	bne.n	80034f6 <HAL_TIM_OC_Start_IT+0xa2>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2202      	movs	r2, #2
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	e003      	b.n	80034fe <HAL_TIM_OC_Start_IT+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2202      	movs	r2, #2
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b0c      	cmp	r3, #12
 8003502:	d841      	bhi.n	8003588 <HAL_TIM_OC_Start_IT+0x134>
 8003504:	a201      	add	r2, pc, #4	; (adr r2, 800350c <HAL_TIM_OC_Start_IT+0xb8>)
 8003506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350a:	bf00      	nop
 800350c:	08003541 	.word	0x08003541
 8003510:	08003589 	.word	0x08003589
 8003514:	08003589 	.word	0x08003589
 8003518:	08003589 	.word	0x08003589
 800351c:	08003553 	.word	0x08003553
 8003520:	08003589 	.word	0x08003589
 8003524:	08003589 	.word	0x08003589
 8003528:	08003589 	.word	0x08003589
 800352c:	08003565 	.word	0x08003565
 8003530:	08003589 	.word	0x08003589
 8003534:	08003589 	.word	0x08003589
 8003538:	08003589 	.word	0x08003589
 800353c:	08003577 	.word	0x08003577
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0202 	orr.w	r2, r2, #2
 800354e:	60da      	str	r2, [r3, #12]
      break;
 8003550:	e01b      	b.n	800358a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f042 0204 	orr.w	r2, r2, #4
 8003560:	60da      	str	r2, [r3, #12]
      break;
 8003562:	e012      	b.n	800358a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0208 	orr.w	r2, r2, #8
 8003572:	60da      	str	r2, [r3, #12]
      break;
 8003574:	e009      	b.n	800358a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0210 	orr.w	r2, r2, #16
 8003584:	60da      	str	r2, [r3, #12]
      break;
 8003586:	e000      	b.n	800358a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8003588:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f004 ff0d 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1e      	ldr	r2, [pc, #120]	; (8003618 <HAL_TIM_OC_Start_IT+0x1c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d107      	bne.n	80035b2 <HAL_TIM_OC_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <HAL_TIM_OC_Start_IT+0x1c4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_TIM_OC_Start_IT+0x186>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d009      	beq.n	80035da <HAL_TIM_OC_Start_IT+0x186>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a14      	ldr	r2, [pc, #80]	; (800361c <HAL_TIM_OC_Start_IT+0x1c8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIM_OC_Start_IT+0x186>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a12      	ldr	r2, [pc, #72]	; (8003620 <HAL_TIM_OC_Start_IT+0x1cc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d111      	bne.n	80035fe <HAL_TIM_OC_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b06      	cmp	r3, #6
 80035ea:	d010      	beq.n	800360e <HAL_TIM_OC_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fc:	e007      	b.n	800360e <HAL_TIM_OC_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40012c00 	.word	0x40012c00
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800

08003624 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d841      	bhi.n	80036b8 <HAL_TIM_OC_Stop_IT+0x94>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <HAL_TIM_OC_Stop_IT+0x18>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003671 	.word	0x08003671
 8003640:	080036b9 	.word	0x080036b9
 8003644:	080036b9 	.word	0x080036b9
 8003648:	080036b9 	.word	0x080036b9
 800364c:	08003683 	.word	0x08003683
 8003650:	080036b9 	.word	0x080036b9
 8003654:	080036b9 	.word	0x080036b9
 8003658:	080036b9 	.word	0x080036b9
 800365c:	08003695 	.word	0x08003695
 8003660:	080036b9 	.word	0x080036b9
 8003664:	080036b9 	.word	0x080036b9
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036a7 	.word	0x080036a7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0202 	bic.w	r2, r2, #2
 800367e:	60da      	str	r2, [r3, #12]
      break;
 8003680:	e01b      	b.n	80036ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0204 	bic.w	r2, r2, #4
 8003690:	60da      	str	r2, [r3, #12]
      break;
 8003692:	e012      	b.n	80036ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0208 	bic.w	r2, r2, #8
 80036a2:	60da      	str	r2, [r3, #12]
      break;
 80036a4:	e009      	b.n	80036ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0210 	bic.w	r2, r2, #16
 80036b4:	60da      	str	r2, [r3, #12]
      break;
 80036b6:	e000      	b.n	80036ba <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 80036b8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	6839      	ldr	r1, [r7, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f004 fe75 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a29      	ldr	r2, [pc, #164]	; (8003774 <HAL_TIM_OC_Stop_IT+0x150>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d117      	bne.n	8003702 <HAL_TIM_OC_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6a1a      	ldr	r2, [r3, #32]
 80036d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80036dc:	4013      	ands	r3, r2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10f      	bne.n	8003702 <HAL_TIM_OC_Stop_IT+0xde>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6a1a      	ldr	r2, [r3, #32]
 80036e8:	f240 4344 	movw	r3, #1092	; 0x444
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_TIM_OC_Stop_IT+0xde>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6a1a      	ldr	r2, [r3, #32]
 8003708:	f241 1311 	movw	r3, #4369	; 0x1111
 800370c:	4013      	ands	r3, r2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10f      	bne.n	8003732 <HAL_TIM_OC_Stop_IT+0x10e>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	f240 4344 	movw	r3, #1092	; 0x444
 800371c:	4013      	ands	r3, r2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d107      	bne.n	8003732 <HAL_TIM_OC_Stop_IT+0x10e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_OC_Stop_IT+0x11e>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003740:	e013      	b.n	800376a <HAL_TIM_OC_Stop_IT+0x146>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d104      	bne.n	8003752 <HAL_TIM_OC_Stop_IT+0x12e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003750:	e00b      	b.n	800376a <HAL_TIM_OC_Stop_IT+0x146>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d104      	bne.n	8003762 <HAL_TIM_OC_Stop_IT+0x13e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003760:	e003      	b.n	800376a <HAL_TIM_OC_Stop_IT+0x146>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3708      	adds	r7, #8
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40012c00 	.word	0x40012c00

08003778 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_OC_Start_DMA+0x28>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	bf0c      	ite	eq
 8003798:	2301      	moveq	r3, #1
 800379a:	2300      	movne	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e022      	b.n	80037e6 <HAL_TIM_OC_Start_DMA+0x6e>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d109      	bne.n	80037ba <HAL_TIM_OC_Start_DMA+0x42>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	bf0c      	ite	eq
 80037b2:	2301      	moveq	r3, #1
 80037b4:	2300      	movne	r3, #0
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	e015      	b.n	80037e6 <HAL_TIM_OC_Start_DMA+0x6e>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d109      	bne.n	80037d4 <HAL_TIM_OC_Start_DMA+0x5c>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	bf0c      	ite	eq
 80037cc:	2301      	moveq	r3, #1
 80037ce:	2300      	movne	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	e008      	b.n	80037e6 <HAL_TIM_OC_Start_DMA+0x6e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	bf0c      	ite	eq
 80037e0:	2301      	moveq	r3, #1
 80037e2:	2300      	movne	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_TIM_OC_Start_DMA+0x76>
  {
    return HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	e14e      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_TIM_OC_Start_DMA+0x90>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	e022      	b.n	800384e <HAL_TIM_OC_Start_DMA+0xd6>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d109      	bne.n	8003822 <HAL_TIM_OC_Start_DMA+0xaa>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003814:	b2db      	uxtb	r3, r3
 8003816:	2b01      	cmp	r3, #1
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e015      	b.n	800384e <HAL_TIM_OC_Start_DMA+0xd6>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b08      	cmp	r3, #8
 8003826:	d109      	bne.n	800383c <HAL_TIM_OC_Start_DMA+0xc4>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e008      	b.n	800384e <HAL_TIM_OC_Start_DMA+0xd6>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2b01      	cmp	r3, #1
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d024      	beq.n	800389c <HAL_TIM_OC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d104      	bne.n	8003862 <HAL_TIM_OC_Start_DMA+0xea>
 8003858:	887b      	ldrh	r3, [r7, #2]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <HAL_TIM_OC_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e114      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <HAL_TIM_OC_Start_DMA+0xfa>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003870:	e016      	b.n	80038a0 <HAL_TIM_OC_Start_DMA+0x128>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b04      	cmp	r3, #4
 8003876:	d104      	bne.n	8003882 <HAL_TIM_OC_Start_DMA+0x10a>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003880:	e00e      	b.n	80038a0 <HAL_TIM_OC_Start_DMA+0x128>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b08      	cmp	r3, #8
 8003886:	d104      	bne.n	8003892 <HAL_TIM_OC_Start_DMA+0x11a>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003890:	e006      	b.n	80038a0 <HAL_TIM_OC_Start_DMA+0x128>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800389a:	e001      	b.n	80038a0 <HAL_TIM_OC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0f5      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	f200 80ae 	bhi.w	8003a04 <HAL_TIM_OC_Start_DMA+0x28c>
 80038a8:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <HAL_TIM_OC_Start_DMA+0x138>)
 80038aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ae:	bf00      	nop
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	08003a05 	.word	0x08003a05
 80038b8:	08003a05 	.word	0x08003a05
 80038bc:	08003a05 	.word	0x08003a05
 80038c0:	0800392d 	.word	0x0800392d
 80038c4:	08003a05 	.word	0x08003a05
 80038c8:	08003a05 	.word	0x08003a05
 80038cc:	08003a05 	.word	0x08003a05
 80038d0:	08003975 	.word	0x08003975
 80038d4:	08003a05 	.word	0x08003a05
 80038d8:	08003a05 	.word	0x08003a05
 80038dc:	08003a05 	.word	0x08003a05
 80038e0:	080039bd 	.word	0x080039bd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_TIM_OC_Start_DMA+0x31c>)
 80038ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	4a69      	ldr	r2, [pc, #420]	; (8003a98 <HAL_TIM_OC_Start_DMA+0x320>)
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	4a68      	ldr	r2, [pc, #416]	; (8003a9c <HAL_TIM_OC_Start_DMA+0x324>)
 80038fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	3334      	adds	r3, #52	; 0x34
 8003908:	461a      	mov	r2, r3
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	f7fd fc6a 	bl	80011e4 <HAL_DMA_Start_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <HAL_TIM_OC_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e0b8      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003928:	60da      	str	r2, [r3, #12]
      break;
 800392a:	e06c      	b.n	8003a06 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_TIM_OC_Start_DMA+0x31c>)
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_TIM_OC_Start_DMA+0x320>)
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	4a56      	ldr	r2, [pc, #344]	; (8003a9c <HAL_TIM_OC_Start_DMA+0x324>)
 8003942:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3338      	adds	r3, #56	; 0x38
 8003950:	461a      	mov	r2, r3
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	f7fd fc46 	bl	80011e4 <HAL_DMA_Start_IT>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_TIM_OC_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e094      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003970:	60da      	str	r2, [r3, #12]
      break;
 8003972:	e048      	b.n	8003a06 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003978:	4a46      	ldr	r2, [pc, #280]	; (8003a94 <HAL_TIM_OC_Start_DMA+0x31c>)
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003980:	4a45      	ldr	r2, [pc, #276]	; (8003a98 <HAL_TIM_OC_Start_DMA+0x320>)
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4a44      	ldr	r2, [pc, #272]	; (8003a9c <HAL_TIM_OC_Start_DMA+0x324>)
 800398a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	333c      	adds	r3, #60	; 0x3c
 8003998:	461a      	mov	r2, r3
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	f7fd fc22 	bl	80011e4 <HAL_DMA_Start_IT>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <HAL_TIM_OC_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e070      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b8:	60da      	str	r2, [r3, #12]
      break;
 80039ba:	e024      	b.n	8003a06 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_TIM_OC_Start_DMA+0x31c>)
 80039c2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	4a33      	ldr	r2, [pc, #204]	; (8003a98 <HAL_TIM_OC_Start_DMA+0x320>)
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d0:	4a32      	ldr	r2, [pc, #200]	; (8003a9c <HAL_TIM_OC_Start_DMA+0x324>)
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	3340      	adds	r3, #64	; 0x40
 80039e0:	461a      	mov	r2, r3
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	f7fd fbfe 	bl	80011e4 <HAL_DMA_Start_IT>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <HAL_TIM_OC_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e04c      	b.n	8003a8c <HAL_TIM_OC_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a00:	60da      	str	r2, [r3, #12]
      break;
 8003a02:	e000      	b.n	8003a06 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    default:
      break;
 8003a04:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 fccf 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_TIM_OC_Start_DMA+0x328>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_OC_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1b      	ldr	r2, [pc, #108]	; (8003aa0 <HAL_TIM_OC_Start_DMA+0x328>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_OC_Start_DMA+0x2de>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_OC_Start_DMA+0x2de>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_TIM_OC_Start_DMA+0x32c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_OC_Start_DMA+0x2de>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_TIM_OC_Start_DMA+0x330>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_OC_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_OC_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_OC_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	080078a9 	.word	0x080078a9
 8003a98:	08007951 	.word	0x08007951
 8003a9c:	08007817 	.word	0x08007817
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800

08003aac <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b0c      	cmp	r3, #12
 8003aba:	d855      	bhi.n	8003b68 <HAL_TIM_OC_Stop_DMA+0xbc>
 8003abc:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <HAL_TIM_OC_Stop_DMA+0x18>)
 8003abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac2:	bf00      	nop
 8003ac4:	08003af9 	.word	0x08003af9
 8003ac8:	08003b69 	.word	0x08003b69
 8003acc:	08003b69 	.word	0x08003b69
 8003ad0:	08003b69 	.word	0x08003b69
 8003ad4:	08003b15 	.word	0x08003b15
 8003ad8:	08003b69 	.word	0x08003b69
 8003adc:	08003b69 	.word	0x08003b69
 8003ae0:	08003b69 	.word	0x08003b69
 8003ae4:	08003b31 	.word	0x08003b31
 8003ae8:	08003b69 	.word	0x08003b69
 8003aec:	08003b69 	.word	0x08003b69
 8003af0:	08003b69 	.word	0x08003b69
 8003af4:	08003b4d 	.word	0x08003b4d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68da      	ldr	r2, [r3, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fc02 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8003b12:	e02a      	b.n	8003b6a <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd fbf4 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8003b2e:	e01c      	b.n	8003b6a <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fd fbe6 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8003b4a:	e00e      	b.n	8003b6a <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd fbd8 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8003b66:	e000      	b.n	8003b6a <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    default:
      break;
 8003b68:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	6839      	ldr	r1, [r7, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 fc1d 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <HAL_TIM_OC_Stop_DMA+0x178>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d117      	bne.n	8003bb2 <HAL_TIM_OC_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6a1a      	ldr	r2, [r3, #32]
 8003b88:	f241 1311 	movw	r3, #4369	; 0x1111
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10f      	bne.n	8003bb2 <HAL_TIM_OC_Stop_DMA+0x106>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	f240 4344 	movw	r3, #1092	; 0x444
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d107      	bne.n	8003bb2 <HAL_TIM_OC_Stop_DMA+0x106>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_TIM_OC_Stop_DMA+0x136>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	f240 4344 	movw	r3, #1092	; 0x444
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <HAL_TIM_OC_Stop_DMA+0x136>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_OC_Stop_DMA+0x146>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf0:	e013      	b.n	8003c1a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d104      	bne.n	8003c02 <HAL_TIM_OC_Stop_DMA+0x156>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c00:	e00b      	b.n	8003c1a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d104      	bne.n	8003c12 <HAL_TIM_OC_Stop_DMA+0x166>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c10:	e003      	b.n	8003c1a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40012c00 	.word	0x40012c00

08003c28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e041      	b.n	8003cbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d106      	bne.n	8003c54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f88d 	bl	8003d6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2202      	movs	r2, #2
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f003 ff88 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10f      	bne.n	8003d06 <HAL_TIM_PWM_DeInit+0x40>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a1a      	ldr	r2, [r3, #32]
 8003cec:	f240 4344 	movw	r3, #1092	; 0x444
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_TIM_PWM_DeInit+0x40>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f83a 	bl	8003d80 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x24>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	e022      	b.n	8003dfc <HAL_TIM_PWM_Start+0x6a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x3e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e015      	b.n	8003dfc <HAL_TIM_PWM_Start+0x6a>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d109      	bne.n	8003dea <HAL_TIM_PWM_Start+0x58>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e008      	b.n	8003dfc <HAL_TIM_PWM_Start+0x6a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	bf14      	ite	ne
 8003df6:	2301      	movne	r3, #1
 8003df8:	2300      	moveq	r3, #0
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e05e      	b.n	8003ec2 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d104      	bne.n	8003e14 <HAL_TIM_PWM_Start+0x82>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e12:	e013      	b.n	8003e3c <HAL_TIM_PWM_Start+0xaa>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d104      	bne.n	8003e24 <HAL_TIM_PWM_Start+0x92>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e22:	e00b      	b.n	8003e3c <HAL_TIM_PWM_Start+0xaa>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d104      	bne.n	8003e34 <HAL_TIM_PWM_Start+0xa2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e32:	e003      	b.n	8003e3c <HAL_TIM_PWM_Start+0xaa>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	6839      	ldr	r1, [r7, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f004 fab4 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <HAL_TIM_PWM_Start+0x13a>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a18      	ldr	r2, [pc, #96]	; (8003ecc <HAL_TIM_PWM_Start+0x13a>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00e      	beq.n	8003e8c <HAL_TIM_PWM_Start+0xfa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d009      	beq.n	8003e8c <HAL_TIM_PWM_Start+0xfa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a14      	ldr	r2, [pc, #80]	; (8003ed0 <HAL_TIM_PWM_Start+0x13e>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <HAL_TIM_PWM_Start+0xfa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <HAL_TIM_PWM_Start+0x142>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d010      	beq.n	8003ec0 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	e007      	b.n	8003ec0 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40000400 	.word	0x40000400
 8003ed4:	40000800 	.word	0x40000800

08003ed8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f004 fa61 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <HAL_TIM_PWM_Stop+0xc4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d117      	bne.n	8003f2a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a1a      	ldr	r2, [r3, #32]
 8003f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10f      	bne.n	8003f2a <HAL_TIM_PWM_Stop+0x52>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6a1a      	ldr	r2, [r3, #32]
 8003f10:	f240 4344 	movw	r3, #1092	; 0x444
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d107      	bne.n	8003f2a <HAL_TIM_PWM_Stop+0x52>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_TIM_PWM_Stop+0x82>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	f240 4344 	movw	r3, #1092	; 0x444
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d107      	bne.n	8003f5a <HAL_TIM_PWM_Stop+0x82>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <HAL_TIM_PWM_Stop+0x92>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f68:	e013      	b.n	8003f92 <HAL_TIM_PWM_Stop+0xba>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d104      	bne.n	8003f7a <HAL_TIM_PWM_Stop+0xa2>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f78:	e00b      	b.n	8003f92 <HAL_TIM_PWM_Stop+0xba>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d104      	bne.n	8003f8a <HAL_TIM_PWM_Stop+0xb2>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f88:	e003      	b.n	8003f92 <HAL_TIM_PWM_Stop+0xba>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40012c00 	.word	0x40012c00

08003fa0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d109      	bne.n	8003fc4 <HAL_TIM_PWM_Start_IT+0x24>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	bf14      	ite	ne
 8003fbc:	2301      	movne	r3, #1
 8003fbe:	2300      	moveq	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	e022      	b.n	800400a <HAL_TIM_PWM_Start_IT+0x6a>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d109      	bne.n	8003fde <HAL_TIM_PWM_Start_IT+0x3e>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	bf14      	ite	ne
 8003fd6:	2301      	movne	r3, #1
 8003fd8:	2300      	moveq	r3, #0
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	e015      	b.n	800400a <HAL_TIM_PWM_Start_IT+0x6a>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d109      	bne.n	8003ff8 <HAL_TIM_PWM_Start_IT+0x58>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	bf14      	ite	ne
 8003ff0:	2301      	movne	r3, #1
 8003ff2:	2300      	moveq	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	e008      	b.n	800400a <HAL_TIM_PWM_Start_IT+0x6a>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e0a4      	b.n	800415c <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Start_IT+0x82>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004020:	e013      	b.n	800404a <HAL_TIM_PWM_Start_IT+0xaa>
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d104      	bne.n	8004032 <HAL_TIM_PWM_Start_IT+0x92>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2202      	movs	r2, #2
 800402c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004030:	e00b      	b.n	800404a <HAL_TIM_PWM_Start_IT+0xaa>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d104      	bne.n	8004042 <HAL_TIM_PWM_Start_IT+0xa2>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004040:	e003      	b.n	800404a <HAL_TIM_PWM_Start_IT+0xaa>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b0c      	cmp	r3, #12
 800404e:	d841      	bhi.n	80040d4 <HAL_TIM_PWM_Start_IT+0x134>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_TIM_PWM_Start_IT+0xb8>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800408d 	.word	0x0800408d
 800405c:	080040d5 	.word	0x080040d5
 8004060:	080040d5 	.word	0x080040d5
 8004064:	080040d5 	.word	0x080040d5
 8004068:	0800409f 	.word	0x0800409f
 800406c:	080040d5 	.word	0x080040d5
 8004070:	080040d5 	.word	0x080040d5
 8004074:	080040d5 	.word	0x080040d5
 8004078:	080040b1 	.word	0x080040b1
 800407c:	080040d5 	.word	0x080040d5
 8004080:	080040d5 	.word	0x080040d5
 8004084:	080040d5 	.word	0x080040d5
 8004088:	080040c3 	.word	0x080040c3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0202 	orr.w	r2, r2, #2
 800409a:	60da      	str	r2, [r3, #12]
      break;
 800409c:	e01b      	b.n	80040d6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0204 	orr.w	r2, r2, #4
 80040ac:	60da      	str	r2, [r3, #12]
      break;
 80040ae:	e012      	b.n	80040d6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0208 	orr.w	r2, r2, #8
 80040be:	60da      	str	r2, [r3, #12]
      break;
 80040c0:	e009      	b.n	80040d6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0210 	orr.w	r2, r2, #16
 80040d0:	60da      	str	r2, [r3, #12]
      break;
 80040d2:	e000      	b.n	80040d6 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80040d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2201      	movs	r2, #1
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f004 f967 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <HAL_TIM_PWM_Start_IT+0x1c4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d107      	bne.n	80040fe <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a18      	ldr	r2, [pc, #96]	; (8004164 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00e      	beq.n	8004126 <HAL_TIM_PWM_Start_IT+0x186>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004110:	d009      	beq.n	8004126 <HAL_TIM_PWM_Start_IT+0x186>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <HAL_TIM_PWM_Start_IT+0x1c8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d004      	beq.n	8004126 <HAL_TIM_PWM_Start_IT+0x186>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b06      	cmp	r3, #6
 8004136:	d010      	beq.n	800415a <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004148:	e007      	b.n	800415a <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40000400 	.word	0x40000400
 800416c:	40000800 	.word	0x40000800

08004170 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d841      	bhi.n	8004204 <HAL_TIM_PWM_Stop_IT+0x94>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <HAL_TIM_PWM_Stop_IT+0x18>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041bd 	.word	0x080041bd
 800418c:	08004205 	.word	0x08004205
 8004190:	08004205 	.word	0x08004205
 8004194:	08004205 	.word	0x08004205
 8004198:	080041cf 	.word	0x080041cf
 800419c:	08004205 	.word	0x08004205
 80041a0:	08004205 	.word	0x08004205
 80041a4:	08004205 	.word	0x08004205
 80041a8:	080041e1 	.word	0x080041e1
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004205 	.word	0x08004205
 80041b8:	080041f3 	.word	0x080041f3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0202 	bic.w	r2, r2, #2
 80041ca:	60da      	str	r2, [r3, #12]
      break;
 80041cc:	e01b      	b.n	8004206 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	60da      	str	r2, [r3, #12]
      break;
 80041de:	e012      	b.n	8004206 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0208 	bic.w	r2, r2, #8
 80041ee:	60da      	str	r2, [r3, #12]
      break;
 80041f0:	e009      	b.n	8004206 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68da      	ldr	r2, [r3, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0210 	bic.w	r2, r2, #16
 8004200:	60da      	str	r2, [r3, #12]
      break;
 8004202:	e000      	b.n	8004206 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8004204:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	6839      	ldr	r1, [r7, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f004 f8cf 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <HAL_TIM_PWM_Stop_IT+0x150>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d117      	bne.n	800424e <HAL_TIM_PWM_Stop_IT+0xde>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	f241 1311 	movw	r3, #4369	; 0x1111
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_TIM_PWM_Stop_IT+0xde>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	f240 4344 	movw	r3, #1092	; 0x444
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_TIM_PWM_Stop_IT+0xde>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800424c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	f241 1311 	movw	r3, #4369	; 0x1111
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10f      	bne.n	800427e <HAL_TIM_PWM_Stop_IT+0x10e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1a      	ldr	r2, [r3, #32]
 8004264:	f240 4344 	movw	r3, #1092	; 0x444
 8004268:	4013      	ands	r3, r2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_TIM_PWM_Stop_IT+0x10e>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0201 	bic.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d104      	bne.n	800428e <HAL_TIM_PWM_Stop_IT+0x11e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800428c:	e013      	b.n	80042b6 <HAL_TIM_PWM_Stop_IT+0x146>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b04      	cmp	r3, #4
 8004292:	d104      	bne.n	800429e <HAL_TIM_PWM_Stop_IT+0x12e>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429c:	e00b      	b.n	80042b6 <HAL_TIM_PWM_Stop_IT+0x146>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Stop_IT+0x13e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042ac:	e003      	b.n	80042b6 <HAL_TIM_PWM_Stop_IT+0x146>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3708      	adds	r7, #8
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40012c00 	.word	0x40012c00

080042c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d109      	bne.n	80042ec <HAL_TIM_PWM_Start_DMA+0x28>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e022      	b.n	8004332 <HAL_TIM_PWM_Start_DMA+0x6e>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b04      	cmp	r3, #4
 80042f0:	d109      	bne.n	8004306 <HAL_TIM_PWM_Start_DMA+0x42>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	e015      	b.n	8004332 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d109      	bne.n	8004320 <HAL_TIM_PWM_Start_DMA+0x5c>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e008      	b.n	8004332 <HAL_TIM_PWM_Start_DMA+0x6e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8004336:	2302      	movs	r3, #2
 8004338:	e14e      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_TIM_PWM_Start_DMA+0x90>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b01      	cmp	r3, #1
 800434a:	bf0c      	ite	eq
 800434c:	2301      	moveq	r3, #1
 800434e:	2300      	movne	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	e022      	b.n	800439a <HAL_TIM_PWM_Start_DMA+0xd6>
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d109      	bne.n	800436e <HAL_TIM_PWM_Start_DMA+0xaa>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	bf0c      	ite	eq
 8004366:	2301      	moveq	r3, #1
 8004368:	2300      	movne	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	e015      	b.n	800439a <HAL_TIM_PWM_Start_DMA+0xd6>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b01      	cmp	r3, #1
 800437e:	bf0c      	ite	eq
 8004380:	2301      	moveq	r3, #1
 8004382:	2300      	movne	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e008      	b.n	800439a <HAL_TIM_PWM_Start_DMA+0xd6>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_PWM_Start_DMA+0xea>
 80043a4:	887b      	ldrh	r3, [r7, #2]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e114      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d104      	bne.n	80043be <HAL_TIM_PWM_Start_DMA+0xfa>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043bc:	e016      	b.n	80043ec <HAL_TIM_PWM_Start_DMA+0x128>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d104      	bne.n	80043ce <HAL_TIM_PWM_Start_DMA+0x10a>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043cc:	e00e      	b.n	80043ec <HAL_TIM_PWM_Start_DMA+0x128>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d104      	bne.n	80043de <HAL_TIM_PWM_Start_DMA+0x11a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043dc:	e006      	b.n	80043ec <HAL_TIM_PWM_Start_DMA+0x128>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2202      	movs	r2, #2
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043e6:	e001      	b.n	80043ec <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0f5      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b0c      	cmp	r3, #12
 80043f0:	f200 80ae 	bhi.w	8004550 <HAL_TIM_PWM_Start_DMA+0x28c>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <HAL_TIM_PWM_Start_DMA+0x138>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	08004431 	.word	0x08004431
 8004400:	08004551 	.word	0x08004551
 8004404:	08004551 	.word	0x08004551
 8004408:	08004551 	.word	0x08004551
 800440c:	08004479 	.word	0x08004479
 8004410:	08004551 	.word	0x08004551
 8004414:	08004551 	.word	0x08004551
 8004418:	08004551 	.word	0x08004551
 800441c:	080044c1 	.word	0x080044c1
 8004420:	08004551 	.word	0x08004551
 8004424:	08004551 	.word	0x08004551
 8004428:	08004551 	.word	0x08004551
 800442c:	08004509 	.word	0x08004509
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004434:	4a6a      	ldr	r2, [pc, #424]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	4a69      	ldr	r2, [pc, #420]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 800443e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8004446:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3334      	adds	r3, #52	; 0x34
 8004454:	461a      	mov	r2, r3
 8004456:	887b      	ldrh	r3, [r7, #2]
 8004458:	f7fc fec4 	bl	80011e4 <HAL_DMA_Start_IT>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_TIM_PWM_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0b8      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004474:	60da      	str	r2, [r3, #12]
      break;
 8004476:	e06c      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	4a58      	ldr	r2, [pc, #352]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800447e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004484:	4a57      	ldr	r2, [pc, #348]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004486:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	4a56      	ldr	r2, [pc, #344]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800448e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3338      	adds	r3, #56	; 0x38
 800449c:	461a      	mov	r2, r3
 800449e:	887b      	ldrh	r3, [r7, #2]
 80044a0:	f7fc fea0 	bl	80011e4 <HAL_DMA_Start_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_TIM_PWM_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e094      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68da      	ldr	r2, [r3, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044bc:	60da      	str	r2, [r3, #12]
      break;
 80044be:	e048      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4a46      	ldr	r2, [pc, #280]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044cc:	4a45      	ldr	r2, [pc, #276]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a44      	ldr	r2, [pc, #272]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 80044d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	333c      	adds	r3, #60	; 0x3c
 80044e4:	461a      	mov	r2, r3
 80044e6:	887b      	ldrh	r3, [r7, #2]
 80044e8:	f7fc fe7c 	bl	80011e4 <HAL_DMA_Start_IT>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_TIM_PWM_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e070      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004504:	60da      	str	r2, [r3, #12]
      break;
 8004506:	e024      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	4a34      	ldr	r2, [pc, #208]	; (80045e0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004514:	4a33      	ldr	r2, [pc, #204]	; (80045e4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8004516:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	4a32      	ldr	r2, [pc, #200]	; (80045e8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800451e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3340      	adds	r3, #64	; 0x40
 800452c:	461a      	mov	r2, r3
 800452e:	887b      	ldrh	r3, [r7, #2]
 8004530:	f7fc fe58 	bl	80011e4 <HAL_DMA_Start_IT>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_TIM_PWM_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e04c      	b.n	80045d8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68da      	ldr	r2, [r3, #12]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800454c:	60da      	str	r2, [r3, #12]
      break;
 800454e:	e000      	b.n	8004552 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8004550:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2201      	movs	r2, #1
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	4618      	mov	r0, r3
 800455c:	f003 ff29 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a21      	ldr	r2, [pc, #132]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x328>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d107      	bne.n	800457a <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004578:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <HAL_TIM_PWM_Start_DMA+0x328>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d00e      	beq.n	80045a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800458c:	d009      	beq.n	80045a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a17      	ldr	r2, [pc, #92]	; (80045f0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_TIM_PWM_Start_DMA+0x330>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d111      	bne.n	80045c6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d010      	beq.n	80045d6 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c4:	e007      	b.n	80045d6 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0201 	orr.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	080078a9 	.word	0x080078a9
 80045e4:	08007951 	.word	0x08007951
 80045e8:	08007817 	.word	0x08007817
 80045ec:	40012c00 	.word	0x40012c00
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800

080045f8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b0c      	cmp	r3, #12
 8004606:	d855      	bhi.n	80046b4 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <HAL_TIM_PWM_Stop_DMA+0x18>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004645 	.word	0x08004645
 8004614:	080046b5 	.word	0x080046b5
 8004618:	080046b5 	.word	0x080046b5
 800461c:	080046b5 	.word	0x080046b5
 8004620:	08004661 	.word	0x08004661
 8004624:	080046b5 	.word	0x080046b5
 8004628:	080046b5 	.word	0x080046b5
 800462c:	080046b5 	.word	0x080046b5
 8004630:	0800467d 	.word	0x0800467d
 8004634:	080046b5 	.word	0x080046b5
 8004638:	080046b5 	.word	0x080046b5
 800463c:	080046b5 	.word	0x080046b5
 8004640:	08004699 	.word	0x08004699
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004652:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc fe5c 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 800465e:	e02a      	b.n	80046b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	4618      	mov	r0, r3
 8004676:	f7fc fe4e 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 800467a:	e01c      	b.n	80046b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800468a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fe40 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8004696:	e00e      	b.n	80046b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fe32 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 80046b4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	6839      	ldr	r1, [r7, #0]
 80046be:	4618      	mov	r0, r3
 80046c0:	f003 fe77 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a29      	ldr	r2, [pc, #164]	; (8004770 <HAL_TIM_PWM_Stop_DMA+0x178>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d117      	bne.n	80046fe <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6a1a      	ldr	r2, [r3, #32]
 80046d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10f      	bne.n	80046fe <HAL_TIM_PWM_Stop_DMA+0x106>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6a1a      	ldr	r2, [r3, #32]
 80046e4:	f240 4344 	movw	r3, #1092	; 0x444
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d107      	bne.n	80046fe <HAL_TIM_PWM_Stop_DMA+0x106>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	f241 1311 	movw	r3, #4369	; 0x1111
 8004708:	4013      	ands	r3, r2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10f      	bne.n	800472e <HAL_TIM_PWM_Stop_DMA+0x136>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	f240 4344 	movw	r3, #1092	; 0x444
 8004718:	4013      	ands	r3, r2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d107      	bne.n	800472e <HAL_TIM_PWM_Stop_DMA+0x136>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0201 	bic.w	r2, r2, #1
 800472c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d104      	bne.n	800473e <HAL_TIM_PWM_Stop_DMA+0x146>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800473c:	e013      	b.n	8004766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b04      	cmp	r3, #4
 8004742:	d104      	bne.n	800474e <HAL_TIM_PWM_Stop_DMA+0x156>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800474c:	e00b      	b.n	8004766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d104      	bne.n	800475e <HAL_TIM_PWM_Stop_DMA+0x166>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800475c:	e003      	b.n	8004766 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	40012c00 	.word	0x40012c00

08004774 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e041      	b.n	800480a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d106      	bne.n	80047a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f88d 	bl	80048ba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4619      	mov	r1, r3
 80047b2:	4610      	mov	r0, r2
 80047b4:	f003 f9e2 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_TIM_IC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_DeInit(TIM_HandleTypeDef *htim)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2202      	movs	r2, #2
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a1a      	ldr	r2, [r3, #32]
 8004828:	f241 1311 	movw	r3, #4369	; 0x1111
 800482c:	4013      	ands	r3, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_TIM_IC_DeInit+0x40>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a1a      	ldr	r2, [r3, #32]
 8004838:	f240 4344 	movw	r3, #1092	; 0x444
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d107      	bne.n	8004852 <HAL_TIM_IC_DeInit+0x40>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0201 	bic.w	r2, r2, #1
 8004850:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->IC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_IC_MspDeInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f83a 	bl	80048cc <HAL_TIM_IC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr

080048cc <HAL_TIM_IC_MspDeInit>:
  * @brief  DeInitializes TIM Input Capture MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspDeInit could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <HAL_TIM_IC_Start+0x1a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e013      	b.n	8004920 <HAL_TIM_IC_Start+0x42>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d104      	bne.n	8004908 <HAL_TIM_IC_Start+0x2a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e00b      	b.n	8004920 <HAL_TIM_IC_Start+0x42>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b08      	cmp	r3, #8
 800490c:	d104      	bne.n	8004918 <HAL_TIM_IC_Start+0x3a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e003      	b.n	8004920 <HAL_TIM_IC_Start+0x42>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d104      	bne.n	8004932 <HAL_TIM_IC_Start+0x54>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800492e:	b2db      	uxtb	r3, r3
 8004930:	e013      	b.n	800495a <HAL_TIM_IC_Start+0x7c>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b04      	cmp	r3, #4
 8004936:	d104      	bne.n	8004942 <HAL_TIM_IC_Start+0x64>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800493e:	b2db      	uxtb	r3, r3
 8004940:	e00b      	b.n	800495a <HAL_TIM_IC_Start+0x7c>
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d104      	bne.n	8004952 <HAL_TIM_IC_Start+0x74>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800494e:	b2db      	uxtb	r3, r3
 8004950:	e003      	b.n	800495a <HAL_TIM_IC_Start+0x7c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004958:	b2db      	uxtb	r3, r3
 800495a:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800495c:	7bfb      	ldrb	r3, [r7, #15]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d102      	bne.n	8004968 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004962:	7bbb      	ldrb	r3, [r7, #14]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e06d      	b.n	8004a48 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d104      	bne.n	800497c <HAL_TIM_IC_Start+0x9e>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497a:	e013      	b.n	80049a4 <HAL_TIM_IC_Start+0xc6>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d104      	bne.n	800498c <HAL_TIM_IC_Start+0xae>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2202      	movs	r2, #2
 8004986:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498a:	e00b      	b.n	80049a4 <HAL_TIM_IC_Start+0xc6>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2b08      	cmp	r3, #8
 8004990:	d104      	bne.n	800499c <HAL_TIM_IC_Start+0xbe>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800499a:	e003      	b.n	80049a4 <HAL_TIM_IC_Start+0xc6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d104      	bne.n	80049b4 <HAL_TIM_IC_Start+0xd6>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2202      	movs	r2, #2
 80049ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049b2:	e013      	b.n	80049dc <HAL_TIM_IC_Start+0xfe>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d104      	bne.n	80049c4 <HAL_TIM_IC_Start+0xe6>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049c2:	e00b      	b.n	80049dc <HAL_TIM_IC_Start+0xfe>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d104      	bne.n	80049d4 <HAL_TIM_IC_Start+0xf6>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d2:	e003      	b.n	80049dc <HAL_TIM_IC_Start+0xfe>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2201      	movs	r2, #1
 80049e2:	6839      	ldr	r1, [r7, #0]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f003 fce4 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_TIM_IC_Start+0x172>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d00e      	beq.n	8004a12 <HAL_TIM_IC_Start+0x134>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d009      	beq.n	8004a12 <HAL_TIM_IC_Start+0x134>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <HAL_TIM_IC_Start+0x176>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d004      	beq.n	8004a12 <HAL_TIM_IC_Start+0x134>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a12      	ldr	r2, [pc, #72]	; (8004a58 <HAL_TIM_IC_Start+0x17a>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d111      	bne.n	8004a36 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2b06      	cmp	r3, #6
 8004a22:	d010      	beq.n	8004a46 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	e007      	b.n	8004a46 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0201 	orr.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40012c00 	.word	0x40012c00
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800

08004a5c <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	6839      	ldr	r1, [r7, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f003 fc9f 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6a1a      	ldr	r2, [r3, #32]
 8004a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a7e:	4013      	ands	r3, r2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d10f      	bne.n	8004aa4 <HAL_TIM_IC_Stop+0x48>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6a1a      	ldr	r2, [r3, #32]
 8004a8a:	f240 4344 	movw	r3, #1092	; 0x444
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_TIM_IC_Stop+0x48>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_TIM_IC_Stop+0x58>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab2:	e013      	b.n	8004adc <HAL_TIM_IC_Stop+0x80>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_IC_Stop+0x68>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac2:	e00b      	b.n	8004adc <HAL_TIM_IC_Stop+0x80>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d104      	bne.n	8004ad4 <HAL_TIM_IC_Stop+0x78>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad2:	e003      	b.n	8004adc <HAL_TIM_IC_Stop+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_TIM_IC_Stop+0x90>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aea:	e013      	b.n	8004b14 <HAL_TIM_IC_Stop+0xb8>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d104      	bne.n	8004afc <HAL_TIM_IC_Stop+0xa0>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004afa:	e00b      	b.n	8004b14 <HAL_TIM_IC_Stop+0xb8>
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d104      	bne.n	8004b0c <HAL_TIM_IC_Stop+0xb0>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0a:	e003      	b.n	8004b14 <HAL_TIM_IC_Stop+0xb8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_TIM_IC_Start_IT+0x1a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e013      	b.n	8004b60 <HAL_TIM_IC_Start_IT+0x42>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d104      	bne.n	8004b48 <HAL_TIM_IC_Start_IT+0x2a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	e00b      	b.n	8004b60 <HAL_TIM_IC_Start_IT+0x42>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	d104      	bne.n	8004b58 <HAL_TIM_IC_Start_IT+0x3a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e003      	b.n	8004b60 <HAL_TIM_IC_Start_IT+0x42>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0x54>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	e013      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0x7c>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_IC_Start_IT+0x64>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e00b      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0x7c>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_IC_Start_IT+0x74>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e003      	b.n	8004b9a <HAL_TIM_IC_Start_IT+0x7c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ba2:	7bbb      	ldrb	r3, [r7, #14]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d001      	beq.n	8004bac <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0b2      	b.n	8004d12 <HAL_TIM_IC_Start_IT+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <HAL_TIM_IC_Start_IT+0x9e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bba:	e013      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xc6>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	2b04      	cmp	r3, #4
 8004bc0:	d104      	bne.n	8004bcc <HAL_TIM_IC_Start_IT+0xae>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bca:	e00b      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xc6>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d104      	bne.n	8004bdc <HAL_TIM_IC_Start_IT+0xbe>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bda:	e003      	b.n	8004be4 <HAL_TIM_IC_Start_IT+0xc6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_TIM_IC_Start_IT+0xd6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2202      	movs	r2, #2
 8004bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf2:	e013      	b.n	8004c1c <HAL_TIM_IC_Start_IT+0xfe>
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d104      	bne.n	8004c04 <HAL_TIM_IC_Start_IT+0xe6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c02:	e00b      	b.n	8004c1c <HAL_TIM_IC_Start_IT+0xfe>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d104      	bne.n	8004c14 <HAL_TIM_IC_Start_IT+0xf6>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c12:	e003      	b.n	8004c1c <HAL_TIM_IC_Start_IT+0xfe>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d840      	bhi.n	8004ca4 <HAL_TIM_IC_Start_IT+0x186>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_TIM_IC_Start_IT+0x10a>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004ca5 	.word	0x08004ca5
 8004c34:	08004ca5 	.word	0x08004ca5
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004ca5 	.word	0x08004ca5
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004ca5 	.word	0x08004ca5
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004ca5 	.word	0x08004ca5
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004c93 	.word	0x08004c93
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0202 	orr.w	r2, r2, #2
 8004c6a:	60da      	str	r2, [r3, #12]
      break;
 8004c6c:	e01b      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0204 	orr.w	r2, r2, #4
 8004c7c:	60da      	str	r2, [r3, #12]
      break;
 8004c7e:	e012      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x188>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	60da      	str	r2, [r3, #12]
      break;
 8004c90:	e009      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x188>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0210 	orr.w	r2, r2, #16
 8004ca0:	60da      	str	r2, [r3, #12]
      break;
 8004ca2:	e000      	b.n	8004ca6 <HAL_TIM_IC_Start_IT+0x188>
    }

    default:
      break;
 8004ca4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2201      	movs	r2, #1
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f003 fb7f 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <HAL_TIM_IC_Start_IT+0x1fe>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d00e      	beq.n	8004cdc <HAL_TIM_IC_Start_IT+0x1be>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc6:	d009      	beq.n	8004cdc <HAL_TIM_IC_Start_IT+0x1be>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a14      	ldr	r2, [pc, #80]	; (8004d20 <HAL_TIM_IC_Start_IT+0x202>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d004      	beq.n	8004cdc <HAL_TIM_IC_Start_IT+0x1be>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <HAL_TIM_IC_Start_IT+0x206>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d111      	bne.n	8004d00 <HAL_TIM_IC_Start_IT+0x1e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b06      	cmp	r3, #6
 8004cec:	d010      	beq.n	8004d10 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      __HAL_TIM_ENABLE(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f042 0201 	orr.w	r2, r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	e007      	b.n	8004d10 <HAL_TIM_IC_Start_IT+0x1f2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40012c00 	.word	0x40012c00
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800

08004d28 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b0c      	cmp	r3, #12
 8004d36:	d841      	bhi.n	8004dbc <HAL_TIM_IC_Stop_IT+0x94>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <HAL_TIM_IC_Stop_IT+0x18>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d75 	.word	0x08004d75
 8004d44:	08004dbd 	.word	0x08004dbd
 8004d48:	08004dbd 	.word	0x08004dbd
 8004d4c:	08004dbd 	.word	0x08004dbd
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004dbd 	.word	0x08004dbd
 8004d58:	08004dbd 	.word	0x08004dbd
 8004d5c:	08004dbd 	.word	0x08004dbd
 8004d60:	08004d99 	.word	0x08004d99
 8004d64:	08004dbd 	.word	0x08004dbd
 8004d68:	08004dbd 	.word	0x08004dbd
 8004d6c:	08004dbd 	.word	0x08004dbd
 8004d70:	08004dab 	.word	0x08004dab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0202 	bic.w	r2, r2, #2
 8004d82:	60da      	str	r2, [r3, #12]
      break;
 8004d84:	e01b      	b.n	8004dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0204 	bic.w	r2, r2, #4
 8004d94:	60da      	str	r2, [r3, #12]
      break;
 8004d96:	e012      	b.n	8004dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0208 	bic.w	r2, r2, #8
 8004da6:	60da      	str	r2, [r3, #12]
      break;
 8004da8:	e009      	b.n	8004dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0210 	bic.w	r2, r2, #16
 8004db8:	60da      	str	r2, [r3, #12]
      break;
 8004dba:	e000      	b.n	8004dbe <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 8004dbc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f003 faf3 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a1a      	ldr	r2, [r3, #32]
 8004dd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10f      	bne.n	8004dfc <HAL_TIM_IC_Stop_IT+0xd4>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	f240 4344 	movw	r3, #1092	; 0x444
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d107      	bne.n	8004dfc <HAL_TIM_IC_Stop_IT+0xd4>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 0201 	bic.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d104      	bne.n	8004e0c <HAL_TIM_IC_Stop_IT+0xe4>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e0a:	e013      	b.n	8004e34 <HAL_TIM_IC_Stop_IT+0x10c>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d104      	bne.n	8004e1c <HAL_TIM_IC_Stop_IT+0xf4>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e1a:	e00b      	b.n	8004e34 <HAL_TIM_IC_Stop_IT+0x10c>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d104      	bne.n	8004e2c <HAL_TIM_IC_Stop_IT+0x104>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e2a:	e003      	b.n	8004e34 <HAL_TIM_IC_Stop_IT+0x10c>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d104      	bne.n	8004e44 <HAL_TIM_IC_Stop_IT+0x11c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e42:	e013      	b.n	8004e6c <HAL_TIM_IC_Stop_IT+0x144>
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d104      	bne.n	8004e54 <HAL_TIM_IC_Stop_IT+0x12c>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e52:	e00b      	b.n	8004e6c <HAL_TIM_IC_Stop_IT+0x144>
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d104      	bne.n	8004e64 <HAL_TIM_IC_Stop_IT+0x13c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e62:	e003      	b.n	8004e6c <HAL_TIM_IC_Stop_IT+0x144>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b086      	sub	sp, #24
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <HAL_TIM_IC_Start_DMA+0x1e>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e013      	b.n	8004ebc <HAL_TIM_IC_Start_DMA+0x46>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d104      	bne.n	8004ea4 <HAL_TIM_IC_Start_DMA+0x2e>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	e00b      	b.n	8004ebc <HAL_TIM_IC_Start_DMA+0x46>
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d104      	bne.n	8004eb4 <HAL_TIM_IC_Start_DMA+0x3e>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	e003      	b.n	8004ebc <HAL_TIM_IC_Start_DMA+0x46>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_IC_Start_DMA+0x58>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIM_IC_Start_DMA+0x80>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_IC_Start_DMA+0x68>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIM_IC_Start_DMA+0x80>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_IC_Start_DMA+0x78>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_IC_Start_DMA+0x80>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d002      	beq.n	8004f04 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 8004f04:	2302      	movs	r3, #2
 8004f06:	e130      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d143      	bne.n	8004f96 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 8004f0e:	7dbb      	ldrb	r3, [r7, #22]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d140      	bne.n	8004f96 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_TIM_IC_Start_DMA+0xae>
 8004f1a:	887b      	ldrh	r3, [r7, #2]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e122      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d104      	bne.n	8004f34 <HAL_TIM_IC_Start_DMA+0xbe>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f32:	e013      	b.n	8004f5c <HAL_TIM_IC_Start_DMA+0xe6>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d104      	bne.n	8004f44 <HAL_TIM_IC_Start_DMA+0xce>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f42:	e00b      	b.n	8004f5c <HAL_TIM_IC_Start_DMA+0xe6>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d104      	bne.n	8004f54 <HAL_TIM_IC_Start_DMA+0xde>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f52:	e003      	b.n	8004f5c <HAL_TIM_IC_Start_DMA+0xe6>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <HAL_TIM_IC_Start_DMA+0xf6>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8004f6a:	e016      	b.n	8004f9a <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d104      	bne.n	8004f7c <HAL_TIM_IC_Start_DMA+0x106>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8004f7a:	e00e      	b.n	8004f9a <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d104      	bne.n	8004f8c <HAL_TIM_IC_Start_DMA+0x116>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2202      	movs	r2, #2
 8004f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004f8a:	e006      	b.n	8004f9a <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8004f94:	e001      	b.n	8004f9a <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e0e7      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	f200 80ad 	bhi.w	80050fc <HAL_TIM_IC_Start_DMA+0x286>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <HAL_TIM_IC_Start_DMA+0x132>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	080050fd 	.word	0x080050fd
 8004fb0:	080050fd 	.word	0x080050fd
 8004fb4:	080050fd 	.word	0x080050fd
 8004fb8:	08005025 	.word	0x08005025
 8004fbc:	080050fd 	.word	0x080050fd
 8004fc0:	080050fd 	.word	0x080050fd
 8004fc4:	080050fd 	.word	0x080050fd
 8004fc8:	0800506d 	.word	0x0800506d
 8004fcc:	080050fd 	.word	0x080050fd
 8004fd0:	080050fd 	.word	0x080050fd
 8004fd4:	080050fd 	.word	0x080050fd
 8004fd8:	080050b5 	.word	0x080050b5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe0:	4a64      	ldr	r2, [pc, #400]	; (8005174 <HAL_TIM_IC_Start_DMA+0x2fe>)
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	4a63      	ldr	r2, [pc, #396]	; (8005178 <HAL_TIM_IC_Start_DMA+0x302>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff0:	4a62      	ldr	r2, [pc, #392]	; (800517c <HAL_TIM_IC_Start_DMA+0x306>)
 8004ff2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3334      	adds	r3, #52	; 0x34
 8004ffe:	4619      	mov	r1, r3
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	f7fc f8ee 	bl	80011e4 <HAL_DMA_Start_IT>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_TIM_IC_Start_DMA+0x19c>
      {
        /* Return error status */
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e0ab      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005020:	60da      	str	r2, [r3, #12]
      break;
 8005022:	e06c      	b.n	80050fe <HAL_TIM_IC_Start_DMA+0x288>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005028:	4a52      	ldr	r2, [pc, #328]	; (8005174 <HAL_TIM_IC_Start_DMA+0x2fe>)
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	4a51      	ldr	r2, [pc, #324]	; (8005178 <HAL_TIM_IC_Start_DMA+0x302>)
 8005032:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005038:	4a50      	ldr	r2, [pc, #320]	; (800517c <HAL_TIM_IC_Start_DMA+0x306>)
 800503a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3338      	adds	r3, #56	; 0x38
 8005046:	4619      	mov	r1, r3
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	887b      	ldrh	r3, [r7, #2]
 800504c:	f7fc f8ca 	bl	80011e4 <HAL_DMA_Start_IT>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_TIM_IC_Start_DMA+0x1e4>
      {
        /* Return error status */
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e087      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005068:	60da      	str	r2, [r3, #12]
      break;
 800506a:	e048      	b.n	80050fe <HAL_TIM_IC_Start_DMA+0x288>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	4a40      	ldr	r2, [pc, #256]	; (8005174 <HAL_TIM_IC_Start_DMA+0x2fe>)
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <HAL_TIM_IC_Start_DMA+0x302>)
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	4a3e      	ldr	r2, [pc, #248]	; (800517c <HAL_TIM_IC_Start_DMA+0x306>)
 8005082:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	333c      	adds	r3, #60	; 0x3c
 800508e:	4619      	mov	r1, r3
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	f7fc f8a6 	bl	80011e4 <HAL_DMA_Start_IT>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d001      	beq.n	80050a2 <HAL_TIM_IC_Start_DMA+0x22c>
      {
        /* Return error status */
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e063      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050b0:	60da      	str	r2, [r3, #12]
      break;
 80050b2:	e024      	b.n	80050fe <HAL_TIM_IC_Start_DMA+0x288>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	4a2e      	ldr	r2, [pc, #184]	; (8005174 <HAL_TIM_IC_Start_DMA+0x2fe>)
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	4a2d      	ldr	r2, [pc, #180]	; (8005178 <HAL_TIM_IC_Start_DMA+0x302>)
 80050c2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c8:	4a2c      	ldr	r2, [pc, #176]	; (800517c <HAL_TIM_IC_Start_DMA+0x306>)
 80050ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3340      	adds	r3, #64	; 0x40
 80050d6:	4619      	mov	r1, r3
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	887b      	ldrh	r3, [r7, #2]
 80050dc:	f7fc f882 	bl	80011e4 <HAL_DMA_Start_IT>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <HAL_TIM_IC_Start_DMA+0x274>
      {
        /* Return error status */
        return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e03f      	b.n	800516a <HAL_TIM_IC_Start_DMA+0x2f4>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050f8:	60da      	str	r2, [r3, #12]
      break;
 80050fa:	e000      	b.n	80050fe <HAL_TIM_IC_Start_DMA+0x288>
    }

    default:
      break;
 80050fc:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2201      	movs	r2, #1
 8005104:	68b9      	ldr	r1, [r7, #8]
 8005106:	4618      	mov	r0, r3
 8005108:	f003 f953 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <HAL_TIM_IC_Start_DMA+0x30a>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00e      	beq.n	8005134 <HAL_TIM_IC_Start_DMA+0x2be>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800511e:	d009      	beq.n	8005134 <HAL_TIM_IC_Start_DMA+0x2be>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a17      	ldr	r2, [pc, #92]	; (8005184 <HAL_TIM_IC_Start_DMA+0x30e>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d004      	beq.n	8005134 <HAL_TIM_IC_Start_DMA+0x2be>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_TIM_IC_Start_DMA+0x312>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d111      	bne.n	8005158 <HAL_TIM_IC_Start_DMA+0x2e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	2b06      	cmp	r3, #6
 8005144:	d010      	beq.n	8005168 <HAL_TIM_IC_Start_DMA+0x2f2>
    {
      __HAL_TIM_ENABLE(htim);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0201 	orr.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005156:	e007      	b.n	8005168 <HAL_TIM_IC_Start_DMA+0x2f2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3718      	adds	r7, #24
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	080079b9 	.word	0x080079b9
 8005178:	08007a81 	.word	0x08007a81
 800517c:	08007817 	.word	0x08007817
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800

0800518c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 f907 	bl	80083b2 <TIM_CCxChannelCmd>
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d854      	bhi.n	8005254 <HAL_TIM_IC_Stop_DMA+0xc8>
 80051aa:	a201      	add	r2, pc, #4	; (adr r2, 80051b0 <HAL_TIM_IC_Stop_DMA+0x24>)
 80051ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b0:	080051e5 	.word	0x080051e5
 80051b4:	08005255 	.word	0x08005255
 80051b8:	08005255 	.word	0x08005255
 80051bc:	08005255 	.word	0x08005255
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005255 	.word	0x08005255
 80051c8:	08005255 	.word	0x08005255
 80051cc:	08005255 	.word	0x08005255
 80051d0:	0800521d 	.word	0x0800521d
 80051d4:	08005255 	.word	0x08005255
 80051d8:	08005255 	.word	0x08005255
 80051dc:	08005255 	.word	0x08005255
 80051e0:	08005239 	.word	0x08005239
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051f2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7fc f88c 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80051fe:	e02a      	b.n	8005256 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005214:	4618      	mov	r0, r3
 8005216:	f7fc f87e 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 800521a:	e01c      	b.n	8005256 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005230:	4618      	mov	r0, r3
 8005232:	f7fc f870 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8005236:	e00e      	b.n	8005256 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68da      	ldr	r2, [r3, #12]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005246:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	4618      	mov	r0, r3
 800524e:	f7fc f862 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8005252:	e000      	b.n	8005256 <HAL_TIM_IC_Stop_DMA+0xca>
    }

    default:
      break;
 8005254:	bf00      	nop
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6a1a      	ldr	r2, [r3, #32]
 800525c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005260:	4013      	ands	r3, r2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10f      	bne.n	8005286 <HAL_TIM_IC_Stop_DMA+0xfa>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	f240 4344 	movw	r3, #1092	; 0x444
 8005270:	4013      	ands	r3, r2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d107      	bne.n	8005286 <HAL_TIM_IC_Stop_DMA+0xfa>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0201 	bic.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Stop_DMA+0x10a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005294:	e013      	b.n	80052be <HAL_TIM_IC_Stop_DMA+0x132>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_IC_Stop_DMA+0x11a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a4:	e00b      	b.n	80052be <HAL_TIM_IC_Stop_DMA+0x132>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Stop_DMA+0x12a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b4:	e003      	b.n	80052be <HAL_TIM_IC_Stop_DMA+0x132>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Stop_DMA+0x142>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052cc:	e013      	b.n	80052f6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Stop_DMA+0x152>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052dc:	e00b      	b.n	80052f6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Stop_DMA+0x162>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ec:	e003      	b.n	80052f6 <HAL_TIM_IC_Stop_DMA+0x16a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e041      	b.n	8005398 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f87d 	bl	8005428 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2202      	movs	r2, #2
 8005332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3304      	adds	r3, #4
 800533e:	4619      	mov	r1, r3
 8005340:	4610      	mov	r0, r2
 8005342:	f002 fc1b 	bl	8007b7c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0208 	bic.w	r2, r2, #8
 8005354:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6819      	ldr	r1, [r3, #0]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2201      	movs	r2, #1
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_TIM_OnePulse_DeInit>:
  * @brief  DeInitializes the TIM One Pulse
  * @param  htim TIM One Pulse handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_DeInit(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6a1a      	ldr	r2, [r3, #32]
 80053b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10f      	bne.n	80053e0 <HAL_TIM_OnePulse_DeInit+0x40>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6a1a      	ldr	r2, [r3, #32]
 80053c6:	f240 4344 	movw	r3, #1092	; 0x444
 80053ca:	4013      	ands	r3, r2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_OnePulse_DeInit+0x40>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OnePulse_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_OnePulse_MspDeInit(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f82a 	bl	800543a <HAL_TIM_OnePulse_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	bc80      	pop	{r7}
 8005438:	4770      	bx	lr

0800543a <HAL_TIM_OnePulse_MspDeInit>:
  * @brief  DeInitializes TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspDeInit(TIM_HandleTypeDef *htim)
{
 800543a:	b480      	push	{r7}
 800543c:	b083      	sub	sp, #12
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspDeInit could be implemented in the user file
   */
}
 8005442:	bf00      	nop
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <HAL_TIM_OnePulse_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005464:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800546c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005474:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005476:	7bfb      	ldrb	r3, [r7, #15]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_TIM_OnePulse_Start+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b01      	cmp	r3, #1
 8005480:	d105      	bne.n	800548e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005482:	7b7b      	ldrb	r3, [r7, #13]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d102      	bne.n	800548e <HAL_TIM_OnePulse_Start+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005488:	7b3b      	ldrb	r3, [r7, #12]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d001      	beq.n	8005492 <HAL_TIM_OnePulse_Start+0x46>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e02b      	b.n	80054ea <HAL_TIM_OnePulse_Start+0x9e>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2202      	movs	r2, #2
 80054a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2202      	movs	r2, #2
 80054ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be enabled together

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2201      	movs	r2, #1
 80054b8:	2100      	movs	r1, #0
 80054ba:	4618      	mov	r0, r3
 80054bc:	f002 ff79 	bl	80083b2 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2201      	movs	r2, #1
 80054c6:	2104      	movs	r1, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 ff72 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a08      	ldr	r2, [pc, #32]	; (80054f4 <HAL_TIM_OnePulse_Start+0xa8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_OnePulse_Start+0x9c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00

080054f8 <HAL_TIM_OnePulse_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f002 ff51 	bl	80083b2 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2200      	movs	r2, #0
 8005516:	2104      	movs	r1, #4
 8005518:	4618      	mov	r0, r3
 800551a:	f002 ff4a 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a24      	ldr	r2, [pc, #144]	; (80055b4 <HAL_TIM_OnePulse_Stop+0xbc>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d117      	bne.n	8005558 <HAL_TIM_OnePulse_Stop+0x60>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10f      	bne.n	8005558 <HAL_TIM_OnePulse_Stop+0x60>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	f240 4344 	movw	r3, #1092	; 0x444
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_TIM_OnePulse_Stop+0x60>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10f      	bne.n	8005588 <HAL_TIM_OnePulse_Stop+0x90>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	f240 4344 	movw	r3, #1092	; 0x444
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <HAL_TIM_OnePulse_Stop+0x90>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 0201 	bic.w	r2, r2, #1
 8005586:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	40012c00 	.word	0x40012c00

080055b8 <HAL_TIM_OnePulse_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055e0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d108      	bne.n	80055fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d105      	bne.n	80055fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ee:	7b7b      	ldrb	r3, [r7, #13]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d102      	bne.n	80055fa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055f4:	7b3b      	ldrb	r3, [r7, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d001      	beq.n	80055fe <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e03b      	b.n	8005676 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2202      	movs	r2, #2
 8005602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2202      	movs	r2, #2
 800561a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0202 	orr.w	r2, r2, #2
 800562c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68da      	ldr	r2, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f042 0204 	orr.w	r2, r2, #4
 800563c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f002 feb3 	bl	80083b2 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	2104      	movs	r1, #4
 8005654:	4618      	mov	r0, r3
 8005656:	f002 feac 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a08      	ldr	r2, [pc, #32]	; (8005680 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d107      	bne.n	8005674 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005672:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00

08005684 <HAL_TIM_OnePulse_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0202 	bic.w	r2, r2, #2
 800569c:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0204 	bic.w	r2, r2, #4
 80056ac:	60da      	str	r2, [r3, #12]
  /* Disable the Capture compare and the Input Capture channels
  (in the OPM Mode the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2)
  if TIM_CHANNEL_1 is used as output, the TIM_CHANNEL_2 will be used as input and
  if TIM_CHANNEL_1 is used as input, the TIM_CHANNEL_2 will be used as output
  in all combinations, the TIM_CHANNEL_1 and TIM_CHANNEL_2 should be disabled together */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2200      	movs	r2, #0
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 fe7b 	bl	80083b2 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2200      	movs	r2, #0
 80056c2:	2104      	movs	r1, #4
 80056c4:	4618      	mov	r0, r3
 80056c6:	f002 fe74 	bl	80083b2 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a24      	ldr	r2, [pc, #144]	; (8005760 <HAL_TIM_OnePulse_Stop_IT+0xdc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d117      	bne.n	8005704 <HAL_TIM_OnePulse_Stop_IT+0x80>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a1a      	ldr	r2, [r3, #32]
 80056da:	f241 1311 	movw	r3, #4369	; 0x1111
 80056de:	4013      	ands	r3, r2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10f      	bne.n	8005704 <HAL_TIM_OnePulse_Stop_IT+0x80>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1a      	ldr	r2, [r3, #32]
 80056ea:	f240 4344 	movw	r3, #1092	; 0x444
 80056ee:	4013      	ands	r3, r2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_OnePulse_Stop_IT+0x80>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005702:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6a1a      	ldr	r2, [r3, #32]
 800570a:	f241 1311 	movw	r3, #4369	; 0x1111
 800570e:	4013      	ands	r3, r2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10f      	bne.n	8005734 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a1a      	ldr	r2, [r3, #32]
 800571a:	f240 4344 	movw	r3, #1092	; 0x444
 800571e:	4013      	ands	r3, r2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d107      	bne.n	8005734 <HAL_TIM_OnePulse_Stop_IT+0xb0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	40012c00 	.word	0x40012c00

08005764 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e093      	b.n	80058a0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8cf 	bl	8005930 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2202      	movs	r2, #2
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057a8:	f023 0307 	bic.w	r3, r3, #7
 80057ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	3304      	adds	r3, #4
 80057b6:	4619      	mov	r1, r3
 80057b8:	4610      	mov	r0, r2
 80057ba:	f002 f9df 	bl	8007b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a1b      	ldr	r3, [r3, #32]
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	4313      	orrs	r3, r2
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005804:	f023 030c 	bic.w	r3, r3, #12
 8005808:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	4313      	orrs	r3, r2
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	011a      	lsls	r2, r3, #4
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	031b      	lsls	r3, r3, #12
 8005834:	4313      	orrs	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005842:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685a      	ldr	r2, [r3, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	011b      	lsls	r3, r3, #4
 800584e:	4313      	orrs	r3, r2
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6a1a      	ldr	r2, [r3, #32]
 80058be:	f241 1311 	movw	r3, #4369	; 0x1111
 80058c2:	4013      	ands	r3, r2
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10f      	bne.n	80058e8 <HAL_TIM_Encoder_DeInit+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a1a      	ldr	r2, [r3, #32]
 80058ce:	f240 4344 	movw	r3, #1092	; 0x444
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_Encoder_DeInit+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 0201 	bic.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f82a 	bl	8005942 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	bc80      	pop	{r7}
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005964:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800596c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005974:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800597c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d110      	bne.n	80059a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005984:	7bfb      	ldrb	r3, [r7, #15]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d102      	bne.n	8005990 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800598a:	7b7b      	ldrb	r3, [r7, #13]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d001      	beq.n	8005994 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e069      	b.n	8005a68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2202      	movs	r2, #2
 8005998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a4:	e031      	b.n	8005a0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d110      	bne.n	80059ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d102      	bne.n	80059b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059b2:	7b3b      	ldrb	r3, [r7, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d001      	beq.n	80059bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e055      	b.n	8005a68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	e01d      	b.n	8005a0a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d108      	bne.n	80059e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d105      	bne.n	80059e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d102      	bne.n	80059e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059e0:	7b3b      	ldrb	r3, [r7, #12]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d001      	beq.n	80059ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e03e      	b.n	8005a68 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2202      	movs	r2, #2
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2202      	movs	r2, #2
 80059f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_TIM_Encoder_Start+0xc4>
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d008      	beq.n	8005a28 <HAL_TIM_Encoder_Start+0xd4>
 8005a16:	e00f      	b.n	8005a38 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 fcc6 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005a26:	e016      	b.n	8005a56 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4618      	mov	r0, r3
 8005a32:	f002 fcbe 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005a36:	e00e      	b.n	8005a56 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f002 fcb6 	bl	80083b2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	2104      	movs	r1, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f002 fcaf 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005a54:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d003      	beq.n	8005a88 <HAL_TIM_Encoder_Stop+0x18>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d008      	beq.n	8005a98 <HAL_TIM_Encoder_Stop+0x28>
 8005a86:	e00f      	b.n	8005aa8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f002 fc8e 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005a96:	e016      	b.n	8005ac6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2104      	movs	r1, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f002 fc86 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005aa6:	e00e      	b.n	8005ac6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f002 fc7e 	bl	80083b2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2104      	movs	r1, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 fc77 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8005ac4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6a1a      	ldr	r2, [r3, #32]
 8005acc:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10f      	bne.n	8005af6 <HAL_TIM_Encoder_Stop+0x86>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a1a      	ldr	r2, [r3, #32]
 8005adc:	f240 4344 	movw	r3, #1092	; 0x444
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d107      	bne.n	8005af6 <HAL_TIM_Encoder_Stop+0x86>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 0201 	bic.w	r2, r2, #1
 8005af4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_TIM_Encoder_Stop+0x92>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d138      	bne.n	8005b74 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_Encoder_Stop+0xa2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b10:	e013      	b.n	8005b3a <HAL_TIM_Encoder_Stop+0xca>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_Encoder_Stop+0xb2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b20:	e00b      	b.n	8005b3a <HAL_TIM_Encoder_Stop+0xca>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_Encoder_Stop+0xc2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b30:	e003      	b.n	8005b3a <HAL_TIM_Encoder_Stop+0xca>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_Encoder_Stop+0xda>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b48:	e024      	b.n	8005b94 <HAL_TIM_Encoder_Stop+0x124>
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d104      	bne.n	8005b5a <HAL_TIM_Encoder_Stop+0xea>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b58:	e01c      	b.n	8005b94 <HAL_TIM_Encoder_Stop+0x124>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d104      	bne.n	8005b6a <HAL_TIM_Encoder_Stop+0xfa>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b68:	e014      	b.n	8005b94 <HAL_TIM_Encoder_Stop+0x124>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b72:	e00f      	b.n	8005b94 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bae:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bb6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bbe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005bc6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d110      	bne.n	8005bf0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bce:	7bfb      	ldrb	r3, [r7, #15]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d102      	bne.n	8005bda <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bd4:	7b7b      	ldrb	r3, [r7, #13]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d001      	beq.n	8005bde <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e089      	b.n	8005cf2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2202      	movs	r2, #2
 8005be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bee:	e031      	b.n	8005c54 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d110      	bne.n	8005c18 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d102      	bne.n	8005c02 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bfc:	7b3b      	ldrb	r3, [r7, #12]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d001      	beq.n	8005c06 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e075      	b.n	8005cf2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c16:	e01d      	b.n	8005c54 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d108      	bne.n	8005c30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d105      	bne.n	8005c30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c24:	7b7b      	ldrb	r3, [r7, #13]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d102      	bne.n	8005c30 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c2a:	7b3b      	ldrb	r3, [r7, #12]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d001      	beq.n	8005c34 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e05e      	b.n	8005cf2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2202      	movs	r2, #2
 8005c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d010      	beq.n	8005c82 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c60:	e01f      	b.n	8005ca2 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f002 fba1 	bl	80083b2 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0202 	orr.w	r2, r2, #2
 8005c7e:	60da      	str	r2, [r3, #12]
      break;
 8005c80:	e02e      	b.n	8005ce0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2201      	movs	r2, #1
 8005c88:	2104      	movs	r1, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f002 fb91 	bl	80083b2 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68da      	ldr	r2, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0204 	orr.w	r2, r2, #4
 8005c9e:	60da      	str	r2, [r3, #12]
      break;
 8005ca0:	e01e      	b.n	8005ce0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	2100      	movs	r1, #0
 8005caa:	4618      	mov	r0, r3
 8005cac:	f002 fb81 	bl	80083b2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	2104      	movs	r1, #4
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f002 fb7a 	bl	80083b2 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0202 	orr.w	r2, r2, #2
 8005ccc:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0204 	orr.w	r2, r2, #4
 8005cdc:	60da      	str	r2, [r3, #12]
      break;
 8005cde:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10f      	bne.n	8005d2a <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2100      	movs	r1, #0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f002 fb4d 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0202 	bic.w	r2, r2, #2
 8005d26:	60da      	str	r2, [r3, #12]
 8005d28:	e030      	b.n	8005d8c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d10f      	bne.n	8005d50 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2104      	movs	r1, #4
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f002 fb3a 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0204 	bic.w	r2, r2, #4
 8005d4c:	60da      	str	r2, [r3, #12]
 8005d4e:	e01d      	b.n	8005d8c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f002 fb2a 	bl	80083b2 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	2104      	movs	r1, #4
 8005d66:	4618      	mov	r0, r3
 8005d68:	f002 fb23 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0202 	bic.w	r2, r2, #2
 8005d7a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0204 	bic.w	r2, r2, #4
 8005d8a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a1a      	ldr	r2, [r3, #32]
 8005d92:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d96:	4013      	ands	r3, r2
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	f240 4344 	movw	r3, #1092	; 0x444
 8005da6:	4013      	ands	r3, r2
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d107      	bne.n	8005dbc <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0201 	bic.w	r2, r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_TIM_Encoder_Stop_IT+0xce>
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d138      	bne.n	8005e3a <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d104      	bne.n	8005dd8 <HAL_TIM_Encoder_Stop_IT+0xde>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dd6:	e013      	b.n	8005e00 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d104      	bne.n	8005de8 <HAL_TIM_Encoder_Stop_IT+0xee>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005de6:	e00b      	b.n	8005e00 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d104      	bne.n	8005df8 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005df6:	e003      	b.n	8005e00 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d104      	bne.n	8005e10 <HAL_TIM_Encoder_Stop_IT+0x116>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0e:	e024      	b.n	8005e5a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d104      	bne.n	8005e20 <HAL_TIM_Encoder_Stop_IT+0x126>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e1e:	e01c      	b.n	8005e5a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d104      	bne.n	8005e30 <HAL_TIM_Encoder_Stop_IT+0x136>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e2e:	e014      	b.n	8005e5a <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e38:	e00f      	b.n	8005e5a <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3708      	adds	r7, #8
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_TIM_Encoder_Start_DMA>:
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData1,
                                            uint32_t *pData2, uint16_t Length)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e78:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e80:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e88:	757b      	strb	r3, [r7, #21]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e90:	753b      	strb	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d120      	bne.n	8005eda <HAL_TIM_Encoder_Start_DMA+0x76>
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005e98:	7dfb      	ldrb	r3, [r7, #23]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d002      	beq.n	8005ea4 <HAL_TIM_Encoder_Start_DMA+0x40>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005e9e:	7d7b      	ldrb	r3, [r7, #21]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIM_Encoder_Start_DMA+0x44>
    {
      return HAL_BUSY;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e147      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d113      	bne.n	8005ed6 <HAL_TIM_Encoder_Start_DMA+0x72>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 8005eae:	7d7b      	ldrb	r3, [r7, #21]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <HAL_TIM_Encoder_Start_DMA+0x72>
    {
      if ((pData1 == NULL) && (Length > 0U))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <HAL_TIM_Encoder_Start_DMA+0x60>
 8005eba:	8c3b      	ldrh	r3, [r7, #32]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d001      	beq.n	8005ec4 <HAL_TIM_Encoder_Start_DMA+0x60>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e139      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if ((pData1 == NULL) && (Length > 0U))
 8005ed4:	e05d      	b.n	8005f92 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e12e      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d120      	bne.n	8005f22 <HAL_TIM_Encoder_Start_DMA+0xbe>
  {
    if ((channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005ee0:	7dbb      	ldrb	r3, [r7, #22]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d002      	beq.n	8005eec <HAL_TIM_Encoder_Start_DMA+0x88>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005ee6:	7d3b      	ldrb	r3, [r7, #20]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d101      	bne.n	8005ef0 <HAL_TIM_Encoder_Start_DMA+0x8c>
    {
      return HAL_BUSY;
 8005eec:	2302      	movs	r3, #2
 8005eee:	e123      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
    else if ((channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8005ef0:	7dbb      	ldrb	r3, [r7, #22]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d113      	bne.n	8005f1e <HAL_TIM_Encoder_Start_DMA+0xba>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8005ef6:	7d3b      	ldrb	r3, [r7, #20]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d110      	bne.n	8005f1e <HAL_TIM_Encoder_Start_DMA+0xba>
    {
      if ((pData2 == NULL) && (Length > 0U))
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d104      	bne.n	8005f0c <HAL_TIM_Encoder_Start_DMA+0xa8>
 8005f02:	8c3b      	ldrh	r3, [r7, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_TIM_Encoder_Start_DMA+0xa8>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e115      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      if ((pData2 == NULL) && (Length > 0U))
 8005f1c:	e039      	b.n	8005f92 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e10a      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
  }
  else
  {
    if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d008      	beq.n	8005f3a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f28:	7dbb      	ldrb	r3, [r7, #22]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d005      	beq.n	8005f3a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8005f2e:	7d7b      	ldrb	r3, [r7, #21]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d002      	beq.n	8005f3a <HAL_TIM_Encoder_Start_DMA+0xd6>
        || (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_BUSY))
 8005f34:	7d3b      	ldrb	r3, [r7, #20]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Encoder_Start_DMA+0xda>
    {
      return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e0fc      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
    else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d124      	bne.n	8005f8e <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (channel_2_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f44:	7dbb      	ldrb	r3, [r7, #22]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d121      	bne.n	8005f8e <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 8005f4a:	7d7b      	ldrb	r3, [r7, #21]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d11e      	bne.n	8005f8e <HAL_TIM_Encoder_Start_DMA+0x12a>
             && (complementary_channel_2_state == HAL_TIM_CHANNEL_STATE_READY))
 8005f50:	7d3b      	ldrb	r3, [r7, #20]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d11b      	bne.n	8005f8e <HAL_TIM_Encoder_Start_DMA+0x12a>
    {
      if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d002      	beq.n	8005f62 <HAL_TIM_Encoder_Start_DMA+0xfe>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d104      	bne.n	8005f6c <HAL_TIM_Encoder_Start_DMA+0x108>
 8005f62:	8c3b      	ldrh	r3, [r7, #32]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <HAL_TIM_Encoder_Start_DMA+0x108>
      {
        return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e0e5      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      }
      else
      {
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      if ((((pData1 == NULL) || (pData2 == NULL))) && (Length > 0U))
 8005f8c:	e001      	b.n	8005f92 <HAL_TIM_Encoder_Start_DMA+0x12e>
      }
    }
    else
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e0d2      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
    }
  }

  switch (Channel)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	2b3c      	cmp	r3, #60	; 0x3c
 8005f96:	d070      	beq.n	800607a <HAL_TIM_Encoder_Start_DMA+0x216>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	2b3c      	cmp	r3, #60	; 0x3c
 8005f9c:	f200 80ca 	bhi.w	8006134 <HAL_TIM_Encoder_Start_DMA+0x2d0>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <HAL_TIM_Encoder_Start_DMA+0x14a>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d033      	beq.n	8006014 <HAL_TIM_Encoder_Start_DMA+0x1b0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
      break;
    }

    default:
      break;
 8005fac:	e0c2      	b.n	8006134 <HAL_TIM_Encoder_Start_DMA+0x2d0>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb2:	4a63      	ldr	r2, [pc, #396]	; (8006140 <HAL_TIM_Encoder_Start_DMA+0x2dc>)
 8005fb4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	4a62      	ldr	r2, [pc, #392]	; (8006144 <HAL_TIM_Encoder_Start_DMA+0x2e0>)
 8005fbc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	4a61      	ldr	r2, [pc, #388]	; (8006148 <HAL_TIM_Encoder_Start_DMA+0x2e4>)
 8005fc4:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3334      	adds	r3, #52	; 0x34
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	8c3b      	ldrh	r3, [r7, #32]
 8005fd6:	f7fb f905 	bl	80011e4 <HAL_DMA_Start_IT>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_TIM_Encoder_Start_DMA+0x180>
        return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e0a9      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2201      	movs	r2, #1
 800600a:	2100      	movs	r1, #0
 800600c:	4618      	mov	r0, r3
 800600e:	f002 f9d0 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8006012:	e090      	b.n	8006136 <HAL_TIM_Encoder_Start_DMA+0x2d2>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <HAL_TIM_Encoder_Start_DMA+0x2dc>)
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	4a48      	ldr	r2, [pc, #288]	; (8006144 <HAL_TIM_Encoder_Start_DMA+0x2e0>)
 8006022:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006028:	4a47      	ldr	r2, [pc, #284]	; (8006148 <HAL_TIM_Encoder_Start_DMA+0x2e4>)
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3338      	adds	r3, #56	; 0x38
 8006036:	4619      	mov	r1, r3
 8006038:	683a      	ldr	r2, [r7, #0]
 800603a:	8c3b      	ldrh	r3, [r7, #32]
 800603c:	f7fb f8d2 	bl	80011e4 <HAL_DMA_Start_IT>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_TIM_Encoder_Start_DMA+0x1e6>
        return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e076      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006058:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE(htim);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f042 0201 	orr.w	r2, r2, #1
 8006068:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2201      	movs	r2, #1
 8006070:	2104      	movs	r1, #4
 8006072:	4618      	mov	r0, r3
 8006074:	f002 f99d 	bl	80083b2 <TIM_CCxChannelCmd>
      break;
 8006078:	e05d      	b.n	8006136 <HAL_TIM_Encoder_Start_DMA+0x2d2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	4a30      	ldr	r2, [pc, #192]	; (8006140 <HAL_TIM_Encoder_Start_DMA+0x2dc>)
 8006080:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	4a2f      	ldr	r2, [pc, #188]	; (8006144 <HAL_TIM_Encoder_Start_DMA+0x2e0>)
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	4a2e      	ldr	r2, [pc, #184]	; (8006148 <HAL_TIM_Encoder_Start_DMA+0x2e4>)
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData1, Length) != HAL_OK)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3334      	adds	r3, #52	; 0x34
 800609c:	4619      	mov	r1, r3
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	8c3b      	ldrh	r3, [r7, #32]
 80060a2:	f7fb f89f 	bl	80011e4 <HAL_DMA_Start_IT>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_TIM_Encoder_Start_DMA+0x24c>
        return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e043      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_TIM_Encoder_Start_DMA+0x2dc>)
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	4a21      	ldr	r2, [pc, #132]	; (8006144 <HAL_TIM_Encoder_Start_DMA+0x2e0>)
 80060be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c4:	4a20      	ldr	r2, [pc, #128]	; (8006148 <HAL_TIM_Encoder_Start_DMA+0x2e4>)
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData2, Length) != HAL_OK)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3338      	adds	r3, #56	; 0x38
 80060d2:	4619      	mov	r1, r3
 80060d4:	683a      	ldr	r2, [r7, #0]
 80060d6:	8c3b      	ldrh	r3, [r7, #32]
 80060d8:	f7fb f884 	bl	80011e4 <HAL_DMA_Start_IT>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_TIM_Encoder_Start_DMA+0x282>
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e028      	b.n	8006138 <HAL_TIM_Encoder_Start_DMA+0x2d4>
      __HAL_TIM_ENABLE(htim);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2201      	movs	r2, #1
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f002 f957 	bl	80083b2 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2201      	movs	r2, #1
 800610a:	2104      	movs	r1, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f002 f950 	bl	80083b2 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006120:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006130:	60da      	str	r2, [r3, #12]
      break;
 8006132:	e000      	b.n	8006136 <HAL_TIM_Encoder_Start_DMA+0x2d2>
      break;
 8006134:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	080079b9 	.word	0x080079b9
 8006144:	08007a81 	.word	0x08007a81
 8006148:	08007817 	.word	0x08007817

0800614c <HAL_TIM_Encoder_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d114      	bne.n	8006186 <HAL_TIM_Encoder_Stop_DMA+0x3a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2200      	movs	r2, #0
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f002 f924 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006178:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb f8c9 	bl	8001316 <HAL_DMA_Abort_IT>
 8006184:	e03f      	b.n	8006206 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d114      	bne.n	80061b6 <HAL_TIM_Encoder_Stop_DMA+0x6a>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2200      	movs	r2, #0
 8006192:	2104      	movs	r1, #4
 8006194:	4618      	mov	r0, r3
 8006196:	f002 f90c 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a8:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fb f8b1 	bl	8001316 <HAL_DMA_Abort_IT>
 80061b4:	e027      	b.n	8006206 <HAL_TIM_Encoder_Stop_DMA+0xba>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2200      	movs	r2, #0
 80061bc:	2100      	movs	r1, #0
 80061be:	4618      	mov	r0, r3
 80061c0:	f002 f8f7 	bl	80083b2 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2200      	movs	r2, #0
 80061ca:	2104      	movs	r1, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f002 f8f0 	bl	80083b2 <TIM_CCxChannelCmd>

    /* Disable the capture compare DMA Request 1 and 2 */
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80061e0:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f0:	60da      	str	r2, [r3, #12]
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fb f88d 	bl	8001316 <HAL_DMA_Abort_IT>
    (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006200:	4618      	mov	r0, r3
 8006202:	f7fb f888 	bl	8001316 <HAL_DMA_Abort_IT>
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a1a      	ldr	r2, [r3, #32]
 800620c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10f      	bne.n	8006236 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a1a      	ldr	r2, [r3, #32]
 800621c:	f240 4344 	movw	r3, #1092	; 0x444
 8006220:	4013      	ands	r3, r2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d107      	bne.n	8006236 <HAL_TIM_Encoder_Stop_DMA+0xea>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <HAL_TIM_Encoder_Stop_DMA+0xf6>
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2b04      	cmp	r3, #4
 8006240:	d138      	bne.n	80062b4 <HAL_TIM_Encoder_Stop_DMA+0x168>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d104      	bne.n	8006252 <HAL_TIM_Encoder_Stop_DMA+0x106>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006250:	e013      	b.n	800627a <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d104      	bne.n	8006262 <HAL_TIM_Encoder_Stop_DMA+0x116>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006260:	e00b      	b.n	800627a <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b08      	cmp	r3, #8
 8006266:	d104      	bne.n	8006272 <HAL_TIM_Encoder_Stop_DMA+0x126>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006270:	e003      	b.n	800627a <HAL_TIM_Encoder_Stop_DMA+0x12e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d104      	bne.n	800628a <HAL_TIM_Encoder_Stop_DMA+0x13e>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006288:	e024      	b.n	80062d4 <HAL_TIM_Encoder_Stop_DMA+0x188>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b04      	cmp	r3, #4
 800628e:	d104      	bne.n	800629a <HAL_TIM_Encoder_Stop_DMA+0x14e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006298:	e01c      	b.n	80062d4 <HAL_TIM_Encoder_Stop_DMA+0x188>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b08      	cmp	r3, #8
 800629e:	d104      	bne.n	80062aa <HAL_TIM_Encoder_Stop_DMA+0x15e>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a8:	e014      	b.n	80062d4 <HAL_TIM_Encoder_Stop_DMA+0x188>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062b2:	e00f      	b.n	80062d4 <HAL_TIM_Encoder_Stop_DMA+0x188>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b082      	sub	sp, #8
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d122      	bne.n	800633a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d11b      	bne.n	800633a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f06f 0202 	mvn.w	r2, #2
 800630a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f001 f9ab 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 8006326:	e005      	b.n	8006334 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 f99e 	bl	800766a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 f9b6 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b04      	cmp	r3, #4
 8006346:	d122      	bne.n	800638e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b04      	cmp	r3, #4
 8006354:	d11b      	bne.n	800638e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f06f 0204 	mvn.w	r2, #4
 800635e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f001 f981 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 800637a:	e005      	b.n	8006388 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f974 	bl	800766a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f001 f98c 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b08      	cmp	r3, #8
 800639a:	d122      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0308 	and.w	r3, r3, #8
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d11b      	bne.n	80063e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0208 	mvn.w	r2, #8
 80063b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2204      	movs	r2, #4
 80063b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	f003 0303 	and.w	r3, r3, #3
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f957 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 80063ce:	e005      	b.n	80063dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 f94a 	bl	800766a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f001 f962 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691b      	ldr	r3, [r3, #16]
 80063e8:	f003 0310 	and.w	r3, r3, #16
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d122      	bne.n	8006436 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	2b10      	cmp	r3, #16
 80063fc:	d11b      	bne.n	8006436 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f06f 0210 	mvn.w	r2, #16
 8006406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2208      	movs	r2, #8
 800640c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	69db      	ldr	r3, [r3, #28]
 8006414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 f92d 	bl	800767c <HAL_TIM_IC_CaptureCallback>
 8006422:	e005      	b.n	8006430 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f001 f920 	bl	800766a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f001 f938 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b01      	cmp	r3, #1
 8006442:	d10e      	bne.n	8006462 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b01      	cmp	r3, #1
 8006450:	d107      	bne.n	8006462 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f06f 0201 	mvn.w	r2, #1
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7f9 fff5 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b80      	cmp	r3, #128	; 0x80
 800646e:	d10e      	bne.n	800648e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800647a:	2b80      	cmp	r3, #128	; 0x80
 800647c:	d107      	bne.n	800648e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f004 f801 	bl	800a490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b40      	cmp	r3, #64	; 0x40
 800649a:	d10e      	bne.n	80064ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a6:	2b40      	cmp	r3, #64	; 0x40
 80064a8:	d107      	bne.n	80064ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80064b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f905 	bl	80076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d10e      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f06f 0220 	mvn.w	r2, #32
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f003 ffc3 	bl	800a46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006504:	2302      	movs	r3, #2
 8006506:	e045      	b.n	8006594 <HAL_TIM_OC_ConfigChannel+0xa6>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2b0c      	cmp	r3, #12
 8006514:	d838      	bhi.n	8006588 <HAL_TIM_OC_ConfigChannel+0x9a>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <HAL_TIM_OC_ConfigChannel+0x2e>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006551 	.word	0x08006551
 8006520:	08006589 	.word	0x08006589
 8006524:	08006589 	.word	0x08006589
 8006528:	08006589 	.word	0x08006589
 800652c:	0800655f 	.word	0x0800655f
 8006530:	08006589 	.word	0x08006589
 8006534:	08006589 	.word	0x08006589
 8006538:	08006589 	.word	0x08006589
 800653c:	0800656d 	.word	0x0800656d
 8006540:	08006589 	.word	0x08006589
 8006544:	08006589 	.word	0x08006589
 8006548:	08006589 	.word	0x08006589
 800654c:	0800657b 	.word	0x0800657b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68b9      	ldr	r1, [r7, #8]
 8006556:	4618      	mov	r0, r3
 8006558:	f001 fb72 	bl	8007c40 <TIM_OC1_SetConfig>
      break;
 800655c:	e015      	b.n	800658a <HAL_TIM_OC_ConfigChannel+0x9c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68b9      	ldr	r1, [r7, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f001 fbd1 	bl	8007d0c <TIM_OC2_SetConfig>
      break;
 800656a:	e00e      	b.n	800658a <HAL_TIM_OC_ConfigChannel+0x9c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68b9      	ldr	r1, [r7, #8]
 8006572:	4618      	mov	r0, r3
 8006574:	f001 fc34 	bl	8007de0 <TIM_OC3_SetConfig>
      break;
 8006578:	e007      	b.n	800658a <HAL_TIM_OC_ConfigChannel+0x9c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68b9      	ldr	r1, [r7, #8]
 8006580:	4618      	mov	r0, r3
 8006582:	f001 fc97 	bl	8007eb4 <TIM_OC4_SetConfig>
      break;
 8006586:	e000      	b.n	800658a <HAL_TIM_OC_ConfigChannel+0x9c>
    }

    default:
      break;
 8006588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_IC_ConfigChannel+0x1a>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e082      	b.n	80066bc <HAL_TIM_IC_ConfigChannel+0x120>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d11b      	bne.n	80065fc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6818      	ldr	r0, [r3, #0]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	6819      	ldr	r1, [r3, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f001 fd4a 	bl	800806c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 020c 	bic.w	r2, r2, #12
 80065e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6999      	ldr	r1, [r3, #24]
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	619a      	str	r2, [r3, #24]
 80065fa:	e05a      	b.n	80066b2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d11c      	bne.n	800663c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6819      	ldr	r1, [r3, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	685a      	ldr	r2, [r3, #4]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f001 fdb3 	bl	800817c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	699a      	ldr	r2, [r3, #24]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006624:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6999      	ldr	r1, [r3, #24]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	021a      	lsls	r2, r3, #8
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	619a      	str	r2, [r3, #24]
 800663a:	e03a      	b.n	80066b2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b08      	cmp	r3, #8
 8006640:	d11b      	bne.n	800667a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6818      	ldr	r0, [r3, #0]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f001 fdfe 	bl	8008252 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f022 020c 	bic.w	r2, r2, #12
 8006664:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	430a      	orrs	r2, r1
 8006676:	61da      	str	r2, [r3, #28]
 8006678:	e01b      	b.n	80066b2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	f001 fe1d 	bl	80082c8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800669c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69d9      	ldr	r1, [r3, #28]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	021a      	lsls	r2, r3, #8
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066da:	2302      	movs	r3, #2
 80066dc:	e0ac      	b.n	8006838 <HAL_TIM_PWM_ConfigChannel+0x174>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	f200 809f 	bhi.w	800682c <HAL_TIM_PWM_ConfigChannel+0x168>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006729 	.word	0x08006729
 80066f8:	0800682d 	.word	0x0800682d
 80066fc:	0800682d 	.word	0x0800682d
 8006700:	0800682d 	.word	0x0800682d
 8006704:	08006769 	.word	0x08006769
 8006708:	0800682d 	.word	0x0800682d
 800670c:	0800682d 	.word	0x0800682d
 8006710:	0800682d 	.word	0x0800682d
 8006714:	080067ab 	.word	0x080067ab
 8006718:	0800682d 	.word	0x0800682d
 800671c:	0800682d 	.word	0x0800682d
 8006720:	0800682d 	.word	0x0800682d
 8006724:	080067eb 	.word	0x080067eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f001 fa86 	bl	8007c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	699a      	ldr	r2, [r3, #24]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	699a      	ldr	r2, [r3, #24]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6999      	ldr	r1, [r3, #24]
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	619a      	str	r2, [r3, #24]
      break;
 8006766:	e062      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f001 facc 	bl	8007d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699a      	ldr	r2, [r3, #24]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	619a      	str	r2, [r3, #24]
      break;
 80067a8:	e041      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f001 fb15 	bl	8007de0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	69da      	ldr	r2, [r3, #28]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f042 0208 	orr.w	r2, r2, #8
 80067c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0204 	bic.w	r2, r2, #4
 80067d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	69d9      	ldr	r1, [r3, #28]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691a      	ldr	r2, [r3, #16]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	61da      	str	r2, [r3, #28]
      break;
 80067e8:	e021      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f001 fb5f 	bl	8007eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69da      	ldr	r2, [r3, #28]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69d9      	ldr	r1, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	021a      	lsls	r2, r3, #8
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	430a      	orrs	r2, r1
 8006828:	61da      	str	r2, [r3, #28]
      break;
 800682a:	e000      	b.n	800682e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800682c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_OnePulse_ConfigChannel>:
  *        without taking in account the comparison.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_ConfigChannel(TIM_HandleTypeDef *htim,  TIM_OnePulse_InitTypeDef *sConfig,
                                                 uint32_t OutputChannel,  uint32_t InputChannel)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b08c      	sub	sp, #48	; 0x30
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	607a      	str	r2, [r7, #4]
 800684c:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_OPM_CHANNELS(OutputChannel));
  assert_param(IS_TIM_OPM_CHANNELS(InputChannel));

  if (OutputChannel != InputChannel)
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	f000 80b1 	beq.w	80069ba <HAL_TIM_OnePulse_ConfigChannel+0x17a>
  {
    /* Process Locked */
    __HAL_LOCK(htim);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_TIM_OnePulse_ConfigChannel+0x26>
 8006862:	2302      	movs	r3, #2
 8006864:	e0aa      	b.n	80069bc <HAL_TIM_OnePulse_ConfigChannel+0x17c>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    htim->State = HAL_TIM_STATE_BUSY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Extract the Output compare configuration from sConfig structure */
    temp1.OCMode = sConfig->OCMode;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	617b      	str	r3, [r7, #20]
    temp1.Pulse = sConfig->Pulse;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	61bb      	str	r3, [r7, #24]
    temp1.OCPolarity = sConfig->OCPolarity;
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	61fb      	str	r3, [r7, #28]
    temp1.OCNPolarity = sConfig->OCNPolarity;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	623b      	str	r3, [r7, #32]
    temp1.OCIdleState = sConfig->OCIdleState;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
    temp1.OCNIdleState = sConfig->OCNIdleState;
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (OutputChannel)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_TIM_OnePulse_ConfigChannel+0x68>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b04      	cmp	r3, #4
 80068a4:	d009      	beq.n	80068ba <HAL_TIM_OnePulse_ConfigChannel+0x7a>

        TIM_OC2_SetConfig(htim->Instance, &temp1);
        break;
      }
      default:
        break;
 80068a6:	e011      	b.n	80068cc <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC1_SetConfig(htim->Instance, &temp1);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f107 0214 	add.w	r2, r7, #20
 80068b0:	4611      	mov	r1, r2
 80068b2:	4618      	mov	r0, r3
 80068b4:	f001 f9c4 	bl	8007c40 <TIM_OC1_SetConfig>
        break;
 80068b8:	e008      	b.n	80068cc <HAL_TIM_OnePulse_ConfigChannel+0x8c>
        TIM_OC2_SetConfig(htim->Instance, &temp1);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f107 0214 	add.w	r2, r7, #20
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fa21 	bl	8007d0c <TIM_OC2_SetConfig>
        break;
 80068ca:	bf00      	nop
    }

    switch (InputChannel)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_OnePulse_ConfigChannel+0x9a>
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d033      	beq.n	8006940 <HAL_TIM_OnePulse_ConfigChannel+0x100>
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
        break;
      }

      default:
        break;
 80068d8:	e065      	b.n	80069a6 <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI1_SetConfig(htim->Instance, sConfig->ICPolarity,
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6999      	ldr	r1, [r3, #24]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	69da      	ldr	r2, [r3, #28]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	f001 fbbf 	bl	800806c <TIM_TI1_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699a      	ldr	r2, [r3, #24]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 020c 	bic.w	r2, r2, #12
 80068fc:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800690c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI1FP1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800691c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0207 	bic.w	r2, r2, #7
 800692c:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f042 0206 	orr.w	r2, r2, #6
 800693c:	609a      	str	r2, [r3, #8]
        break;
 800693e:	e032      	b.n	80069a6 <HAL_TIM_OnePulse_ConfigChannel+0x166>
        TIM_TI2_SetConfig(htim->Instance, sConfig->ICPolarity,
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6818      	ldr	r0, [r3, #0]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	6999      	ldr	r1, [r3, #24]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	69da      	ldr	r2, [r3, #28]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f001 fc14 	bl	800817c <TIM_TI2_SetConfig>
        htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006962:	619a      	str	r2, [r3, #24]
        htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006972:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_TS_TI2FP2;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006982:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689a      	ldr	r2, [r3, #8]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0207 	bic.w	r2, r2, #7
 8006992:	609a      	str	r2, [r3, #8]
        htim->Instance->SMCR |= TIM_SLAVEMODE_TRIGGER;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f042 0206 	orr.w	r2, r2, #6
 80069a2:	609a      	str	r2, [r3, #8]
        break;
 80069a4:	bf00      	nop
    }

    htim->State = HAL_TIM_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    __HAL_UNLOCK(htim);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	e000      	b.n	80069bc <HAL_TIM_OnePulse_ConfigChannel+0x17c>
  }
  else
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
  }
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3730      	adds	r7, #48	; 0x30
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_DMABurst_WriteStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                              uint32_t BurstRequestSrc, uint32_t *BurstBuffer, uint32_t  BurstLength)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af02      	add	r7, sp, #8
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
 80069d0:	603b      	str	r3, [r7, #0]
  return HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                          ((BurstLength) >> 8U) + 1U);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	0a1b      	lsrs	r3, r3, #8
  return HAL_TIM_DMABurst_MultiWriteStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 80069d6:	3301      	adds	r3, #1
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68b9      	ldr	r1, [r7, #8]
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f805 	bl	80069f4 <HAL_TIM_DMABurst_MultiWriteStart>
 80069ea:	4603      	mov	r3, r0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_TIM_DMABurst_MultiWriteStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiWriteStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                   uint32_t BurstRequestSrc, uint32_t *BurstBuffer,
                                                   uint32_t  BurstLength,  uint32_t  DataLength)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d101      	bne.n	8006a12 <HAL_TIM_DMABurst_MultiWriteStart+0x1e>
  {
    return HAL_BUSY;
 8006a0e:	2302      	movs	r3, #2
 8006a10:	e127      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d10b      	bne.n	8006a36 <HAL_TIM_DMABurst_MultiWriteStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <HAL_TIM_DMABurst_MultiWriteStart+0x3a>
    {
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e119      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2202      	movs	r2, #2
 8006a32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3c:	f000 80d8 	beq.w	8006bf0 <HAL_TIM_DMABurst_MultiWriteStart+0x1fc>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a46:	f200 80ee 	bhi.w	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a50:	f000 80b3 	beq.w	8006bba <HAL_TIM_DMABurst_MultiWriteStart+0x1c6>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	f200 80e4 	bhi.w	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	f000 808e 	beq.w	8006b84 <HAL_TIM_DMABurst_MultiWriteStart+0x190>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	f200 80da 	bhi.w	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a78:	d069      	beq.n	8006b4e <HAL_TIM_DMABurst_MultiWriteStart+0x15a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a80:	f200 80d1 	bhi.w	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a8a:	d045      	beq.n	8006b18 <HAL_TIM_DMABurst_MultiWriteStart+0x124>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a92:	f200 80c8 	bhi.w	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIM_DMABurst_MultiWriteStart+0xb4>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa4:	d01c      	beq.n	8006ae0 <HAL_TIM_DMABurst_MultiWriteStart+0xec>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8006aa6:	e0be      	b.n	8006c26 <HAL_TIM_DMABurst_MultiWriteStart+0x232>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	4a6f      	ldr	r2, [pc, #444]	; (8006c6c <HAL_TIM_DMABurst_MultiWriteStart+0x278>)
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	4a6e      	ldr	r2, [pc, #440]	; (8006c70 <HAL_TIM_DMABurst_MultiWriteStart+0x27c>)
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	4a6d      	ldr	r2, [pc, #436]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6a18      	ldr	r0, [r3, #32]
 8006ac4:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)BurstBuffer,
 8006acc:	461a      	mov	r2, r3
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f7fa fb88 	bl	80011e4 <HAL_DMA_Start_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80a7 	beq.w	8006c2a <HAL_TIM_DMABurst_MultiWriteStart+0x236>
        return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e0c0      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	4a64      	ldr	r2, [pc, #400]	; (8006c78 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	4a63      	ldr	r2, [pc, #396]	; (8006c7c <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8006aee:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	4a5f      	ldr	r2, [pc, #380]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006afc:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)BurstBuffer,
 8006b04:	461a      	mov	r2, r3
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	f7fa fb6c 	bl	80011e4 <HAL_DMA_Start_IT>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 808d 	beq.w	8006c2e <HAL_TIM_DMABurst_MultiWriteStart+0x23a>
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e0a4      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	4a56      	ldr	r2, [pc, #344]	; (8006c78 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	4a55      	ldr	r2, [pc, #340]	; (8006c7c <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	4a51      	ldr	r2, [pc, #324]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006b2e:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006b34:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)BurstBuffer,
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	f7fa fb50 	bl	80011e4 <HAL_DMA_Start_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d073      	beq.n	8006c32 <HAL_TIM_DMABurst_MultiWriteStart+0x23e>
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e089      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b52:	4a49      	ldr	r2, [pc, #292]	; (8006c78 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8006b54:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a48      	ldr	r2, [pc, #288]	; (8006c7c <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b62:	4a44      	ldr	r2, [pc, #272]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006b64:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b6a:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)BurstBuffer,
 8006b72:	461a      	mov	r2, r3
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f7fa fb35 	bl	80011e4 <HAL_DMA_Start_IT>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d05a      	beq.n	8006c36 <HAL_TIM_DMABurst_MultiWriteStart+0x242>
        return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e06e      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <HAL_TIM_DMABurst_MultiWriteStart+0x284>)
 8006b8a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <HAL_TIM_DMABurst_MultiWriteStart+0x288>)
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	4a36      	ldr	r2, [pc, #216]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ba0:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)BurstBuffer,
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f7fa fb1a 	bl	80011e4 <HAL_DMA_Start_IT>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d041      	beq.n	8006c3a <HAL_TIM_DMABurst_MultiWriteStart+0x246>
        return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e053      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	4a30      	ldr	r2, [pc, #192]	; (8006c80 <HAL_TIM_DMABurst_MultiWriteStart+0x28c>)
 8006bc0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	4a2f      	ldr	r2, [pc, #188]	; (8006c84 <HAL_TIM_DMABurst_MultiWriteStart+0x290>)
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bce:	4a29      	ldr	r2, [pc, #164]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006bd0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006bd6:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)BurstBuffer,
 8006bde:	461a      	mov	r2, r3
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f7fa faff 	bl	80011e4 <HAL_DMA_Start_IT>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d028      	beq.n	8006c3e <HAL_TIM_DMABurst_MultiWriteStart+0x24a>
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e038      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf4:	4a24      	ldr	r2, [pc, #144]	; (8006c88 <HAL_TIM_DMABurst_MultiWriteStart+0x294>)
 8006bf6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfc:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <HAL_TIM_DMABurst_MultiWriteStart+0x298>)
 8006bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c04:	4a1b      	ldr	r2, [pc, #108]	; (8006c74 <HAL_TIM_DMABurst_MultiWriteStart+0x280>)
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006c0c:	6839      	ldr	r1, [r7, #0]
                         (uint32_t)&htim->Instance->DMAR, DataLength) != HAL_OK)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	334c      	adds	r3, #76	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)BurstBuffer,
 8006c14:	461a      	mov	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	f7fa fae4 	bl	80011e4 <HAL_DMA_Start_IT>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <HAL_TIM_DMABurst_MultiWriteStart+0x24e>
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e01d      	b.n	8006c62 <HAL_TIM_DMABurst_MultiWriteStart+0x26e>
      break;
 8006c26:	bf00      	nop
 8006c28:	e00c      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e00a      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c2e:	bf00      	nop
 8006c30:	e008      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c32:	bf00      	nop
 8006c34:	e006      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c36:	bf00      	nop
 8006c38:	e004      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e002      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e000      	b.n	8006c44 <HAL_TIM_DMABurst_MultiWriteStart+0x250>
      break;
 8006c42:	bf00      	nop
  }

  /* Configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68b9      	ldr	r1, [r7, #8]
 8006c4a:	69ba      	ldr	r2, [r7, #24]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	649a      	str	r2, [r3, #72]	; 0x48
  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68d9      	ldr	r1, [r3, #12]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	430a      	orrs	r2, r1
 8006c5e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	08007ae9 	.word	0x08007ae9
 8006c70:	08007b17 	.word	0x08007b17
 8006c74:	08007817 	.word	0x08007817
 8006c78:	080078a9 	.word	0x080078a9
 8006c7c:	08007951 	.word	0x08007951
 8006c80:	0800a50d 	.word	0x0800a50d
 8006c84:	0800a531 	.word	0x0800a531
 8006c88:	08007b33 	.word	0x08007b33
 8006c8c:	08007b61 	.word	0x08007b61

08006c90 <HAL_TIM_DMABurst_WriteStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_WriteStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca0:	d050      	beq.n	8006d44 <HAL_TIM_DMABurst_WriteStop+0xb4>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca8:	d852      	bhi.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb0:	d042      	beq.n	8006d38 <HAL_TIM_DMABurst_WriteStop+0xa8>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d84a      	bhi.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc0:	d034      	beq.n	8006d2c <HAL_TIM_DMABurst_WriteStop+0x9c>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc8:	d842      	bhi.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd0:	d026      	beq.n	8006d20 <HAL_TIM_DMABurst_WriteStop+0x90>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cd8:	d83a      	bhi.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce0:	d018      	beq.n	8006d14 <HAL_TIM_DMABurst_WriteStop+0x84>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce8:	d832      	bhi.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cf0:	d004      	beq.n	8006cfc <HAL_TIM_DMABurst_WriteStop+0x6c>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cf8:	d006      	beq.n	8006d08 <HAL_TIM_DMABurst_WriteStop+0x78>
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 8006cfa:	e029      	b.n	8006d50 <HAL_TIM_DMABurst_WriteStop+0xc0>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fa fb08 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d06:	e024      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fa fb02 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d12:	e01e      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fa fafc 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d1e:	e018      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fa faf6 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d2a:	e012      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fa faf0 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d36:	e00c      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fa faea 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d42:	e006      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fa fae4 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8006d4e:	e000      	b.n	8006d52 <HAL_TIM_DMABurst_WriteStop+0xc2>
      break;
 8006d50:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68d9      	ldr	r1, [r3, #12]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	400a      	ands	r2, r1
 8006d62:	60da      	str	r2, [r3, #12]

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Return function status */
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_TIM_DMABurst_ReadStart>:
  * @note   This function should be used only when BurstLength is equal to DMA data transfer length.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                             uint32_t BurstRequestSrc, uint32_t  *BurstBuffer, uint32_t  BurstLength)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af02      	add	r7, sp, #8
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  return HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
                                         ((BurstLength) >> 8U) + 1U);
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	0a1b      	lsrs	r3, r3, #8
  return HAL_TIM_DMABurst_MultiReadStart(htim, BurstBaseAddress, BurstRequestSrc, BurstBuffer, BurstLength,
 8006d88:	3301      	adds	r3, #1
 8006d8a:	9301      	str	r3, [sp, #4]
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f805 	bl	8006da6 <HAL_TIM_DMABurst_MultiReadStart>
 8006d9c:	4603      	mov	r3, r0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <HAL_TIM_DMABurst_MultiReadStart>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_MultiReadStart(TIM_HandleTypeDef *htim, uint32_t BurstBaseAddress,
                                                  uint32_t BurstRequestSrc, uint32_t  *BurstBuffer,
                                                  uint32_t  BurstLength, uint32_t  DataLength)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b084      	sub	sp, #16
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	60b9      	str	r1, [r7, #8]
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	603b      	str	r3, [r7, #0]
  assert_param(IS_TIM_DMA_BASE(BurstBaseAddress));
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));
  assert_param(IS_TIM_DMA_LENGTH(BurstLength));
  assert_param(IS_TIM_DMA_DATA_LENGTH(DataLength));

  if (htim->DMABurstState == HAL_DMA_BURST_STATE_BUSY)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIM_DMABurst_MultiReadStart+0x1e>
  {
    return HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e127      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
  }
  else if (htim->DMABurstState == HAL_DMA_BURST_STATE_READY)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d10b      	bne.n	8006de8 <HAL_TIM_DMABurst_MultiReadStart+0x42>
  {
    if ((BurstBuffer == NULL) && (BurstLength > 0U))
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d104      	bne.n	8006de0 <HAL_TIM_DMABurst_MultiReadStart+0x3a>
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <HAL_TIM_DMABurst_MultiReadStart+0x3a>
    {
      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e119      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
    }
    else
    {
      htim->DMABurstState = HAL_DMA_BURST_STATE_BUSY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  }
  else
  {
    /* nothing to do */
  }
  switch (BurstRequestSrc)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dee:	f000 80d8 	beq.w	8006fa2 <HAL_TIM_DMABurst_MultiReadStart+0x1fc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df8:	f200 80ee 	bhi.w	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e02:	f000 80b3 	beq.w	8006f6c <HAL_TIM_DMABurst_MultiReadStart+0x1c6>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0c:	f200 80e4 	bhi.w	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e16:	f000 808e 	beq.w	8006f36 <HAL_TIM_DMABurst_MultiReadStart+0x190>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	f200 80da 	bhi.w	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2a:	d069      	beq.n	8006f00 <HAL_TIM_DMABurst_MultiReadStart+0x15a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	f200 80d1 	bhi.w	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3c:	d045      	beq.n	8006eca <HAL_TIM_DMABurst_MultiReadStart+0x124>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e44:	f200 80c8 	bhi.w	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIM_DMABurst_MultiReadStart+0xb4>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e56:	d01c      	beq.n	8006e92 <HAL_TIM_DMABurst_MultiReadStart+0xec>
        return HAL_ERROR;
      }
      break;
    }
    default:
      break;
 8006e58:	e0be      	b.n	8006fd8 <HAL_TIM_DMABurst_MultiReadStart+0x232>
      htim->hdma[TIM_DMA_ID_UPDATE]->XferCpltCallback = TIM_DMAPeriodElapsedCplt;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	4a6f      	ldr	r2, [pc, #444]	; (800701c <HAL_TIM_DMABurst_MultiReadStart+0x276>)
 8006e60:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_UPDATE]->XferHalfCpltCallback = TIM_DMAPeriodElapsedHalfCplt;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	4a6e      	ldr	r2, [pc, #440]	; (8007020 <HAL_TIM_DMABurst_MultiReadStart+0x27a>)
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_UPDATE]->XferErrorCallback = TIM_DMAError ;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	4a6d      	ldr	r2, [pc, #436]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_UPDATE], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a18      	ldr	r0, [r3, #32]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	334c      	adds	r3, #76	; 0x4c
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	f7fa f9af 	bl	80011e4 <HAL_DMA_Start_IT>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80a7 	beq.w	8006fdc <HAL_TIM_DMABurst_MultiReadStart+0x236>
        return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e0c0      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	4a64      	ldr	r2, [pc, #400]	; (8007028 <HAL_TIM_DMABurst_MultiReadStart+0x282>)
 8006e98:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9e:	4a63      	ldr	r2, [pc, #396]	; (800702c <HAL_TIM_DMABurst_MultiReadStart+0x286>)
 8006ea0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	4a5f      	ldr	r2, [pc, #380]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	334c      	adds	r3, #76	; 0x4c
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f7fa f993 	bl	80011e4 <HAL_DMA_Start_IT>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f000 808d 	beq.w	8006fe0 <HAL_TIM_DMABurst_MultiReadStart+0x23a>
        return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e0a4      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ece:	4a56      	ldr	r2, [pc, #344]	; (8007028 <HAL_TIM_DMABurst_MultiReadStart+0x282>)
 8006ed0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	4a55      	ldr	r2, [pc, #340]	; (800702c <HAL_TIM_DMABurst_MultiReadStart+0x286>)
 8006ed8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	4a51      	ldr	r2, [pc, #324]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	334c      	adds	r3, #76	; 0x4c
 8006eec:	4619      	mov	r1, r3
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f7fa f977 	bl	80011e4 <HAL_DMA_Start_IT>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d073      	beq.n	8006fe4 <HAL_TIM_DMABurst_MultiReadStart+0x23e>
        return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e089      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	4a48      	ldr	r2, [pc, #288]	; (8007028 <HAL_TIM_DMABurst_MultiReadStart+0x282>)
 8006f06:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0c:	4a47      	ldr	r2, [pc, #284]	; (800702c <HAL_TIM_DMABurst_MultiReadStart+0x286>)
 8006f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4a43      	ldr	r2, [pc, #268]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	334c      	adds	r3, #76	; 0x4c
 8006f22:	4619      	mov	r1, r3
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	f7fa f95c 	bl	80011e4 <HAL_DMA_Start_IT>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d05a      	beq.n	8006fe8 <HAL_TIM_DMABurst_MultiReadStart+0x242>
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e06e      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	4a3b      	ldr	r2, [pc, #236]	; (8007028 <HAL_TIM_DMABurst_MultiReadStart+0x282>)
 8006f3c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4a3a      	ldr	r2, [pc, #232]	; (800702c <HAL_TIM_DMABurst_MultiReadStart+0x286>)
 8006f44:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	4a36      	ldr	r2, [pc, #216]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006f4c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	334c      	adds	r3, #76	; 0x4c
 8006f58:	4619      	mov	r1, r3
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	f7fa f941 	bl	80011e4 <HAL_DMA_Start_IT>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d041      	beq.n	8006fec <HAL_TIM_DMABurst_MultiReadStart+0x246>
        return HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e053      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback =  TIMEx_DMACommutationCplt;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	4a2f      	ldr	r2, [pc, #188]	; (8007030 <HAL_TIM_DMABurst_MultiReadStart+0x28a>)
 8006f72:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback =  TIMEx_DMACommutationHalfCplt;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f78:	4a2e      	ldr	r2, [pc, #184]	; (8007034 <HAL_TIM_DMABurst_MultiReadStart+0x28e>)
 8006f7a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError ;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	4a28      	ldr	r2, [pc, #160]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006f82:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_COMMUTATION], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	334c      	adds	r3, #76	; 0x4c
 8006f8e:	4619      	mov	r1, r3
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	f7fa f926 	bl	80011e4 <HAL_DMA_Start_IT>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d028      	beq.n	8006ff0 <HAL_TIM_DMABurst_MultiReadStart+0x24a>
        return HAL_ERROR;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e038      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferCpltCallback = TIM_DMATriggerCplt;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa6:	4a24      	ldr	r2, [pc, #144]	; (8007038 <HAL_TIM_DMABurst_MultiReadStart+0x292>)
 8006fa8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferHalfCpltCallback = TIM_DMATriggerHalfCplt;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fae:	4a23      	ldr	r2, [pc, #140]	; (800703c <HAL_TIM_DMABurst_MultiReadStart+0x296>)
 8006fb0:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_TRIGGER]->XferErrorCallback = TIM_DMAError ;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	4a1b      	ldr	r2, [pc, #108]	; (8007024 <HAL_TIM_DMABurst_MultiReadStart+0x27e>)
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_TRIGGER], (uint32_t)&htim->Instance->DMAR, (uint32_t)BurstBuffer,
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	334c      	adds	r3, #76	; 0x4c
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f7fa f90b 	bl	80011e4 <HAL_DMA_Start_IT>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00f      	beq.n	8006ff4 <HAL_TIM_DMABurst_MultiReadStart+0x24e>
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e01d      	b.n	8007014 <HAL_TIM_DMABurst_MultiReadStart+0x26e>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e00c      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e00a      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006fe0:	bf00      	nop
 8006fe2:	e008      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006fe4:	bf00      	nop
 8006fe6:	e006      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006fe8:	bf00      	nop
 8006fea:	e004      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006fec:	bf00      	nop
 8006fee:	e002      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006ff0:	bf00      	nop
 8006ff2:	e000      	b.n	8006ff6 <HAL_TIM_DMABurst_MultiReadStart+0x250>
      break;
 8006ff4:	bf00      	nop
  }

  /* Configure the DMA Burst Mode */
  htim->Instance->DCR = (BurstBaseAddress | BurstLength);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68b9      	ldr	r1, [r7, #8]
 8006ffc:	69ba      	ldr	r2, [r7, #24]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the TIM DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, BurstRequestSrc);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68d9      	ldr	r1, [r3, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	430a      	orrs	r2, r1
 8007010:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	08007ae9 	.word	0x08007ae9
 8007020:	08007b17 	.word	0x08007b17
 8007024:	08007817 	.word	0x08007817
 8007028:	080079b9 	.word	0x080079b9
 800702c:	08007a81 	.word	0x08007a81
 8007030:	0800a50d 	.word	0x0800a50d
 8007034:	0800a531 	.word	0x0800a531
 8007038:	08007b33 	.word	0x08007b33
 800703c:	08007b61 	.word	0x08007b61

08007040 <HAL_TIM_DMABurst_ReadStop>:
  * @param  htim TIM handle
  * @param  BurstRequestSrc TIM DMA Request sources to disable.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_DMABurst_ReadStop(TIM_HandleTypeDef *htim, uint32_t BurstRequestSrc)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_DMA_SOURCE(BurstRequestSrc));

  /* Abort the DMA transfer (at least disable the DMA channel) */
  switch (BurstRequestSrc)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007050:	d050      	beq.n	80070f4 <HAL_TIM_DMABurst_ReadStop+0xb4>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007058:	d852      	bhi.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007060:	d042      	beq.n	80070e8 <HAL_TIM_DMABurst_ReadStop+0xa8>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007068:	d84a      	bhi.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007070:	d034      	beq.n	80070dc <HAL_TIM_DMABurst_ReadStop+0x9c>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007078:	d842      	bhi.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007080:	d026      	beq.n	80070d0 <HAL_TIM_DMABurst_ReadStop+0x90>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d83a      	bhi.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007090:	d018      	beq.n	80070c4 <HAL_TIM_DMABurst_ReadStop+0x84>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d832      	bhi.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a0:	d004      	beq.n	80070ac <HAL_TIM_DMABurst_ReadStop+0x6c>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a8:	d006      	beq.n	80070b8 <HAL_TIM_DMABurst_ReadStop+0x78>
    {
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
      break;
    }
    default:
      break;
 80070aa:	e029      	b.n	8007100 <HAL_TIM_DMABurst_ReadStop+0xc0>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_UPDATE]);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a1b      	ldr	r3, [r3, #32]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fa f930 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070b6:	e024      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fa f92a 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070c2:	e01e      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fa f924 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070ce:	e018      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7fa f91e 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070da:	e012      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fa f918 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070e6:	e00c      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_COMMUTATION]);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fa f912 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070f2:	e006      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_TRIGGER]);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fa f90c 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 80070fe:	e000      	b.n	8007102 <HAL_TIM_DMABurst_ReadStop+0xc2>
      break;
 8007100:	bf00      	nop
  }

  /* Disable the TIM Update DMA request */
  __HAL_TIM_DISABLE_DMA(htim, BurstRequestSrc);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68d9      	ldr	r1, [r3, #12]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	43da      	mvns	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	400a      	ands	r2, r1
 8007112:	60da      	str	r2, [r3, #12]

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Return function status */
  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
 800712e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007136:	2b01      	cmp	r3, #1
 8007138:	d101      	bne.n	800713e <HAL_TIM_GenerateEvent+0x18>
 800713a:	2302      	movs	r3, #2
 800713c:	e014      	b.n	8007168 <HAL_TIM_GenerateEvent+0x42>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	683a      	ldr	r2, [r7, #0]
 8007154:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_ConfigOCrefClear>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigOCrefClear(TIM_HandleTypeDef *htim,
                                           TIM_ClearInputConfigTypeDef *sClearInputConfig,
                                           uint32_t Channel)
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b084      	sub	sp, #16
 8007176:	af00      	add	r7, sp, #0
 8007178:	60f8      	str	r0, [r7, #12]
 800717a:	60b9      	str	r1, [r7, #8]
 800717c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_OCXREF_CLEAR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_CLEARINPUT_SOURCE(sClearInputConfig->ClearInputSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d101      	bne.n	800718c <HAL_TIM_ConfigOCrefClear+0x1a>
 8007188:	2302      	movs	r3, #2
 800718a:	e0b3      	b.n	80072f4 <HAL_TIM_ConfigOCrefClear+0x182>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (sClearInputConfig->ClearInputSource)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_TIM_ConfigOCrefClear+0x38>
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d009      	beq.n	80071bc <HAL_TIM_ConfigOCrefClear+0x4a>
                        sClearInputConfig->ClearInputFilter);
      break;
    }

    default:
      break;
 80071a8:	e021      	b.n	80071ee <HAL_TIM_ConfigOCrefClear+0x7c>
      CLEAR_BIT(htim->Instance->SMCR, (TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP));
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80071b8:	609a      	str	r2, [r3, #8]
      break;
 80071ba:	e018      	b.n	80071ee <HAL_TIM_ConfigOCrefClear+0x7c>
      if (sClearInputConfig->ClearInputPrescaler != TIM_CLEARINPUTPRESCALER_DIV1)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_TIM_ConfigOCrefClear+0x66>
        htim->State = HAL_TIM_STATE_READY;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        __HAL_UNLOCK(htim);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e08d      	b.n	80072f4 <HAL_TIM_ConfigOCrefClear+0x182>
      TIM_ETR_SetConfig(htim->Instance,
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	68d9      	ldr	r1, [r3, #12]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f001 f8c4 	bl	8008374 <TIM_ETR_SetConfig>
      break;
 80071ec:	bf00      	nop
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b0c      	cmp	r3, #12
 80071f2:	d875      	bhi.n	80072e0 <HAL_TIM_ConfigOCrefClear+0x16e>
 80071f4:	a201      	add	r2, pc, #4	; (adr r2, 80071fc <HAL_TIM_ConfigOCrefClear+0x8a>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	08007231 	.word	0x08007231
 8007200:	080072e1 	.word	0x080072e1
 8007204:	080072e1 	.word	0x080072e1
 8007208:	080072e1 	.word	0x080072e1
 800720c:	0800725d 	.word	0x0800725d
 8007210:	080072e1 	.word	0x080072e1
 8007214:	080072e1 	.word	0x080072e1
 8007218:	080072e1 	.word	0x080072e1
 800721c:	08007289 	.word	0x08007289
 8007220:	080072e1 	.word	0x080072e1
 8007224:	080072e1 	.word	0x080072e1
 8007228:	080072e1 	.word	0x080072e1
 800722c:	080072b5 	.word	0x080072b5

  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d008      	beq.n	800724a <HAL_TIM_ConfigOCrefClear+0xd8>
      {
        /* Enable the OCREF clear feature for Channel 1 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007246:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 1 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
      }
      break;
 8007248:	e04b      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC1CE);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	699a      	ldr	r2, [r3, #24]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007258:	619a      	str	r2, [r3, #24]
      break;
 800725a:	e042      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
    }
    case TIM_CHANNEL_2:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d008      	beq.n	8007276 <HAL_TIM_ConfigOCrefClear+0x104>
      {
        /* Enable the OCREF clear feature for Channel 2 */
        SET_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007272:	619a      	str	r2, [r3, #24]
      else
      {
        /* Disable the OCREF clear feature for Channel 2 */
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
      }
      break;
 8007274:	e035      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
        CLEAR_BIT(htim->Instance->CCMR1, TIM_CCMR1_OC2CE);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007284:	619a      	str	r2, [r3, #24]
      break;
 8007286:	e02c      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
    }
    case TIM_CHANNEL_3:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <HAL_TIM_ConfigOCrefClear+0x130>
      {
        /* Enable the OCREF clear feature for Channel 3 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69da      	ldr	r2, [r3, #28]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800729e:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 3 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
      }
      break;
 80072a0:	e01f      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC3CE);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072b0:	61da      	str	r2, [r3, #28]
      break;
 80072b2:	e016      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
    }
    case TIM_CHANNEL_4:
    {
      if (sClearInputConfig->ClearInputState != (uint32_t)DISABLE)
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_TIM_ConfigOCrefClear+0x15c>
      {
        /* Enable the OCREF clear feature for Channel 4 */
        SET_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69da      	ldr	r2, [r3, #28]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ca:	61da      	str	r2, [r3, #28]
      else
      {
        /* Disable the OCREF clear feature for Channel 4 */
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
      }
      break;
 80072cc:	e009      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
        CLEAR_BIT(htim->Instance->CCMR2, TIM_CCMR2_OC4CE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072dc:	61da      	str	r2, [r3, #28]
      break;
 80072de:	e000      	b.n	80072e2 <HAL_TIM_ConfigOCrefClear+0x170>
    }
    default:
      break;
 80072e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIM_ConfigClockSource+0x18>
 8007310:	2302      	movs	r3, #2
 8007312:	e0b3      	b.n	800747c <HAL_TIM_ConfigClockSource+0x180>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734c:	d03e      	beq.n	80073cc <HAL_TIM_ConfigClockSource+0xd0>
 800734e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007352:	f200 8087 	bhi.w	8007464 <HAL_TIM_ConfigClockSource+0x168>
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735a:	f000 8085 	beq.w	8007468 <HAL_TIM_ConfigClockSource+0x16c>
 800735e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007362:	d87f      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 8007364:	2b70      	cmp	r3, #112	; 0x70
 8007366:	d01a      	beq.n	800739e <HAL_TIM_ConfigClockSource+0xa2>
 8007368:	2b70      	cmp	r3, #112	; 0x70
 800736a:	d87b      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 800736c:	2b60      	cmp	r3, #96	; 0x60
 800736e:	d050      	beq.n	8007412 <HAL_TIM_ConfigClockSource+0x116>
 8007370:	2b60      	cmp	r3, #96	; 0x60
 8007372:	d877      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 8007374:	2b50      	cmp	r3, #80	; 0x50
 8007376:	d03c      	beq.n	80073f2 <HAL_TIM_ConfigClockSource+0xf6>
 8007378:	2b50      	cmp	r3, #80	; 0x50
 800737a:	d873      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d058      	beq.n	8007432 <HAL_TIM_ConfigClockSource+0x136>
 8007380:	2b40      	cmp	r3, #64	; 0x40
 8007382:	d86f      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 8007384:	2b30      	cmp	r3, #48	; 0x30
 8007386:	d064      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x156>
 8007388:	2b30      	cmp	r3, #48	; 0x30
 800738a:	d86b      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 800738c:	2b20      	cmp	r3, #32
 800738e:	d060      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x156>
 8007390:	2b20      	cmp	r3, #32
 8007392:	d867      	bhi.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
 8007394:	2b00      	cmp	r3, #0
 8007396:	d05c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x156>
 8007398:	2b10      	cmp	r3, #16
 800739a:	d05a      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800739c:	e062      	b.n	8007464 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6899      	ldr	r1, [r3, #8]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	f000 ffe1 	bl	8008374 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	609a      	str	r2, [r3, #8]
      break;
 80073ca:	e04e      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6899      	ldr	r1, [r3, #8]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f000 ffca 	bl	8008374 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073ee:	609a      	str	r2, [r3, #8]
      break;
 80073f0:	e03b      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6818      	ldr	r0, [r3, #0]
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	6859      	ldr	r1, [r3, #4]
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	461a      	mov	r2, r3
 8007400:	f000 fe8e 	bl	8008120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2150      	movs	r1, #80	; 0x50
 800740a:	4618      	mov	r0, r3
 800740c:	f000 ff98 	bl	8008340 <TIM_ITRx_SetConfig>
      break;
 8007410:	e02b      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	6859      	ldr	r1, [r3, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	461a      	mov	r2, r3
 8007420:	f000 fee8 	bl	80081f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2160      	movs	r1, #96	; 0x60
 800742a:	4618      	mov	r0, r3
 800742c:	f000 ff88 	bl	8008340 <TIM_ITRx_SetConfig>
      break;
 8007430:	e01b      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	6859      	ldr	r1, [r3, #4]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	461a      	mov	r2, r3
 8007440:	f000 fe6e 	bl	8008120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2140      	movs	r1, #64	; 0x40
 800744a:	4618      	mov	r0, r3
 800744c:	f000 ff78 	bl	8008340 <TIM_ITRx_SetConfig>
      break;
 8007450:	e00b      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f000 ff6f 	bl	8008340 <TIM_ITRx_SetConfig>
        break;
 8007462:	e002      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007464:	bf00      	nop
 8007466:	e000      	b.n	800746a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007468:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <HAL_TIM_ConfigTI1Input>:
  *            @arg TIM_TI1SELECTION_XORCOMBINATION: The TIMx_CH1, CH2 and CH3
  *            pins are connected to the TI1 input (XOR combination)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigTI1Input(TIM_HandleTypeDef *htim, uint32_t TI1_Selection)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_XOR_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TI1SELECTION(TI1_Selection));

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	60fb      	str	r3, [r7, #12]

  /* Reset the TI1 selection */
  tmpcr2 &= ~TIM_CR2_TI1S;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800749c:	60fb      	str	r3, [r7, #12]

  /* Set the TI1 selection */
  tmpcr2 |= TI1_Selection;
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMxCR2 */
  htim->Instance->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bc80      	pop	{r7}
 80074b8:	4770      	bx	lr

080074ba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b082      	sub	sp, #8
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e031      	b.n	8007536 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2202      	movs	r2, #2
 80074de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 fd33 	bl	8007f50 <TIM_SlaveTimer_SetConfig>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e018      	b.n	8007536 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007512:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007522:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2200      	movs	r2, #0
 8007530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_TIM_SlaveConfigSynchro_IT>:
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro_IT(TIM_HandleTypeDef *htim,
                                                TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800754e:	2b01      	cmp	r3, #1
 8007550:	d101      	bne.n	8007556 <HAL_TIM_SlaveConfigSynchro_IT+0x18>
 8007552:	2302      	movs	r3, #2
 8007554:	e031      	b.n	80075ba <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fcf1 	bl	8007f50 <TIM_SlaveTimer_SetConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d009      	beq.n	8007588 <HAL_TIM_SlaveConfigSynchro_IT+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e018      	b.n	80075ba <HAL_TIM_SlaveConfigSynchro_IT+0x7c>
  }

  /* Enable Trigger Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007596:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075a6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3708      	adds	r7, #8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80075cc:	2300      	movs	r3, #0
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b0c      	cmp	r3, #12
 80075d4:	d830      	bhi.n	8007638 <HAL_TIM_ReadCapturedValue+0x76>
 80075d6:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <HAL_TIM_ReadCapturedValue+0x1a>)
 80075d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075dc:	08007611 	.word	0x08007611
 80075e0:	08007639 	.word	0x08007639
 80075e4:	08007639 	.word	0x08007639
 80075e8:	08007639 	.word	0x08007639
 80075ec:	0800761b 	.word	0x0800761b
 80075f0:	08007639 	.word	0x08007639
 80075f4:	08007639 	.word	0x08007639
 80075f8:	08007639 	.word	0x08007639
 80075fc:	08007625 	.word	0x08007625
 8007600:	08007639 	.word	0x08007639
 8007604:	08007639 	.word	0x08007639
 8007608:	08007639 	.word	0x08007639
 800760c:	0800762f 	.word	0x0800762f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007616:	60fb      	str	r3, [r7, #12]

      break;
 8007618:	e00f      	b.n	800763a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007620:	60fb      	str	r3, [r7, #12]

      break;
 8007622:	e00a      	b.n	800763a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762a:	60fb      	str	r3, [r7, #12]

      break;
 800762c:	e005      	b.n	800763a <HAL_TIM_ReadCapturedValue+0x78>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	60fb      	str	r3, [r7, #12]

      break;
 8007636:	e000      	b.n	800763a <HAL_TIM_ReadCapturedValue+0x78>
    }

    default:
      break;
 8007638:	bf00      	nop
  }

  return tmpreg;
 800763a:	68fb      	ldr	r3, [r7, #12]
}
 800763c:	4618      	mov	r0, r3
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	bc80      	pop	{r7}
 8007644:	4770      	bx	lr
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007646:	b480      	push	{r7}
 8007648:	b083      	sub	sp, #12
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr

08007658 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	bc80      	pop	{r7}
 8007668:	4770      	bx	lr

0800766a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800766a:	b480      	push	{r7}
 800766c:	b083      	sub	sp, #12
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr

0800767c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800768e:	b480      	push	{r7}
 8007690:	b083      	sub	sp, #12
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr

080076a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bc80      	pop	{r7}
 80076b0:	4770      	bx	lr

080076b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076b2:	b480      	push	{r7}
 80076b4:	b083      	sub	sp, #12
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr

080076c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr

080076d6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bc80      	pop	{r7}
 80076f8:	4770      	bx	lr

080076fa <HAL_TIM_Base_GetState>:
  * @brief  Return the TIM Base handle state.
  * @param  htim TIM Base handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Base_GetState(TIM_HandleTypeDef *htim)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007708:	b2db      	uxtb	r3, r3
}
 800770a:	4618      	mov	r0, r3
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_OC_GetState>:
  * @brief  Return the TIM OC handle state.
  * @param  htim TIM Output Compare handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OC_GetState(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  return htim->State;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	b2db      	uxtb	r3, r3
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <HAL_TIM_PWM_GetState>:
  * @brief  Return the TIM PWM handle state.
  * @param  htim TIM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_PWM_GetState(TIM_HandleTypeDef *htim)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773c:	b2db      	uxtb	r3, r3
}
 800773e:	4618      	mov	r0, r3
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	bc80      	pop	{r7}
 8007746:	4770      	bx	lr

08007748 <HAL_TIM_IC_GetState>:
  * @brief  Return the TIM Input Capture handle state.
  * @param  htim TIM IC handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_IC_GetState(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr

08007762 <HAL_TIM_OnePulse_GetState>:
  * @brief  Return the TIM One Pulse Mode handle state.
  * @param  htim TIM OPM handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_OnePulse_GetState(TIM_HandleTypeDef *htim)
{
 8007762:	b480      	push	{r7}
 8007764:	b083      	sub	sp, #12
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  return htim->State;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007770:	b2db      	uxtb	r3, r3
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	bc80      	pop	{r7}
 800777a:	4770      	bx	lr

0800777c <HAL_TIM_Encoder_GetState>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM Encoder Interface handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIM_Encoder_GetState(TIM_HandleTypeDef *htim)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  return htim->State;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800778a:	b2db      	uxtb	r3, r3
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr

08007796 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8007796:	b480      	push	{r7}
 8007798:	b083      	sub	sp, #12
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	7f1b      	ldrb	r3, [r3, #28]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	370c      	adds	r7, #12
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bc80      	pop	{r7}
 80077aa:	4770      	bx	lr

080077ac <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <HAL_TIM_GetChannelState+0x1a>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e013      	b.n	80077ee <HAL_TIM_GetChannelState+0x42>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_GetChannelState+0x2a>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	e00b      	b.n	80077ee <HAL_TIM_GetChannelState+0x42>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_GetChannelState+0x3a>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	e003      	b.n	80077ee <HAL_TIM_GetChannelState+0x42>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bc80      	pop	{r7}
 80077fa:	4770      	bx	lr

080077fc <HAL_TIM_DMABurstState>:
  * @brief  Return actual state of a DMA burst operation.
  * @param  htim TIM handle
  * @retval DMA burst state
  */
HAL_TIM_DMABurstStateTypeDef HAL_TIM_DMABurstState(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_DMABURST_INSTANCE(htim->Instance));

  return htim->DMABurstState;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800780a:	b2db      	uxtb	r3, r3
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	bc80      	pop	{r7}
 8007814:	4770      	bx	lr

08007816 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007822:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d107      	bne.n	800783e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800783c:	e02a      	b.n	8007894 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	429a      	cmp	r2, r3
 8007846:	d107      	bne.n	8007858 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2202      	movs	r2, #2
 800784c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007856:	e01d      	b.n	8007894 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	429a      	cmp	r2, r3
 8007860:	d107      	bne.n	8007872 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2204      	movs	r2, #4
 8007866:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007870:	e010      	b.n	8007894 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	429a      	cmp	r2, r3
 800787a:	d107      	bne.n	800788c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2208      	movs	r2, #8
 8007880:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800788a:	e003      	b.n	8007894 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f7ff ff27 	bl	80076e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
}
 80078a0:	bf00      	nop
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d10b      	bne.n	80078d8 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d136      	bne.n	800793c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d6:	e031      	b.n	800793c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d10b      	bne.n	80078fa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2202      	movs	r2, #2
 80078e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d125      	bne.n	800793c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f8:	e020      	b.n	800793c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d10b      	bne.n	800791c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2204      	movs	r2, #4
 8007908:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d114      	bne.n	800793c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800791a:	e00f      	b.n	800793c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	429a      	cmp	r2, r3
 8007924:	d10a      	bne.n	800793c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2208      	movs	r2, #8
 800792a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d103      	bne.n	800793c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff feaf 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	2200      	movs	r2, #0
 8007946:	771a      	strb	r2, [r3, #28]
}
 8007948:	bf00      	nop
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d103      	bne.n	8007970 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	771a      	strb	r2, [r3, #28]
 800796e:	e019      	b.n	80079a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	429a      	cmp	r2, r3
 8007978:	d103      	bne.n	8007982 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2202      	movs	r2, #2
 800797e:	771a      	strb	r2, [r3, #28]
 8007980:	e010      	b.n	80079a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	429a      	cmp	r2, r3
 800798a:	d103      	bne.n	8007994 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2204      	movs	r2, #4
 8007990:	771a      	strb	r2, [r3, #28]
 8007992:	e007      	b.n	80079a4 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	429a      	cmp	r2, r3
 800799c:	d102      	bne.n	80079a4 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2208      	movs	r2, #8
 80079a2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f7ff fe84 	bl	80076b2 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2200      	movs	r2, #0
 80079ae:	771a      	strb	r2, [r3, #28]
}
 80079b0:	bf00      	nop
 80079b2:	3710      	adds	r7, #16
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d10f      	bne.n	80079f0 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d146      	bne.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2201      	movs	r2, #1
 80079e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079ee:	e03d      	b.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d10f      	bne.n	8007a1a <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2202      	movs	r2, #2
 80079fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d131      	bne.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a18:	e028      	b.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d10f      	bne.n	8007a44 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2204      	movs	r2, #4
 8007a28:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d11c      	bne.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a42:	e013      	b.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d10e      	bne.n	8007a6c <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2208      	movs	r2, #8
 8007a52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	699b      	ldr	r3, [r3, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d107      	bne.n	8007a6c <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff fe05 	bl	800767c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	771a      	strb	r2, [r3, #28]
}
 8007a78:	bf00      	nop
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d103      	bne.n	8007aa0 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	771a      	strb	r2, [r3, #28]
 8007a9e:	e019      	b.n	8007ad4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d103      	bne.n	8007ab2 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2202      	movs	r2, #2
 8007aae:	771a      	strb	r2, [r3, #28]
 8007ab0:	e010      	b.n	8007ad4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d103      	bne.n	8007ac4 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2204      	movs	r2, #4
 8007ac0:	771a      	strb	r2, [r3, #28]
 8007ac2:	e007      	b.n	8007ad4 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d102      	bne.n	8007ad4 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2208      	movs	r2, #8
 8007ad2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff fdda 	bl	800768e <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
}
 8007ae0:	bf00      	nop
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <TIM_DMAPeriodElapsedCplt>:
  * @brief  TIM DMA Period Elapse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedCplt(DMA_HandleTypeDef *hdma)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_UPDATE]->Init.Mode == DMA_NORMAL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <TIM_DMAPeriodElapsedCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedCallback(htim);
#else
  HAL_TIM_PeriodElapsedCallback(htim);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7f8 fc9f 	bl	800044c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b0e:	bf00      	nop
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <TIM_DMAPeriodElapsedHalfCplt>:
  * @brief  TIM DMA Period Elapse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAPeriodElapsedHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b16:	b580      	push	{r7, lr}
 8007b18:	b084      	sub	sp, #16
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b22:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PeriodElapsedHalfCpltCallback(htim);
#else
  HAL_TIM_PeriodElapsedHalfCpltCallback(htim);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff fd97 	bl	8007658 <HAL_TIM_PeriodElapsedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <TIM_DMATriggerCplt>:
  * @brief  TIM DMA Trigger callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerCplt(DMA_HandleTypeDef *hdma)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	60fb      	str	r3, [r7, #12]

  if (htim->hdma[TIM_DMA_ID_TRIGGER]->Init.Mode == DMA_NORMAL)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d103      	bne.n	8007b52 <TIM_DMATriggerCplt+0x20>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerCallback(htim);
#else
  HAL_TIM_TriggerCallback(htim);
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f7ff fdb6 	bl	80076c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <TIM_DMATriggerHalfCplt>:
  * @brief  TIM DMA Trigger half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMATriggerHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->TriggerHalfCpltCallback(htim);
#else
  HAL_TIM_TriggerHalfCpltCallback(htim);
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f7ff fdb1 	bl	80076d6 <HAL_TIM_TriggerHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007b74:	bf00      	nop
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a29      	ldr	r2, [pc, #164]	; (8007c34 <TIM_Base_SetConfig+0xb8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d00b      	beq.n	8007bac <TIM_Base_SetConfig+0x30>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b9a:	d007      	beq.n	8007bac <TIM_Base_SetConfig+0x30>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a26      	ldr	r2, [pc, #152]	; (8007c38 <TIM_Base_SetConfig+0xbc>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_Base_SetConfig+0x30>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a25      	ldr	r2, [pc, #148]	; (8007c3c <TIM_Base_SetConfig+0xc0>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d108      	bne.n	8007bbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a1c      	ldr	r2, [pc, #112]	; (8007c34 <TIM_Base_SetConfig+0xb8>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00b      	beq.n	8007bde <TIM_Base_SetConfig+0x62>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bcc:	d007      	beq.n	8007bde <TIM_Base_SetConfig+0x62>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a19      	ldr	r2, [pc, #100]	; (8007c38 <TIM_Base_SetConfig+0xbc>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d003      	beq.n	8007bde <TIM_Base_SetConfig+0x62>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a18      	ldr	r2, [pc, #96]	; (8007c3c <TIM_Base_SetConfig+0xc0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d108      	bne.n	8007bf0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4a07      	ldr	r2, [pc, #28]	; (8007c34 <TIM_Base_SetConfig+0xb8>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d103      	bne.n	8007c24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	691a      	ldr	r2, [r3, #16]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	615a      	str	r2, [r3, #20]
}
 8007c2a:	bf00      	nop
 8007c2c:	3714      	adds	r7, #20
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr
 8007c34:	40012c00 	.word	0x40012c00
 8007c38:	40000400 	.word	0x40000400
 8007c3c:	40000800 	.word	0x40000800

08007c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0201 	bic.w	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0302 	bic.w	r3, r3, #2
 8007c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <TIM_OC1_SetConfig+0xc8>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d10c      	bne.n	8007cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	f023 0308 	bic.w	r3, r3, #8
 8007ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	4313      	orrs	r3, r2
 8007cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f023 0304 	bic.w	r3, r3, #4
 8007cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a13      	ldr	r2, [pc, #76]	; (8007d08 <TIM_OC1_SetConfig+0xc8>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d111      	bne.n	8007ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	697a      	ldr	r2, [r7, #20]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	40012c00 	.word	0x40012c00

08007d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b087      	sub	sp, #28
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	f023 0210 	bic.w	r2, r3, #16
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	699b      	ldr	r3, [r3, #24]
 8007d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	021b      	lsls	r3, r3, #8
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	f023 0320 	bic.w	r3, r3, #32
 8007d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	011b      	lsls	r3, r3, #4
 8007d5e:	697a      	ldr	r2, [r7, #20]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <TIM_OC2_SetConfig+0xd0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d10d      	bne.n	8007d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	697a      	ldr	r2, [r7, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a14      	ldr	r2, [pc, #80]	; (8007ddc <TIM_OC2_SetConfig+0xd0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d113      	bne.n	8007db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	693a      	ldr	r2, [r7, #16]
 8007dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68fa      	ldr	r2, [r7, #12]
 8007dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	621a      	str	r2, [r3, #32]
}
 8007dd2:	bf00      	nop
 8007dd4:	371c      	adds	r7, #28
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr
 8007ddc:	40012c00 	.word	0x40012c00

08007de0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b087      	sub	sp, #28
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	021b      	lsls	r3, r3, #8
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a1d      	ldr	r2, [pc, #116]	; (8007eb0 <TIM_OC3_SetConfig+0xd0>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d10d      	bne.n	8007e5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	021b      	lsls	r3, r3, #8
 8007e4c:	697a      	ldr	r2, [r7, #20]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a14      	ldr	r2, [pc, #80]	; (8007eb0 <TIM_OC3_SetConfig+0xd0>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d113      	bne.n	8007e8a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	011b      	lsls	r3, r3, #4
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	011b      	lsls	r3, r3, #4
 8007e84:	693a      	ldr	r2, [r7, #16]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bc80      	pop	{r7}
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40012c00 	.word	0x40012c00

08007eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	031b      	lsls	r3, r3, #12
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a0f      	ldr	r2, [pc, #60]	; (8007f4c <TIM_OC4_SetConfig+0x98>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d109      	bne.n	8007f28 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	695b      	ldr	r3, [r3, #20]
 8007f20:	019b      	lsls	r3, r3, #6
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	693a      	ldr	r2, [r7, #16]
 8007f40:	621a      	str	r2, [r3, #32]
}
 8007f42:	bf00      	nop
 8007f44:	371c      	adds	r7, #28
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bc80      	pop	{r7}
 8007f4a:	4770      	bx	lr
 8007f4c:	40012c00 	.word	0x40012c00

08007f50 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f68:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f023 0307 	bic.w	r3, r3, #7
 8007f7a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b70      	cmp	r3, #112	; 0x70
 8007f94:	d01a      	beq.n	8007fcc <TIM_SlaveTimer_SetConfig+0x7c>
 8007f96:	2b70      	cmp	r3, #112	; 0x70
 8007f98:	d860      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007f9a:	2b60      	cmp	r3, #96	; 0x60
 8007f9c:	d054      	beq.n	8008048 <TIM_SlaveTimer_SetConfig+0xf8>
 8007f9e:	2b60      	cmp	r3, #96	; 0x60
 8007fa0:	d85c      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007fa2:	2b50      	cmp	r3, #80	; 0x50
 8007fa4:	d046      	beq.n	8008034 <TIM_SlaveTimer_SetConfig+0xe4>
 8007fa6:	2b50      	cmp	r3, #80	; 0x50
 8007fa8:	d858      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d019      	beq.n	8007fe2 <TIM_SlaveTimer_SetConfig+0x92>
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d854      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007fb2:	2b30      	cmp	r3, #48	; 0x30
 8007fb4:	d054      	beq.n	8008060 <TIM_SlaveTimer_SetConfig+0x110>
 8007fb6:	2b30      	cmp	r3, #48	; 0x30
 8007fb8:	d850      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d050      	beq.n	8008060 <TIM_SlaveTimer_SetConfig+0x110>
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d84c      	bhi.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d04c      	beq.n	8008060 <TIM_SlaveTimer_SetConfig+0x110>
 8007fc6:	2b10      	cmp	r3, #16
 8007fc8:	d04a      	beq.n	8008060 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007fca:	e047      	b.n	800805c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6818      	ldr	r0, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	68d9      	ldr	r1, [r3, #12]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689a      	ldr	r2, [r3, #8]
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	691b      	ldr	r3, [r3, #16]
 8007fdc:	f000 f9ca 	bl	8008374 <TIM_ETR_SetConfig>
      break;
 8007fe0:	e03f      	b.n	8008062 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d101      	bne.n	8007fee <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e03a      	b.n	8008064 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a1a      	ldr	r2, [r3, #32]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008014:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	691b      	ldr	r3, [r3, #16]
 800801a:	011b      	lsls	r3, r3, #4
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	621a      	str	r2, [r3, #32]
      break;
 8008032:	e016      	b.n	8008062 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	6899      	ldr	r1, [r3, #8]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	461a      	mov	r2, r3
 8008042:	f000 f86d 	bl	8008120 <TIM_TI1_ConfigInputStage>
      break;
 8008046:	e00c      	b.n	8008062 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	6899      	ldr	r1, [r3, #8]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	461a      	mov	r2, r3
 8008056:	f000 f8cd 	bl	80081f4 <TIM_TI2_ConfigInputStage>
      break;
 800805a:	e002      	b.n	8008062 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800805c:	bf00      	nop
 800805e:	e000      	b.n	8008062 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8008060:	bf00      	nop
  }
  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3718      	adds	r7, #24
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	f023 0201 	bic.w	r2, r3, #1
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <TIM_TI1_SetConfig+0xa8>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d00b      	beq.n	80080b2 <TIM_TI1_SetConfig+0x46>
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080a0:	d007      	beq.n	80080b2 <TIM_TI1_SetConfig+0x46>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4a1c      	ldr	r2, [pc, #112]	; (8008118 <TIM_TI1_SetConfig+0xac>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d003      	beq.n	80080b2 <TIM_TI1_SetConfig+0x46>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	4a1b      	ldr	r2, [pc, #108]	; (800811c <TIM_TI1_SetConfig+0xb0>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d101      	bne.n	80080b6 <TIM_TI1_SetConfig+0x4a>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e000      	b.n	80080b8 <TIM_TI1_SetConfig+0x4c>
 80080b6:	2300      	movs	r3, #0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d008      	beq.n	80080ce <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0303 	bic.w	r3, r3, #3
 80080c2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	e003      	b.n	80080d6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	011b      	lsls	r3, r3, #4
 80080e2:	b2db      	uxtb	r3, r3
 80080e4:	697a      	ldr	r2, [r7, #20]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	f023 030a 	bic.w	r3, r3, #10
 80080f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 030a 	and.w	r3, r3, #10
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	621a      	str	r2, [r3, #32]
}
 800810a:	bf00      	nop
 800810c:	371c      	adds	r7, #28
 800810e:	46bd      	mov	sp, r7
 8008110:	bc80      	pop	{r7}
 8008112:	4770      	bx	lr
 8008114:	40012c00 	.word	0x40012c00
 8008118:	40000400 	.word	0x40000400
 800811c:	40000800 	.word	0x40000800

08008120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008120:	b480      	push	{r7}
 8008122:	b087      	sub	sp, #28
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f023 0201 	bic.w	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	699b      	ldr	r3, [r3, #24]
 8008142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800814a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	011b      	lsls	r3, r3, #4
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	4313      	orrs	r3, r2
 8008154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f023 030a 	bic.w	r3, r3, #10
 800815c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	621a      	str	r2, [r3, #32]
}
 8008172:	bf00      	nop
 8008174:	371c      	adds	r7, #28
 8008176:	46bd      	mov	sp, r7
 8008178:	bc80      	pop	{r7}
 800817a:	4770      	bx	lr

0800817c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800817c:	b480      	push	{r7}
 800817e:	b087      	sub	sp, #28
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6a1b      	ldr	r3, [r3, #32]
 800818e:	f023 0210 	bic.w	r2, r3, #16
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80081ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	031b      	lsls	r3, r3, #12
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80081ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	011b      	lsls	r3, r3, #4
 80081d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	693a      	ldr	r2, [r7, #16]
 80081e8:	621a      	str	r2, [r3, #32]
}
 80081ea:	bf00      	nop
 80081ec:	371c      	adds	r7, #28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a1b      	ldr	r3, [r3, #32]
 8008204:	f023 0210 	bic.w	r2, r3, #16
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800821e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	031b      	lsls	r3, r3, #12
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4313      	orrs	r3, r2
 8008228:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008230:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	011b      	lsls	r3, r3, #4
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	621a      	str	r2, [r3, #32]
}
 8008248:	bf00      	nop
 800824a:	371c      	adds	r7, #28
 800824c:	46bd      	mov	sp, r7
 800824e:	bc80      	pop	{r7}
 8008250:	4770      	bx	lr

08008252 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008252:	b480      	push	{r7}
 8008254:	b087      	sub	sp, #28
 8008256:	af00      	add	r7, sp, #0
 8008258:	60f8      	str	r0, [r7, #12]
 800825a:	60b9      	str	r1, [r7, #8]
 800825c:	607a      	str	r2, [r7, #4]
 800825e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	f023 0303 	bic.w	r3, r3, #3
 800827e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008280:	697a      	ldr	r2, [r7, #20]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800828e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	b2db      	uxtb	r3, r3
 8008296:	697a      	ldr	r2, [r7, #20]
 8008298:	4313      	orrs	r3, r2
 800829a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	693a      	ldr	r2, [r7, #16]
 80082bc:	621a      	str	r2, [r3, #32]
}
 80082be:	bf00      	nop
 80082c0:	371c      	adds	r7, #28
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bc80      	pop	{r7}
 80082c6:	4770      	bx	lr

080082c8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b087      	sub	sp, #28
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	69db      	ldr	r3, [r3, #28]
 80082e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008306:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	031b      	lsls	r3, r3, #12
 800830c:	b29b      	uxth	r3, r3
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800831a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	031b      	lsls	r3, r3, #12
 8008320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008324:	693a      	ldr	r2, [r7, #16]
 8008326:	4313      	orrs	r3, r2
 8008328:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	621a      	str	r2, [r3, #32]
}
 8008336:	bf00      	nop
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	bc80      	pop	{r7}
 800833e:	4770      	bx	lr

08008340 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	4313      	orrs	r3, r2
 800835e:	f043 0307 	orr.w	r3, r3, #7
 8008362:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	68fa      	ldr	r2, [r7, #12]
 8008368:	609a      	str	r2, [r3, #8]
}
 800836a:	bf00      	nop
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008374:	b480      	push	{r7}
 8008376:	b087      	sub	sp, #28
 8008378:	af00      	add	r7, sp, #0
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	607a      	str	r2, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800838e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	021a      	lsls	r2, r3, #8
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	431a      	orrs	r2, r3
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4313      	orrs	r3, r2
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4313      	orrs	r3, r2
 80083a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	609a      	str	r2, [r3, #8]
}
 80083a8:	bf00      	nop
 80083aa:	371c      	adds	r7, #28
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bc80      	pop	{r7}
 80083b0:	4770      	bx	lr

080083b2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b087      	sub	sp, #28
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	60f8      	str	r0, [r7, #12]
 80083ba:	60b9      	str	r1, [r7, #8]
 80083bc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	f003 031f 	and.w	r3, r3, #31
 80083c4:	2201      	movs	r2, #1
 80083c6:	fa02 f303 	lsl.w	r3, r2, r3
 80083ca:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6a1a      	ldr	r2, [r3, #32]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	43db      	mvns	r3, r3
 80083d4:	401a      	ands	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6a1a      	ldr	r2, [r3, #32]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	fa01 f303 	lsl.w	r3, r1, r3
 80083ea:	431a      	orrs	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bc80      	pop	{r7}
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b08a      	sub	sp, #40	; 0x28
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e09a      	b.n	8008546 <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 f8d6 	bl	80085d6 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2202      	movs	r2, #2
 800842e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3304      	adds	r3, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7ff fb9d 	bl	8007b7c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	6819      	ldr	r1, [r3, #0]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2203      	movs	r2, #3
 8008450:	f7ff fe0c 	bl	800806c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 020c 	bic.w	r2, r2, #12
 8008462:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6999      	ldr	r1, [r3, #24]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008484:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008494:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689a      	ldr	r2, [r3, #8]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a4:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	689a      	ldr	r2, [r3, #8]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0207 	bic.w	r2, r2, #7
 80084b4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	689a      	ldr	r2, [r3, #8]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f042 0204 	orr.w	r2, r2, #4
 80084c4:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80084ca:	2300      	movs	r3, #0
 80084cc:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80084ce:	2370      	movs	r3, #112	; 0x70
 80084d0:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80084d2:	2300      	movs	r3, #0
 80084d4:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80084d6:	2300      	movs	r3, #0
 80084d8:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80084da:	2300      	movs	r3, #0
 80084dc:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f107 020c 	add.w	r2, r7, #12
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7ff fc0c 	bl	8007d0c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008502:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8008512:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3728      	adds	r7, #40	; 0x28
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_TIMEx_HallSensor_DeInit>:
  * @brief  DeInitializes the TIM Hall Sensor interface
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_DeInit(TIM_HandleTypeDef *htim)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2202      	movs	r2, #2
 800855a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	6a1a      	ldr	r2, [r3, #32]
 8008564:	f241 1311 	movw	r3, #4369	; 0x1111
 8008568:	4013      	ands	r3, r2
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10f      	bne.n	800858e <HAL_TIMEx_HallSensor_DeInit+0x40>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	6a1a      	ldr	r2, [r3, #32]
 8008574:	f240 4344 	movw	r3, #1092	; 0x444
 8008578:	4013      	ands	r3, r2
 800857a:	2b00      	cmp	r3, #0
 800857c:	d107      	bne.n	800858e <HAL_TIMEx_HallSensor_DeInit+0x40>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f022 0201 	bic.w	r2, r2, #1
 800858c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->HallSensor_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIMEx_HallSensor_MspDeInit(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f82a 	bl	80085e8 <HAL_TIMEx_HallSensor_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bc80      	pop	{r7}
 80085e6:	4770      	bx	lr

080085e8 <HAL_TIMEx_HallSensor_MspDeInit>:
  * @brief  DeInitializes TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspDeInit(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b083      	sub	sp, #12
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspDeInit could be implemented in the user file
   */
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bc80      	pop	{r7}
 80085f8:	4770      	bx	lr

080085fa <HAL_TIMEx_HallSensor_Start>:
  * @brief  Starts the TIM Hall Sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start(TIM_HandleTypeDef *htim)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008608:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008610:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008618:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008620:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008622:	7bfb      	ldrb	r3, [r7, #15]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d108      	bne.n	800863a <HAL_TIMEx_HallSensor_Start+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008628:	7bbb      	ldrb	r3, [r7, #14]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d105      	bne.n	800863a <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800862e:	7b7b      	ldrb	r3, [r7, #13]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d102      	bne.n	800863a <HAL_TIMEx_HallSensor_Start+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008634:	7b3b      	ldrb	r3, [r7, #12]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d001      	beq.n	800863e <HAL_TIMEx_HallSensor_Start+0x44>
  {
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e045      	b.n	80086ca <HAL_TIMEx_HallSensor_Start+0xd0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2202      	movs	r2, #2
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2202      	movs	r2, #2
 800864a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2202      	movs	r2, #2
 8008652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff fea3 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a18      	ldr	r2, [pc, #96]	; (80086d4 <HAL_TIMEx_HallSensor_Start+0xda>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d00e      	beq.n	8008694 <HAL_TIMEx_HallSensor_Start+0x9a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867e:	d009      	beq.n	8008694 <HAL_TIMEx_HallSensor_Start+0x9a>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <HAL_TIMEx_HallSensor_Start+0xde>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d004      	beq.n	8008694 <HAL_TIMEx_HallSensor_Start+0x9a>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a13      	ldr	r2, [pc, #76]	; (80086dc <HAL_TIMEx_HallSensor_Start+0xe2>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d111      	bne.n	80086b8 <HAL_TIMEx_HallSensor_Start+0xbe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	2b06      	cmp	r3, #6
 80086a4:	d010      	beq.n	80086c8 <HAL_TIMEx_HallSensor_Start+0xce>
    {
      __HAL_TIM_ENABLE(htim);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0201 	orr.w	r2, r2, #1
 80086b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b6:	e007      	b.n	80086c8 <HAL_TIMEx_HallSensor_Start+0xce>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f042 0201 	orr.w	r2, r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	40012c00 	.word	0x40012c00
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800

080086e0 <HAL_TIMEx_HallSensor_Stop>:
  * @brief  Stops the TIM Hall sensor Interface.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop(TIM_HandleTypeDef *htim)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1, 2 and 3
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2200      	movs	r2, #0
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7ff fe5e 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6a1a      	ldr	r2, [r3, #32]
 80086fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8008700:	4013      	ands	r3, r2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10f      	bne.n	8008726 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	f240 4344 	movw	r3, #1092	; 0x444
 8008710:	4013      	ands	r3, r2
 8008712:	2b00      	cmp	r3, #0
 8008714:	d107      	bne.n	8008726 <HAL_TIMEx_HallSensor_Stop+0x46>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008746:	2300      	movs	r3, #0
}
 8008748:	4618      	mov	r0, r3
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800875e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008766:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800876e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008776:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008778:	7bfb      	ldrb	r3, [r7, #15]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d108      	bne.n	8008790 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d105      	bne.n	8008790 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008784:	7b7b      	ldrb	r3, [r7, #13]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d102      	bne.n	8008790 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800878a:	7b3b      	ldrb	r3, [r7, #12]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d001      	beq.n	8008794 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e04d      	b.n	8008830 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f042 0202 	orr.w	r2, r2, #2
 80087c2:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2201      	movs	r2, #1
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7ff fdf0 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00e      	beq.n	80087fa <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e4:	d009      	beq.n	80087fa <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a14      	ldr	r2, [pc, #80]	; (800883c <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d004      	beq.n	80087fa <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a12      	ldr	r2, [pc, #72]	; (8008840 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d111      	bne.n	800881e <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b06      	cmp	r3, #6
 800880a:	d010      	beq.n	800882e <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881c:	e007      	b.n	800882e <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	40012c00 	.word	0x40012c00
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800

08008844 <HAL_TIMEx_HallSensor_Stop_IT>:
  * @brief  Stops the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2200      	movs	r2, #0
 8008852:	2100      	movs	r1, #0
 8008854:	4618      	mov	r0, r3
 8008856:	f7ff fdac 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the capture compare Interrupts event */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68da      	ldr	r2, [r3, #12]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0202 	bic.w	r2, r2, #2
 8008868:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	f241 1311 	movw	r3, #4369	; 0x1111
 8008874:	4013      	ands	r3, r2
 8008876:	2b00      	cmp	r3, #0
 8008878:	d10f      	bne.n	800889a <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	f240 4344 	movw	r3, #1092	; 0x444
 8008884:	4013      	ands	r3, r2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d107      	bne.n	800889a <HAL_TIMEx_HallSensor_Stop_IT+0x56>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 0201 	bic.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3708      	adds	r7, #8
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}

080088c4 <HAL_TIMEx_HallSensor_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_DMA(TIM_HandleTypeDef *htim, uint32_t *pData, uint16_t Length)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d8:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80088e0:	75bb      	strb	r3, [r7, #22]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d002      	beq.n	80088ee <HAL_TIMEx_HallSensor_Start_DMA+0x2a>
      || (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80088e8:	7dbb      	ldrb	r3, [r7, #22]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d101      	bne.n	80088f2 <HAL_TIMEx_HallSensor_Start_DMA+0x2e>
  {
    return HAL_BUSY;
 80088ee:	2302      	movs	r3, #2
 80088f0:	e072      	b.n	80089d8 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  }
  else if ((channel_1_state == HAL_TIM_CHANNEL_STATE_READY)
 80088f2:	7dfb      	ldrb	r3, [r7, #23]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d134      	bne.n	8008962 <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
           && (complementary_channel_1_state == HAL_TIM_CHANNEL_STATE_READY))
 80088f8:	7dbb      	ldrb	r3, [r7, #22]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d131      	bne.n	8008962 <HAL_TIMEx_HallSensor_Start_DMA+0x9e>
  {
    if ((pData == NULL) && (Length > 0U))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d104      	bne.n	800890e <HAL_TIMEx_HallSensor_Start_DMA+0x4a>
 8008904:	88fb      	ldrh	r3, [r7, #6]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <HAL_TIMEx_HallSensor_Start_DMA+0x4a>
    {
      return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e064      	b.n	80089d8 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2202      	movs	r2, #2
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 800891e:	bf00      	nop
    return HAL_ERROR;
  }

  /* Enable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2201      	movs	r2, #1
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f7ff fd42 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Set the DMA Input Capture 1 Callbacks */
  htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	4a2b      	ldr	r2, [pc, #172]	; (80089e0 <HAL_TIMEx_HallSensor_Start_DMA+0x11c>)
 8008934:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893a:	4a2a      	ldr	r2, [pc, #168]	; (80089e4 <HAL_TIMEx_HallSensor_Start_DMA+0x120>)
 800893c:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008942:	4a29      	ldr	r2, [pc, #164]	; (80089e8 <HAL_TIMEx_HallSensor_Start_DMA+0x124>)
 8008944:	631a      	str	r2, [r3, #48]	; 0x30

  /* Enable the DMA channel for Capture 1*/
  if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	3334      	adds	r3, #52	; 0x34
 8008950:	4619      	mov	r1, r3
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	f7f8 fc45 	bl	80011e4 <HAL_DMA_Start_IT>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d004      	beq.n	800896a <HAL_TIMEx_HallSensor_Start_DMA+0xa6>
 8008960:	e001      	b.n	8008966 <HAL_TIMEx_HallSensor_Start_DMA+0xa2>
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e038      	b.n	80089d8 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  {
    /* Return error status */
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e036      	b.n	80089d8 <HAL_TIMEx_HallSensor_Start_DMA+0x114>
  }
  /* Enable the capture compare 1 Interrupt */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68da      	ldr	r2, [r3, #12]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008978:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <HAL_TIMEx_HallSensor_Start_DMA+0x128>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d00e      	beq.n	80089a2 <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800898c:	d009      	beq.n	80089a2 <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a17      	ldr	r2, [pc, #92]	; (80089f0 <HAL_TIMEx_HallSensor_Start_DMA+0x12c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_TIMEx_HallSensor_Start_DMA+0xde>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <HAL_TIMEx_HallSensor_Start_DMA+0x130>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d111      	bne.n	80089c6 <HAL_TIMEx_HallSensor_Start_DMA+0x102>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f003 0307 	and.w	r3, r3, #7
 80089ac:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	2b06      	cmp	r3, #6
 80089b2:	d010      	beq.n	80089d6 <HAL_TIMEx_HallSensor_Start_DMA+0x112>
    {
      __HAL_TIM_ENABLE(htim);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f042 0201 	orr.w	r2, r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c4:	e007      	b.n	80089d6 <HAL_TIMEx_HallSensor_Start_DMA+0x112>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0201 	orr.w	r2, r2, #1
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	080079b9 	.word	0x080079b9
 80089e4:	08007a81 	.word	0x08007a81
 80089e8:	08007817 	.word	0x08007817
 80089ec:	40012c00 	.word	0x40012c00
 80089f0:	40000400 	.word	0x40000400
 80089f4:	40000800 	.word	0x40000800

080089f8 <HAL_TIMEx_HallSensor_Stop_DMA>:
  * @brief  Stops the TIM Hall Sensor Interface in DMA mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Stop_DMA(TIM_HandleTypeDef *htim)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channel 1
    (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1, TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2200      	movs	r2, #0
 8008a06:	2100      	movs	r1, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fcd2 	bl	80083b2 <TIM_CCxChannelCmd>


  /* Disable the capture compare Interrupts 1 event */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68da      	ldr	r2, [r3, #12]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a1c:	60da      	str	r2, [r3, #12]

  (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7f8 fc77 	bl	8001316 <HAL_DMA_Abort_IT>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6a1a      	ldr	r2, [r3, #32]
 8008a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008a32:	4013      	ands	r3, r2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10f      	bne.n	8008a58 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8008a42:	4013      	ands	r3, r2
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d107      	bne.n	8008a58 <HAL_TIMEx_HallSensor_Stop_DMA+0x60>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f022 0201 	bic.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Return function status */
  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3708      	adds	r7, #8
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_TIMEx_OCN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d109      	bne.n	8008a96 <HAL_TIMEx_OCN_Start+0x24>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	bf14      	ite	ne
 8008a8e:	2301      	movne	r3, #1
 8008a90:	2300      	moveq	r3, #0
 8008a92:	b2db      	uxtb	r3, r3
 8008a94:	e022      	b.n	8008adc <HAL_TIMEx_OCN_Start+0x6a>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d109      	bne.n	8008ab0 <HAL_TIMEx_OCN_Start+0x3e>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	bf14      	ite	ne
 8008aa8:	2301      	movne	r3, #1
 8008aaa:	2300      	moveq	r3, #0
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	e015      	b.n	8008adc <HAL_TIMEx_OCN_Start+0x6a>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b08      	cmp	r3, #8
 8008ab4:	d109      	bne.n	8008aca <HAL_TIMEx_OCN_Start+0x58>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	e008      	b.n	8008adc <HAL_TIMEx_OCN_Start+0x6a>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	bf14      	ite	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	2300      	moveq	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d001      	beq.n	8008ae4 <HAL_TIMEx_OCN_Start+0x72>
  {
    return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e059      	b.n	8008b98 <HAL_TIMEx_OCN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <HAL_TIMEx_OCN_Start+0x82>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008af2:	e013      	b.n	8008b1c <HAL_TIMEx_OCN_Start+0xaa>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b04      	cmp	r3, #4
 8008af8:	d104      	bne.n	8008b04 <HAL_TIMEx_OCN_Start+0x92>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2202      	movs	r2, #2
 8008afe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008b02:	e00b      	b.n	8008b1c <HAL_TIMEx_OCN_Start+0xaa>
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	2b08      	cmp	r3, #8
 8008b08:	d104      	bne.n	8008b14 <HAL_TIMEx_OCN_Start+0xa2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b12:	e003      	b.n	8008b1c <HAL_TIMEx_OCN_Start+0xaa>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2204      	movs	r2, #4
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f001 fda0 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b38:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <HAL_TIMEx_OCN_Start+0x12e>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d00e      	beq.n	8008b62 <HAL_TIMEx_OCN_Start+0xf0>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b4c:	d009      	beq.n	8008b62 <HAL_TIMEx_OCN_Start+0xf0>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a14      	ldr	r2, [pc, #80]	; (8008ba4 <HAL_TIMEx_OCN_Start+0x132>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d004      	beq.n	8008b62 <HAL_TIMEx_OCN_Start+0xf0>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a12      	ldr	r2, [pc, #72]	; (8008ba8 <HAL_TIMEx_OCN_Start+0x136>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d111      	bne.n	8008b86 <HAL_TIMEx_OCN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2b06      	cmp	r3, #6
 8008b72:	d010      	beq.n	8008b96 <HAL_TIMEx_OCN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b84:	e007      	b.n	8008b96 <HAL_TIMEx_OCN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	40012c00 	.word	0x40012c00
 8008ba4:	40000400 	.word	0x40000400
 8008ba8:	40000800 	.word	0x40000800

08008bac <HAL_TIMEx_OCN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fd53 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	6a1a      	ldr	r2, [r3, #32]
 8008bca:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10f      	bne.n	8008bf4 <HAL_TIMEx_OCN_Stop+0x48>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6a1a      	ldr	r2, [r3, #32]
 8008bda:	f240 4344 	movw	r3, #1092	; 0x444
 8008bde:	4013      	ands	r3, r2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d107      	bne.n	8008bf4 <HAL_TIMEx_OCN_Stop+0x48>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6a1a      	ldr	r2, [r3, #32]
 8008bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008bfe:	4013      	ands	r3, r2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10f      	bne.n	8008c24 <HAL_TIMEx_OCN_Stop+0x78>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6a1a      	ldr	r2, [r3, #32]
 8008c0a:	f240 4344 	movw	r3, #1092	; 0x444
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d107      	bne.n	8008c24 <HAL_TIMEx_OCN_Stop+0x78>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0201 	bic.w	r2, r2, #1
 8008c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <HAL_TIMEx_OCN_Stop+0x88>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c32:	e013      	b.n	8008c5c <HAL_TIMEx_OCN_Stop+0xb0>
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d104      	bne.n	8008c44 <HAL_TIMEx_OCN_Stop+0x98>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c42:	e00b      	b.n	8008c5c <HAL_TIMEx_OCN_Stop+0xb0>
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b08      	cmp	r3, #8
 8008c48:	d104      	bne.n	8008c54 <HAL_TIMEx_OCN_Stop+0xa8>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c52:	e003      	b.n	8008c5c <HAL_TIMEx_OCN_Stop+0xb0>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <HAL_TIMEx_OCN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b084      	sub	sp, #16
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <HAL_TIMEx_OCN_Start_IT+0x24>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	bf14      	ite	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	2300      	moveq	r3, #0
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	e022      	b.n	8008cd0 <HAL_TIMEx_OCN_Start_IT+0x6a>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d109      	bne.n	8008ca4 <HAL_TIMEx_OCN_Start_IT+0x3e>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	bf14      	ite	ne
 8008c9c:	2301      	movne	r3, #1
 8008c9e:	2300      	moveq	r3, #0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	e015      	b.n	8008cd0 <HAL_TIMEx_OCN_Start_IT+0x6a>
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	2b08      	cmp	r3, #8
 8008ca8:	d109      	bne.n	8008cbe <HAL_TIMEx_OCN_Start_IT+0x58>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	bf14      	ite	ne
 8008cb6:	2301      	movne	r3, #1
 8008cb8:	2300      	moveq	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	e008      	b.n	8008cd0 <HAL_TIMEx_OCN_Start_IT+0x6a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	bf14      	ite	ne
 8008cca:	2301      	movne	r3, #1
 8008ccc:	2300      	moveq	r3, #0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <HAL_TIMEx_OCN_Start_IT+0x72>
  {
    return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e08a      	b.n	8008dee <HAL_TIMEx_OCN_Start_IT+0x188>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d104      	bne.n	8008ce8 <HAL_TIMEx_OCN_Start_IT+0x82>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ce6:	e013      	b.n	8008d10 <HAL_TIMEx_OCN_Start_IT+0xaa>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d104      	bne.n	8008cf8 <HAL_TIMEx_OCN_Start_IT+0x92>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cf6:	e00b      	b.n	8008d10 <HAL_TIMEx_OCN_Start_IT+0xaa>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d104      	bne.n	8008d08 <HAL_TIMEx_OCN_Start_IT+0xa2>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2202      	movs	r2, #2
 8008d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d06:	e003      	b.n	8008d10 <HAL_TIMEx_OCN_Start_IT+0xaa>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	2b08      	cmp	r3, #8
 8008d14:	d01b      	beq.n	8008d4e <HAL_TIMEx_OCN_Start_IT+0xe8>
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d821      	bhi.n	8008d60 <HAL_TIMEx_OCN_Start_IT+0xfa>
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIMEx_OCN_Start_IT+0xc4>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d009      	beq.n	8008d3c <HAL_TIMEx_OCN_Start_IT+0xd6>
      break;
    }


    default:
      break;
 8008d28:	e01a      	b.n	8008d60 <HAL_TIMEx_OCN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f042 0202 	orr.w	r2, r2, #2
 8008d38:	60da      	str	r2, [r3, #12]
      break;
 8008d3a:	e012      	b.n	8008d62 <HAL_TIMEx_OCN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68da      	ldr	r2, [r3, #12]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f042 0204 	orr.w	r2, r2, #4
 8008d4a:	60da      	str	r2, [r3, #12]
      break;
 8008d4c:	e009      	b.n	8008d62 <HAL_TIMEx_OCN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0208 	orr.w	r2, r2, #8
 8008d5c:	60da      	str	r2, [r3, #12]
      break;
 8008d5e:	e000      	b.n	8008d62 <HAL_TIMEx_OCN_Start_IT+0xfc>
      break;
 8008d60:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68da      	ldr	r2, [r3, #12]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008d70:	60da      	str	r2, [r3, #12]

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2204      	movs	r2, #4
 8008d78:	6839      	ldr	r1, [r7, #0]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f001 fc75 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <HAL_TIMEx_OCN_Start_IT+0x192>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d00e      	beq.n	8008db8 <HAL_TIMEx_OCN_Start_IT+0x152>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008da2:	d009      	beq.n	8008db8 <HAL_TIMEx_OCN_Start_IT+0x152>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a14      	ldr	r2, [pc, #80]	; (8008dfc <HAL_TIMEx_OCN_Start_IT+0x196>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d004      	beq.n	8008db8 <HAL_TIMEx_OCN_Start_IT+0x152>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a13      	ldr	r2, [pc, #76]	; (8008e00 <HAL_TIMEx_OCN_Start_IT+0x19a>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d111      	bne.n	8008ddc <HAL_TIMEx_OCN_Start_IT+0x176>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 0307 	and.w	r3, r3, #7
 8008dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b06      	cmp	r3, #6
 8008dc8:	d010      	beq.n	8008dec <HAL_TIMEx_OCN_Start_IT+0x186>
    {
      __HAL_TIM_ENABLE(htim);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0201 	orr.w	r2, r2, #1
 8008dd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dda:	e007      	b.n	8008dec <HAL_TIMEx_OCN_Start_IT+0x186>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f042 0201 	orr.w	r2, r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40012c00 	.word	0x40012c00
 8008dfc:	40000400 	.word	0x40000400
 8008e00:	40000800 	.word	0x40000800

08008e04 <HAL_TIMEx_OCN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b08      	cmp	r3, #8
 8008e12:	d01b      	beq.n	8008e4c <HAL_TIMEx_OCN_Stop_IT+0x48>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2b08      	cmp	r3, #8
 8008e18:	d821      	bhi.n	8008e5e <HAL_TIMEx_OCN_Stop_IT+0x5a>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d003      	beq.n	8008e28 <HAL_TIMEx_OCN_Stop_IT+0x24>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d009      	beq.n	8008e3a <HAL_TIMEx_OCN_Stop_IT+0x36>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8008e26:	e01a      	b.n	8008e5e <HAL_TIMEx_OCN_Stop_IT+0x5a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0202 	bic.w	r2, r2, #2
 8008e36:	60da      	str	r2, [r3, #12]
      break;
 8008e38:	e012      	b.n	8008e60 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68da      	ldr	r2, [r3, #12]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0204 	bic.w	r2, r2, #4
 8008e48:	60da      	str	r2, [r3, #12]
      break;
 8008e4a:	e009      	b.n	8008e60 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68da      	ldr	r2, [r3, #12]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f022 0208 	bic.w	r2, r2, #8
 8008e5a:	60da      	str	r2, [r3, #12]
      break;
 8008e5c:	e000      	b.n	8008e60 <HAL_TIMEx_OCN_Stop_IT+0x5c>
      break;
 8008e5e:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2200      	movs	r2, #0
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f001 fbfe 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6a1b      	ldr	r3, [r3, #32]
 8008e74:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	f240 4344 	movw	r3, #1092	; 0x444
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d107      	bne.n	8008e92 <HAL_TIMEx_OCN_Stop_IT+0x8e>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68da      	ldr	r2, [r3, #12]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e90:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	6a1a      	ldr	r2, [r3, #32]
 8008e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10f      	bne.n	8008ec2 <HAL_TIMEx_OCN_Stop_IT+0xbe>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6a1a      	ldr	r2, [r3, #32]
 8008ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d107      	bne.n	8008ec2 <HAL_TIMEx_OCN_Stop_IT+0xbe>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6a1a      	ldr	r2, [r3, #32]
 8008ec8:	f241 1311 	movw	r3, #4369	; 0x1111
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10f      	bne.n	8008ef2 <HAL_TIMEx_OCN_Stop_IT+0xee>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	f240 4344 	movw	r3, #1092	; 0x444
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d107      	bne.n	8008ef2 <HAL_TIMEx_OCN_Stop_IT+0xee>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0201 	bic.w	r2, r2, #1
 8008ef0:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIMEx_OCN_Stop_IT+0xfe>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f00:	e013      	b.n	8008f2a <HAL_TIMEx_OCN_Stop_IT+0x126>
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	2b04      	cmp	r3, #4
 8008f06:	d104      	bne.n	8008f12 <HAL_TIMEx_OCN_Stop_IT+0x10e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f10:	e00b      	b.n	8008f2a <HAL_TIMEx_OCN_Stop_IT+0x126>
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b08      	cmp	r3, #8
 8008f16:	d104      	bne.n	8008f22 <HAL_TIMEx_OCN_Stop_IT+0x11e>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f20:	e003      	b.n	8008f2a <HAL_TIMEx_OCN_Stop_IT+0x126>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_TIMEx_OCN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b086      	sub	sp, #24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d109      	bne.n	8008f5c <HAL_TIMEx_OCN_Start_DMA+0x28>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	e022      	b.n	8008fa2 <HAL_TIMEx_OCN_Start_DMA+0x6e>
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d109      	bne.n	8008f76 <HAL_TIMEx_OCN_Start_DMA+0x42>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	bf0c      	ite	eq
 8008f6e:	2301      	moveq	r3, #1
 8008f70:	2300      	movne	r3, #0
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	e015      	b.n	8008fa2 <HAL_TIMEx_OCN_Start_DMA+0x6e>
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	2b08      	cmp	r3, #8
 8008f7a:	d109      	bne.n	8008f90 <HAL_TIMEx_OCN_Start_DMA+0x5c>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b02      	cmp	r3, #2
 8008f86:	bf0c      	ite	eq
 8008f88:	2301      	moveq	r3, #1
 8008f8a:	2300      	movne	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	e008      	b.n	8008fa2 <HAL_TIMEx_OCN_Start_DMA+0x6e>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f96:	b2db      	uxtb	r3, r3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2301      	moveq	r3, #1
 8008f9e:	2300      	movne	r3, #0
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <HAL_TIMEx_OCN_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8008fa6:	2302      	movs	r3, #2
 8008fa8:	e110      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <HAL_TIMEx_OCN_Start_DMA+0x90>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	bf0c      	ite	eq
 8008fbc:	2301      	moveq	r3, #1
 8008fbe:	2300      	movne	r3, #0
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	e022      	b.n	800900a <HAL_TIMEx_OCN_Start_DMA+0xd6>
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2b04      	cmp	r3, #4
 8008fc8:	d109      	bne.n	8008fde <HAL_TIMEx_OCN_Start_DMA+0xaa>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	bf0c      	ite	eq
 8008fd6:	2301      	moveq	r3, #1
 8008fd8:	2300      	movne	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	e015      	b.n	800900a <HAL_TIMEx_OCN_Start_DMA+0xd6>
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b08      	cmp	r3, #8
 8008fe2:	d109      	bne.n	8008ff8 <HAL_TIMEx_OCN_Start_DMA+0xc4>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	bf0c      	ite	eq
 8008ff0:	2301      	moveq	r3, #1
 8008ff2:	2300      	movne	r3, #0
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	e008      	b.n	800900a <HAL_TIMEx_OCN_Start_DMA+0xd6>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	bf0c      	ite	eq
 8009004:	2301      	moveq	r3, #1
 8009006:	2300      	movne	r3, #0
 8009008:	b2db      	uxtb	r3, r3
 800900a:	2b00      	cmp	r3, #0
 800900c:	d024      	beq.n	8009058 <HAL_TIMEx_OCN_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d104      	bne.n	800901e <HAL_TIMEx_OCN_Start_DMA+0xea>
 8009014:	887b      	ldrh	r3, [r7, #2]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_TIMEx_OCN_Start_DMA+0xea>
    {
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e0d6      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d104      	bne.n	800902e <HAL_TIMEx_OCN_Start_DMA+0xfa>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800902c:	e016      	b.n	800905c <HAL_TIMEx_OCN_Start_DMA+0x128>
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	2b04      	cmp	r3, #4
 8009032:	d104      	bne.n	800903e <HAL_TIMEx_OCN_Start_DMA+0x10a>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800903c:	e00e      	b.n	800905c <HAL_TIMEx_OCN_Start_DMA+0x128>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	2b08      	cmp	r3, #8
 8009042:	d104      	bne.n	800904e <HAL_TIMEx_OCN_Start_DMA+0x11a>
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800904c:	e006      	b.n	800905c <HAL_TIMEx_OCN_Start_DMA+0x128>
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2202      	movs	r2, #2
 8009052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009056:	e001      	b.n	800905c <HAL_TIMEx_OCN_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	e0b7      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
  }

  switch (Channel)
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b08      	cmp	r3, #8
 8009060:	d051      	beq.n	8009106 <HAL_TIMEx_OCN_Start_DMA+0x1d2>
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b08      	cmp	r3, #8
 8009066:	d872      	bhi.n	800914e <HAL_TIMEx_OCN_Start_DMA+0x21a>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_TIMEx_OCN_Start_DMA+0x142>
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	2b04      	cmp	r3, #4
 8009072:	d024      	beq.n	80090be <HAL_TIMEx_OCN_Start_DMA+0x18a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 8009074:	e06b      	b.n	800914e <HAL_TIMEx_OCN_Start_DMA+0x21a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	4a56      	ldr	r2, [pc, #344]	; (80091d4 <HAL_TIMEx_OCN_Start_DMA+0x2a0>)
 800907c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	4a55      	ldr	r2, [pc, #340]	; (80091d8 <HAL_TIMEx_OCN_Start_DMA+0x2a4>)
 8009084:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	4a54      	ldr	r2, [pc, #336]	; (80091dc <HAL_TIMEx_OCN_Start_DMA+0x2a8>)
 800908c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009092:	6879      	ldr	r1, [r7, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	3334      	adds	r3, #52	; 0x34
 800909a:	461a      	mov	r2, r3
 800909c:	887b      	ldrh	r3, [r7, #2]
 800909e:	f7f8 f8a1 	bl	80011e4 <HAL_DMA_Start_IT>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_TIMEx_OCN_Start_DMA+0x178>
        return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e08f      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	68da      	ldr	r2, [r3, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090ba:	60da      	str	r2, [r3, #12]
      break;
 80090bc:	e048      	b.n	8009150 <HAL_TIMEx_OCN_Start_DMA+0x21c>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	4a44      	ldr	r2, [pc, #272]	; (80091d4 <HAL_TIMEx_OCN_Start_DMA+0x2a0>)
 80090c4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	4a43      	ldr	r2, [pc, #268]	; (80091d8 <HAL_TIMEx_OCN_Start_DMA+0x2a4>)
 80090cc:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d2:	4a42      	ldr	r2, [pc, #264]	; (80091dc <HAL_TIMEx_OCN_Start_DMA+0x2a8>)
 80090d4:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	3338      	adds	r3, #56	; 0x38
 80090e2:	461a      	mov	r2, r3
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	f7f8 f87d 	bl	80011e4 <HAL_DMA_Start_IT>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <HAL_TIMEx_OCN_Start_DMA+0x1c0>
        return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e06b      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009102:	60da      	str	r2, [r3, #12]
      break;
 8009104:	e024      	b.n	8009150 <HAL_TIMEx_OCN_Start_DMA+0x21c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	4a32      	ldr	r2, [pc, #200]	; (80091d4 <HAL_TIMEx_OCN_Start_DMA+0x2a0>)
 800910c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	4a31      	ldr	r2, [pc, #196]	; (80091d8 <HAL_TIMEx_OCN_Start_DMA+0x2a4>)
 8009114:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911a:	4a30      	ldr	r2, [pc, #192]	; (80091dc <HAL_TIMEx_OCN_Start_DMA+0x2a8>)
 800911c:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009122:	6879      	ldr	r1, [r7, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	333c      	adds	r3, #60	; 0x3c
 800912a:	461a      	mov	r2, r3
 800912c:	887b      	ldrh	r3, [r7, #2]
 800912e:	f7f8 f859 	bl	80011e4 <HAL_DMA_Start_IT>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <HAL_TIMEx_OCN_Start_DMA+0x208>
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e047      	b.n	80091cc <HAL_TIMEx_OCN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	68da      	ldr	r2, [r3, #12]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800914a:	60da      	str	r2, [r3, #12]
      break;
 800914c:	e000      	b.n	8009150 <HAL_TIMEx_OCN_Start_DMA+0x21c>
      break;
 800914e:	bf00      	nop
  }

  /* Enable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2204      	movs	r2, #4
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f001 fa86 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800916c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <HAL_TIMEx_OCN_Start_DMA+0x2ac>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00e      	beq.n	8009196 <HAL_TIMEx_OCN_Start_DMA+0x262>
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009180:	d009      	beq.n	8009196 <HAL_TIMEx_OCN_Start_DMA+0x262>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a17      	ldr	r2, [pc, #92]	; (80091e4 <HAL_TIMEx_OCN_Start_DMA+0x2b0>)
 8009188:	4293      	cmp	r3, r2
 800918a:	d004      	beq.n	8009196 <HAL_TIMEx_OCN_Start_DMA+0x262>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a15      	ldr	r2, [pc, #84]	; (80091e8 <HAL_TIMEx_OCN_Start_DMA+0x2b4>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d111      	bne.n	80091ba <HAL_TIMEx_OCN_Start_DMA+0x286>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	2b06      	cmp	r3, #6
 80091a6:	d010      	beq.n	80091ca <HAL_TIMEx_OCN_Start_DMA+0x296>
    {
      __HAL_TIM_ENABLE(htim);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0201 	orr.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091b8:	e007      	b.n	80091ca <HAL_TIMEx_OCN_Start_DMA+0x296>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0201 	orr.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3718      	adds	r7, #24
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	0800a555 	.word	0x0800a555
 80091d8:	08007951 	.word	0x08007951
 80091dc:	0800a5fd 	.word	0x0800a5fd
 80091e0:	40012c00 	.word	0x40012c00
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800

080091ec <HAL_TIMEx_OCN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OCN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b08      	cmp	r3, #8
 80091fa:	d025      	beq.n	8009248 <HAL_TIMEx_OCN_Stop_DMA+0x5c>
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	2b08      	cmp	r3, #8
 8009200:	d830      	bhi.n	8009264 <HAL_TIMEx_OCN_Stop_DMA+0x78>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <HAL_TIMEx_OCN_Stop_DMA+0x24>
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b04      	cmp	r3, #4
 800920c:	d00e      	beq.n	800922c <HAL_TIMEx_OCN_Stop_DMA+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 800920e:	e029      	b.n	8009264 <HAL_TIMEx_OCN_Stop_DMA+0x78>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68da      	ldr	r2, [r3, #12]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800921e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009224:	4618      	mov	r0, r3
 8009226:	f7f8 f876 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 800922a:	e01c      	b.n	8009266 <HAL_TIMEx_OCN_Stop_DMA+0x7a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68da      	ldr	r2, [r3, #12]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800923a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009240:	4618      	mov	r0, r3
 8009242:	f7f8 f868 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8009246:	e00e      	b.n	8009266 <HAL_TIMEx_OCN_Stop_DMA+0x7a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68da      	ldr	r2, [r3, #12]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009256:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925c:	4618      	mov	r0, r3
 800925e:	f7f8 f85a 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8009262:	e000      	b.n	8009266 <HAL_TIMEx_OCN_Stop_DMA+0x7a>
      break;
 8009264:	bf00      	nop
  }

  /* Disable the Capture compare channel N */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	6839      	ldr	r1, [r7, #0]
 800926e:	4618      	mov	r0, r3
 8009270:	f001 f9fb 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6a1a      	ldr	r2, [r3, #32]
 800927a:	f241 1311 	movw	r3, #4369	; 0x1111
 800927e:	4013      	ands	r3, r2
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10f      	bne.n	80092a4 <HAL_TIMEx_OCN_Stop_DMA+0xb8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	6a1a      	ldr	r2, [r3, #32]
 800928a:	f240 4344 	movw	r3, #1092	; 0x444
 800928e:	4013      	ands	r3, r2
 8009290:	2b00      	cmp	r3, #0
 8009292:	d107      	bne.n	80092a4 <HAL_TIMEx_OCN_Stop_DMA+0xb8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6a1a      	ldr	r2, [r3, #32]
 80092aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10f      	bne.n	80092d4 <HAL_TIMEx_OCN_Stop_DMA+0xe8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	6a1a      	ldr	r2, [r3, #32]
 80092ba:	f240 4344 	movw	r3, #1092	; 0x444
 80092be:	4013      	ands	r3, r2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d107      	bne.n	80092d4 <HAL_TIMEx_OCN_Stop_DMA+0xe8>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 0201 	bic.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <HAL_TIMEx_OCN_Stop_DMA+0xf8>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e2:	e013      	b.n	800930c <HAL_TIMEx_OCN_Stop_DMA+0x120>
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d104      	bne.n	80092f4 <HAL_TIMEx_OCN_Stop_DMA+0x108>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f2:	e00b      	b.n	800930c <HAL_TIMEx_OCN_Stop_DMA+0x120>
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2b08      	cmp	r3, #8
 80092f8:	d104      	bne.n	8009304 <HAL_TIMEx_OCN_Stop_DMA+0x118>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009302:	e003      	b.n	800930c <HAL_TIMEx_OCN_Stop_DMA+0x120>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2201      	movs	r2, #1
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d109      	bne.n	800933a <HAL_TIMEx_PWMN_Start+0x24>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b01      	cmp	r3, #1
 8009330:	bf14      	ite	ne
 8009332:	2301      	movne	r3, #1
 8009334:	2300      	moveq	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	e022      	b.n	8009380 <HAL_TIMEx_PWMN_Start+0x6a>
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2b04      	cmp	r3, #4
 800933e:	d109      	bne.n	8009354 <HAL_TIMEx_PWMN_Start+0x3e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b01      	cmp	r3, #1
 800934a:	bf14      	ite	ne
 800934c:	2301      	movne	r3, #1
 800934e:	2300      	moveq	r3, #0
 8009350:	b2db      	uxtb	r3, r3
 8009352:	e015      	b.n	8009380 <HAL_TIMEx_PWMN_Start+0x6a>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b08      	cmp	r3, #8
 8009358:	d109      	bne.n	800936e <HAL_TIMEx_PWMN_Start+0x58>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b01      	cmp	r3, #1
 8009364:	bf14      	ite	ne
 8009366:	2301      	movne	r3, #1
 8009368:	2300      	moveq	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	e008      	b.n	8009380 <HAL_TIMEx_PWMN_Start+0x6a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b01      	cmp	r3, #1
 8009378:	bf14      	ite	ne
 800937a:	2301      	movne	r3, #1
 800937c:	2300      	moveq	r3, #0
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e059      	b.n	800943c <HAL_TIMEx_PWMN_Start+0x126>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d104      	bne.n	8009398 <HAL_TIMEx_PWMN_Start+0x82>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2202      	movs	r2, #2
 8009392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009396:	e013      	b.n	80093c0 <HAL_TIMEx_PWMN_Start+0xaa>
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	2b04      	cmp	r3, #4
 800939c:	d104      	bne.n	80093a8 <HAL_TIMEx_PWMN_Start+0x92>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093a6:	e00b      	b.n	80093c0 <HAL_TIMEx_PWMN_Start+0xaa>
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b08      	cmp	r3, #8
 80093ac:	d104      	bne.n	80093b8 <HAL_TIMEx_PWMN_Start+0xa2>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2202      	movs	r2, #2
 80093b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093b6:	e003      	b.n	80093c0 <HAL_TIMEx_PWMN_Start+0xaa>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2204      	movs	r2, #4
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f001 f94e 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a18      	ldr	r2, [pc, #96]	; (8009444 <HAL_TIMEx_PWMN_Start+0x12e>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d00e      	beq.n	8009406 <HAL_TIMEx_PWMN_Start+0xf0>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093f0:	d009      	beq.n	8009406 <HAL_TIMEx_PWMN_Start+0xf0>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a14      	ldr	r2, [pc, #80]	; (8009448 <HAL_TIMEx_PWMN_Start+0x132>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d004      	beq.n	8009406 <HAL_TIMEx_PWMN_Start+0xf0>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a12      	ldr	r2, [pc, #72]	; (800944c <HAL_TIMEx_PWMN_Start+0x136>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d111      	bne.n	800942a <HAL_TIMEx_PWMN_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 0307 	and.w	r3, r3, #7
 8009410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b06      	cmp	r3, #6
 8009416:	d010      	beq.n	800943a <HAL_TIMEx_PWMN_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0201 	orr.w	r2, r2, #1
 8009426:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009428:	e007      	b.n	800943a <HAL_TIMEx_PWMN_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800943a:	2300      	movs	r3, #0
}
 800943c:	4618      	mov	r0, r3
 800943e:	3710      	adds	r7, #16
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	40012c00 	.word	0x40012c00
 8009448:	40000400 	.word	0x40000400
 800944c:	40000800 	.word	0x40000800

08009450 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2200      	movs	r2, #0
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f001 f901 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6a1a      	ldr	r2, [r3, #32]
 800946e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009472:	4013      	ands	r3, r2
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10f      	bne.n	8009498 <HAL_TIMEx_PWMN_Stop+0x48>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6a1a      	ldr	r2, [r3, #32]
 800947e:	f240 4344 	movw	r3, #1092	; 0x444
 8009482:	4013      	ands	r3, r2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d107      	bne.n	8009498 <HAL_TIMEx_PWMN_Stop+0x48>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009496:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6a1a      	ldr	r2, [r3, #32]
 800949e:	f241 1311 	movw	r3, #4369	; 0x1111
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10f      	bne.n	80094c8 <HAL_TIMEx_PWMN_Stop+0x78>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6a1a      	ldr	r2, [r3, #32]
 80094ae:	f240 4344 	movw	r3, #1092	; 0x444
 80094b2:	4013      	ands	r3, r2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <HAL_TIMEx_PWMN_Stop+0x78>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f022 0201 	bic.w	r2, r2, #1
 80094c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d104      	bne.n	80094d8 <HAL_TIMEx_PWMN_Stop+0x88>
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80094d6:	e013      	b.n	8009500 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2b04      	cmp	r3, #4
 80094dc:	d104      	bne.n	80094e8 <HAL_TIMEx_PWMN_Stop+0x98>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80094e6:	e00b      	b.n	8009500 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	2b08      	cmp	r3, #8
 80094ec:	d104      	bne.n	80094f8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094f6:	e003      	b.n	8009500 <HAL_TIMEx_PWMN_Stop+0xb0>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b084      	sub	sp, #16
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
 8009512:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_TIMEx_PWMN_Start_IT+0x24>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009520:	b2db      	uxtb	r3, r3
 8009522:	2b01      	cmp	r3, #1
 8009524:	bf14      	ite	ne
 8009526:	2301      	movne	r3, #1
 8009528:	2300      	moveq	r3, #0
 800952a:	b2db      	uxtb	r3, r3
 800952c:	e022      	b.n	8009574 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b04      	cmp	r3, #4
 8009532:	d109      	bne.n	8009548 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800953a:	b2db      	uxtb	r3, r3
 800953c:	2b01      	cmp	r3, #1
 800953e:	bf14      	ite	ne
 8009540:	2301      	movne	r3, #1
 8009542:	2300      	moveq	r3, #0
 8009544:	b2db      	uxtb	r3, r3
 8009546:	e015      	b.n	8009574 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b08      	cmp	r3, #8
 800954c:	d109      	bne.n	8009562 <HAL_TIMEx_PWMN_Start_IT+0x58>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	bf14      	ite	ne
 800955a:	2301      	movne	r3, #1
 800955c:	2300      	moveq	r3, #0
 800955e:	b2db      	uxtb	r3, r3
 8009560:	e008      	b.n	8009574 <HAL_TIMEx_PWMN_Start_IT+0x6a>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009568:	b2db      	uxtb	r3, r3
 800956a:	2b01      	cmp	r3, #1
 800956c:	bf14      	ite	ne
 800956e:	2301      	movne	r3, #1
 8009570:	2300      	moveq	r3, #0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <HAL_TIMEx_PWMN_Start_IT+0x72>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e08a      	b.n	8009692 <HAL_TIMEx_PWMN_Start_IT+0x188>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d104      	bne.n	800958c <HAL_TIMEx_PWMN_Start_IT+0x82>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2202      	movs	r2, #2
 8009586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800958a:	e013      	b.n	80095b4 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	2b04      	cmp	r3, #4
 8009590:	d104      	bne.n	800959c <HAL_TIMEx_PWMN_Start_IT+0x92>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2202      	movs	r2, #2
 8009596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800959a:	e00b      	b.n	80095b4 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b08      	cmp	r3, #8
 80095a0:	d104      	bne.n	80095ac <HAL_TIMEx_PWMN_Start_IT+0xa2>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80095aa:	e003      	b.n	80095b4 <HAL_TIMEx_PWMN_Start_IT+0xaa>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	2b08      	cmp	r3, #8
 80095b8:	d01b      	beq.n	80095f2 <HAL_TIMEx_PWMN_Start_IT+0xe8>
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	2b08      	cmp	r3, #8
 80095be:	d821      	bhi.n	8009604 <HAL_TIMEx_PWMN_Start_IT+0xfa>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d003      	beq.n	80095ce <HAL_TIMEx_PWMN_Start_IT+0xc4>
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	2b04      	cmp	r3, #4
 80095ca:	d009      	beq.n	80095e0 <HAL_TIMEx_PWMN_Start_IT+0xd6>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80095cc:	e01a      	b.n	8009604 <HAL_TIMEx_PWMN_Start_IT+0xfa>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68da      	ldr	r2, [r3, #12]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0202 	orr.w	r2, r2, #2
 80095dc:	60da      	str	r2, [r3, #12]
      break;
 80095de:	e012      	b.n	8009606 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68da      	ldr	r2, [r3, #12]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0204 	orr.w	r2, r2, #4
 80095ee:	60da      	str	r2, [r3, #12]
      break;
 80095f0:	e009      	b.n	8009606 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68da      	ldr	r2, [r3, #12]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f042 0208 	orr.w	r2, r2, #8
 8009600:	60da      	str	r2, [r3, #12]
      break;
 8009602:	e000      	b.n	8009606 <HAL_TIMEx_PWMN_Start_IT+0xfc>
      break;
 8009604:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68da      	ldr	r2, [r3, #12]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009614:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2204      	movs	r2, #4
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	4618      	mov	r0, r3
 8009620:	f001 f823 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009632:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a18      	ldr	r2, [pc, #96]	; (800969c <HAL_TIMEx_PWMN_Start_IT+0x192>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d00e      	beq.n	800965c <HAL_TIMEx_PWMN_Start_IT+0x152>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009646:	d009      	beq.n	800965c <HAL_TIMEx_PWMN_Start_IT+0x152>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a14      	ldr	r2, [pc, #80]	; (80096a0 <HAL_TIMEx_PWMN_Start_IT+0x196>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d004      	beq.n	800965c <HAL_TIMEx_PWMN_Start_IT+0x152>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a13      	ldr	r2, [pc, #76]	; (80096a4 <HAL_TIMEx_PWMN_Start_IT+0x19a>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d111      	bne.n	8009680 <HAL_TIMEx_PWMN_Start_IT+0x176>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b06      	cmp	r3, #6
 800966c:	d010      	beq.n	8009690 <HAL_TIMEx_PWMN_Start_IT+0x186>
    {
      __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967e:	e007      	b.n	8009690 <HAL_TIMEx_PWMN_Start_IT+0x186>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f042 0201 	orr.w	r2, r2, #1
 800968e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	40012c00 	.word	0x40012c00
 80096a0:	40000400 	.word	0x40000400
 80096a4:	40000800 	.word	0x40000800

080096a8 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d01b      	beq.n	80096f0 <HAL_TIMEx_PWMN_Stop_IT+0x48>
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b08      	cmp	r3, #8
 80096bc:	d821      	bhi.n	8009702 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d003      	beq.n	80096cc <HAL_TIMEx_PWMN_Stop_IT+0x24>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	2b04      	cmp	r3, #4
 80096c8:	d009      	beq.n	80096de <HAL_TIMEx_PWMN_Stop_IT+0x36>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80096ca:	e01a      	b.n	8009702 <HAL_TIMEx_PWMN_Stop_IT+0x5a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	68da      	ldr	r2, [r3, #12]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f022 0202 	bic.w	r2, r2, #2
 80096da:	60da      	str	r2, [r3, #12]
      break;
 80096dc:	e012      	b.n	8009704 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0204 	bic.w	r2, r2, #4
 80096ec:	60da      	str	r2, [r3, #12]
      break;
 80096ee:	e009      	b.n	8009704 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0208 	bic.w	r2, r2, #8
 80096fe:	60da      	str	r2, [r3, #12]
      break;
 8009700:	e000      	b.n	8009704 <HAL_TIMEx_PWMN_Stop_IT+0x5c>
      break;
 8009702:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	2200      	movs	r2, #0
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	4618      	mov	r0, r3
 800970e:	f000 ffac 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a1b      	ldr	r3, [r3, #32]
 8009718:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f240 4344 	movw	r3, #1092	; 0x444
 8009720:	4013      	ands	r3, r2
 8009722:	2b00      	cmp	r3, #0
 8009724:	d107      	bne.n	8009736 <HAL_TIMEx_PWMN_Stop_IT+0x8e>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68da      	ldr	r2, [r3, #12]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009734:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	6a1a      	ldr	r2, [r3, #32]
 800973c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009740:	4013      	ands	r3, r2
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10f      	bne.n	8009766 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	f240 4344 	movw	r3, #1092	; 0x444
 8009750:	4013      	ands	r3, r2
 8009752:	2b00      	cmp	r3, #0
 8009754:	d107      	bne.n	8009766 <HAL_TIMEx_PWMN_Stop_IT+0xbe>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009764:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	6a1a      	ldr	r2, [r3, #32]
 800976c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009770:	4013      	ands	r3, r2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d10f      	bne.n	8009796 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	6a1a      	ldr	r2, [r3, #32]
 800977c:	f240 4344 	movw	r3, #1092	; 0x444
 8009780:	4013      	ands	r3, r2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d107      	bne.n	8009796 <HAL_TIMEx_PWMN_Stop_IT+0xee>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0201 	bic.w	r2, r2, #1
 8009794:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <HAL_TIMEx_PWMN_Stop_IT+0xfe>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097a4:	e013      	b.n	80097ce <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	2b04      	cmp	r3, #4
 80097aa:	d104      	bne.n	80097b6 <HAL_TIMEx_PWMN_Stop_IT+0x10e>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097b4:	e00b      	b.n	80097ce <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b08      	cmp	r3, #8
 80097ba:	d104      	bne.n	80097c6 <HAL_TIMEx_PWMN_Stop_IT+0x11e>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c4:	e003      	b.n	80097ce <HAL_TIMEx_PWMN_Stop_IT+0x126>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2201      	movs	r2, #1
 80097ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <HAL_TIMEx_PWMN_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b086      	sub	sp, #24
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Set the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <HAL_TIMEx_PWMN_Start_DMA+0x28>
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	bf0c      	ite	eq
 80097f8:	2301      	moveq	r3, #1
 80097fa:	2300      	movne	r3, #0
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	e022      	b.n	8009846 <HAL_TIMEx_PWMN_Start_DMA+0x6e>
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	2b04      	cmp	r3, #4
 8009804:	d109      	bne.n	800981a <HAL_TIMEx_PWMN_Start_DMA+0x42>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b02      	cmp	r3, #2
 8009810:	bf0c      	ite	eq
 8009812:	2301      	moveq	r3, #1
 8009814:	2300      	movne	r3, #0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	e015      	b.n	8009846 <HAL_TIMEx_PWMN_Start_DMA+0x6e>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b08      	cmp	r3, #8
 800981e:	d109      	bne.n	8009834 <HAL_TIMEx_PWMN_Start_DMA+0x5c>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009826:	b2db      	uxtb	r3, r3
 8009828:	2b02      	cmp	r3, #2
 800982a:	bf0c      	ite	eq
 800982c:	2301      	moveq	r3, #1
 800982e:	2300      	movne	r3, #0
 8009830:	b2db      	uxtb	r3, r3
 8009832:	e008      	b.n	8009846 <HAL_TIMEx_PWMN_Start_DMA+0x6e>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800983a:	b2db      	uxtb	r3, r3
 800983c:	2b02      	cmp	r3, #2
 800983e:	bf0c      	ite	eq
 8009840:	2301      	moveq	r3, #1
 8009842:	2300      	movne	r3, #0
 8009844:	b2db      	uxtb	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <HAL_TIMEx_PWMN_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800984a:	2302      	movs	r3, #2
 800984c:	e110      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
  }
  else if (TIM_CHANNEL_N_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d109      	bne.n	8009868 <HAL_TIMEx_PWMN_Start_DMA+0x90>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800985a:	b2db      	uxtb	r3, r3
 800985c:	2b01      	cmp	r3, #1
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	e022      	b.n	80098ae <HAL_TIMEx_PWMN_Start_DMA+0xd6>
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	2b04      	cmp	r3, #4
 800986c:	d109      	bne.n	8009882 <HAL_TIMEx_PWMN_Start_DMA+0xaa>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b01      	cmp	r3, #1
 8009878:	bf0c      	ite	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	2300      	movne	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	e015      	b.n	80098ae <HAL_TIMEx_PWMN_Start_DMA+0xd6>
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2b08      	cmp	r3, #8
 8009886:	d109      	bne.n	800989c <HAL_TIMEx_PWMN_Start_DMA+0xc4>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b01      	cmp	r3, #1
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	e008      	b.n	80098ae <HAL_TIMEx_PWMN_Start_DMA+0xd6>
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	bf0c      	ite	eq
 80098a8:	2301      	moveq	r3, #1
 80098aa:	2300      	movne	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d024      	beq.n	80098fc <HAL_TIMEx_PWMN_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d104      	bne.n	80098c2 <HAL_TIMEx_PWMN_Start_DMA+0xea>
 80098b8:	887b      	ldrh	r3, [r7, #2]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d001      	beq.n	80098c2 <HAL_TIMEx_PWMN_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e0d6      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
    }
    else
    {
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d104      	bne.n	80098d2 <HAL_TIMEx_PWMN_Start_DMA+0xfa>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2202      	movs	r2, #2
 80098cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d0:	e016      	b.n	8009900 <HAL_TIMEx_PWMN_Start_DMA+0x128>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	2b04      	cmp	r3, #4
 80098d6:	d104      	bne.n	80098e2 <HAL_TIMEx_PWMN_Start_DMA+0x10a>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098e0:	e00e      	b.n	8009900 <HAL_TIMEx_PWMN_Start_DMA+0x128>
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d104      	bne.n	80098f2 <HAL_TIMEx_PWMN_Start_DMA+0x11a>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f0:	e006      	b.n	8009900 <HAL_TIMEx_PWMN_Start_DMA+0x128>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2202      	movs	r2, #2
 80098f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098fa:	e001      	b.n	8009900 <HAL_TIMEx_PWMN_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e0b7      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
  }

  switch (Channel)
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	2b08      	cmp	r3, #8
 8009904:	d051      	beq.n	80099aa <HAL_TIMEx_PWMN_Start_DMA+0x1d2>
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b08      	cmp	r3, #8
 800990a:	d872      	bhi.n	80099f2 <HAL_TIMEx_PWMN_Start_DMA+0x21a>
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_TIMEx_PWMN_Start_DMA+0x142>
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2b04      	cmp	r3, #4
 8009916:	d024      	beq.n	8009962 <HAL_TIMEx_PWMN_Start_DMA+0x18a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
      break;
    }

    default:
      break;
 8009918:	e06b      	b.n	80099f2 <HAL_TIMEx_PWMN_Start_DMA+0x21a>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991e:	4a56      	ldr	r2, [pc, #344]	; (8009a78 <HAL_TIMEx_PWMN_Start_DMA+0x2a0>)
 8009920:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009926:	4a55      	ldr	r2, [pc, #340]	; (8009a7c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>)
 8009928:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAErrorCCxN ;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	4a54      	ldr	r2, [pc, #336]	; (8009a80 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>)
 8009930:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	3334      	adds	r3, #52	; 0x34
 800993e:	461a      	mov	r2, r3
 8009940:	887b      	ldrh	r3, [r7, #2]
 8009942:	f7f7 fc4f 	bl	80011e4 <HAL_DMA_Start_IT>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <HAL_TIMEx_PWMN_Start_DMA+0x178>
        return HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	e08f      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800995e:	60da      	str	r2, [r3, #12]
      break;
 8009960:	e048      	b.n	80099f4 <HAL_TIMEx_PWMN_Start_DMA+0x21c>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	4a44      	ldr	r2, [pc, #272]	; (8009a78 <HAL_TIMEx_PWMN_Start_DMA+0x2a0>)
 8009968:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800996e:	4a43      	ldr	r2, [pc, #268]	; (8009a7c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>)
 8009970:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAErrorCCxN ;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009976:	4a42      	ldr	r2, [pc, #264]	; (8009a80 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>)
 8009978:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	3338      	adds	r3, #56	; 0x38
 8009986:	461a      	mov	r2, r3
 8009988:	887b      	ldrh	r3, [r7, #2]
 800998a:	f7f7 fc2b 	bl	80011e4 <HAL_DMA_Start_IT>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <HAL_TIMEx_PWMN_Start_DMA+0x1c0>
        return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e06b      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	68da      	ldr	r2, [r3, #12]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80099a6:	60da      	str	r2, [r3, #12]
      break;
 80099a8:	e024      	b.n	80099f4 <HAL_TIMEx_PWMN_Start_DMA+0x21c>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseNCplt;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ae:	4a32      	ldr	r2, [pc, #200]	; (8009a78 <HAL_TIMEx_PWMN_Start_DMA+0x2a0>)
 80099b0:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b6:	4a31      	ldr	r2, [pc, #196]	; (8009a7c <HAL_TIMEx_PWMN_Start_DMA+0x2a4>)
 80099b8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAErrorCCxN ;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099be:	4a30      	ldr	r2, [pc, #192]	; (8009a80 <HAL_TIMEx_PWMN_Start_DMA+0x2a8>)
 80099c0:	631a      	str	r2, [r3, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	333c      	adds	r3, #60	; 0x3c
 80099ce:	461a      	mov	r2, r3
 80099d0:	887b      	ldrh	r3, [r7, #2]
 80099d2:	f7f7 fc07 	bl	80011e4 <HAL_DMA_Start_IT>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <HAL_TIMEx_PWMN_Start_DMA+0x208>
        return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e047      	b.n	8009a70 <HAL_TIMEx_PWMN_Start_DMA+0x298>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	68da      	ldr	r2, [r3, #12]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099ee:	60da      	str	r2, [r3, #12]
      break;
 80099f0:	e000      	b.n	80099f4 <HAL_TIMEx_PWMN_Start_DMA+0x21c>
      break;
 80099f2:	bf00      	nop
  }

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2204      	movs	r2, #4
 80099fa:	68b9      	ldr	r1, [r7, #8]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fe34 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1b      	ldr	r2, [pc, #108]	; (8009a84 <HAL_TIMEx_PWMN_Start_DMA+0x2ac>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00e      	beq.n	8009a3a <HAL_TIMEx_PWMN_Start_DMA+0x262>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a24:	d009      	beq.n	8009a3a <HAL_TIMEx_PWMN_Start_DMA+0x262>
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <HAL_TIMEx_PWMN_Start_DMA+0x2b0>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d004      	beq.n	8009a3a <HAL_TIMEx_PWMN_Start_DMA+0x262>
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a15      	ldr	r2, [pc, #84]	; (8009a8c <HAL_TIMEx_PWMN_Start_DMA+0x2b4>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d111      	bne.n	8009a5e <HAL_TIMEx_PWMN_Start_DMA+0x286>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	f003 0307 	and.w	r3, r3, #7
 8009a44:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b06      	cmp	r3, #6
 8009a4a:	d010      	beq.n	8009a6e <HAL_TIMEx_PWMN_Start_DMA+0x296>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f042 0201 	orr.w	r2, r2, #1
 8009a5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5c:	e007      	b.n	8009a6e <HAL_TIMEx_PWMN_Start_DMA+0x296>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f042 0201 	orr.w	r2, r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	0800a555 	.word	0x0800a555
 8009a7c:	08007951 	.word	0x08007951
 8009a80:	0800a5fd 	.word	0x0800a5fd
 8009a84:	40012c00 	.word	0x40012c00
 8009a88:	40000400 	.word	0x40000400
 8009a8c:	40000800 	.word	0x40000800

08009a90 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	2b08      	cmp	r3, #8
 8009a9e:	d025      	beq.n	8009aec <HAL_TIMEx_PWMN_Stop_DMA+0x5c>
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d830      	bhi.n	8009b08 <HAL_TIMEx_PWMN_Stop_DMA+0x78>
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d003      	beq.n	8009ab4 <HAL_TIMEx_PWMN_Stop_DMA+0x24>
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	2b04      	cmp	r3, #4
 8009ab0:	d00e      	beq.n	8009ad0 <HAL_TIMEx_PWMN_Stop_DMA+0x40>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
      break;
    }

    default:
      break;
 8009ab2:	e029      	b.n	8009b08 <HAL_TIMEx_PWMN_Stop_DMA+0x78>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ac2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7f7 fc24 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8009ace:	e01c      	b.n	8009b0a <HAL_TIMEx_PWMN_Stop_DMA+0x7a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68da      	ldr	r2, [r3, #12]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ade:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7f7 fc16 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8009aea:	e00e      	b.n	8009b0a <HAL_TIMEx_PWMN_Stop_DMA+0x7a>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68da      	ldr	r2, [r3, #12]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009afa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f7 fc08 	bl	8001316 <HAL_DMA_Abort_IT>
      break;
 8009b06:	e000      	b.n	8009b0a <HAL_TIMEx_PWMN_Stop_DMA+0x7a>
      break;
 8009b08:	bf00      	nop
  }

  /* Disable the complementary PWM output */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	6839      	ldr	r1, [r7, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fda9 	bl	800a66a <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b22:	4013      	ands	r3, r2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10f      	bne.n	8009b48 <HAL_TIMEx_PWMN_Stop_DMA+0xb8>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	f240 4344 	movw	r3, #1092	; 0x444
 8009b32:	4013      	ands	r3, r2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <HAL_TIMEx_PWMN_Stop_DMA+0xb8>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009b46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	6a1a      	ldr	r2, [r3, #32]
 8009b4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b52:	4013      	ands	r3, r2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10f      	bne.n	8009b78 <HAL_TIMEx_PWMN_Stop_DMA+0xe8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	6a1a      	ldr	r2, [r3, #32]
 8009b5e:	f240 4344 	movw	r3, #1092	; 0x444
 8009b62:	4013      	ands	r3, r2
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d107      	bne.n	8009b78 <HAL_TIMEx_PWMN_Stop_DMA+0xe8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f022 0201 	bic.w	r2, r2, #1
 8009b76:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d104      	bne.n	8009b88 <HAL_TIMEx_PWMN_Stop_DMA+0xf8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2201      	movs	r2, #1
 8009b82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b86:	e013      	b.n	8009bb0 <HAL_TIMEx_PWMN_Stop_DMA+0x120>
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	2b04      	cmp	r3, #4
 8009b8c:	d104      	bne.n	8009b98 <HAL_TIMEx_PWMN_Stop_DMA+0x108>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b96:	e00b      	b.n	8009bb0 <HAL_TIMEx_PWMN_Stop_DMA+0x120>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d104      	bne.n	8009ba8 <HAL_TIMEx_PWMN_Stop_DMA+0x118>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ba6:	e003      	b.n	8009bb0 <HAL_TIMEx_PWMN_Stop_DMA+0x120>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2201      	movs	r2, #1
 8009bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <HAL_TIMEx_OnePulseN_Start>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	6078      	str	r0, [r7, #4]
 8009bc2:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <HAL_TIMEx_OnePulseN_Start+0x14>
 8009bca:	2304      	movs	r3, #4
 8009bcc:	e000      	b.n	8009bd0 <HAL_TIMEx_OnePulseN_Start+0x16>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef input_channel_state = TIM_CHANNEL_STATE_GET(htim, input_channel);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIMEx_OnePulseN_Start+0x28>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	e013      	b.n	8009c0a <HAL_TIMEx_OnePulseN_Start+0x50>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b04      	cmp	r3, #4
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIMEx_OnePulseN_Start+0x38>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	e00b      	b.n	8009c0a <HAL_TIMEx_OnePulseN_Start+0x50>
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d104      	bne.n	8009c02 <HAL_TIMEx_OnePulseN_Start+0x48>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e003      	b.n	8009c0a <HAL_TIMEx_OnePulseN_Start+0x50>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef output_channel_state = TIM_CHANNEL_N_STATE_GET(htim, OutputChannel);
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d104      	bne.n	8009c1c <HAL_TIMEx_OnePulseN_Start+0x62>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	e013      	b.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x8a>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	2b04      	cmp	r3, #4
 8009c20:	d104      	bne.n	8009c2c <HAL_TIMEx_OnePulseN_Start+0x72>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	e00b      	b.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x8a>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d104      	bne.n	8009c3c <HAL_TIMEx_OnePulseN_Start+0x82>
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	e003      	b.n	8009c44 <HAL_TIMEx_OnePulseN_Start+0x8a>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	72bb      	strb	r3, [r7, #10]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((output_channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009c46:	7abb      	ldrb	r3, [r7, #10]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d102      	bne.n	8009c52 <HAL_TIMEx_OnePulseN_Start+0x98>
      || (input_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009c4c:	7afb      	ldrb	r3, [r7, #11]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d001      	beq.n	8009c56 <HAL_TIMEx_OnePulseN_Start+0x9c>
  {
    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e04e      	b.n	8009cf4 <HAL_TIMEx_OnePulseN_Start+0x13a>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_N_STATE_SET(htim, OutputChannel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d104      	bne.n	8009c66 <HAL_TIMEx_OnePulseN_Start+0xac>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c64:	e013      	b.n	8009c8e <HAL_TIMEx_OnePulseN_Start+0xd4>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b04      	cmp	r3, #4
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIMEx_OnePulseN_Start+0xbc>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c74:	e00b      	b.n	8009c8e <HAL_TIMEx_OnePulseN_Start+0xd4>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d104      	bne.n	8009c86 <HAL_TIMEx_OnePulseN_Start+0xcc>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c84:	e003      	b.n	8009c8e <HAL_TIMEx_OnePulseN_Start+0xd4>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  TIM_CHANNEL_STATE_SET(htim, input_channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <HAL_TIMEx_OnePulseN_Start+0xe4>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2202      	movs	r2, #2
 8009c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c9c:	e013      	b.n	8009cc6 <HAL_TIMEx_OnePulseN_Start+0x10c>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d104      	bne.n	8009cae <HAL_TIMEx_OnePulseN_Start+0xf4>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2202      	movs	r2, #2
 8009ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cac:	e00b      	b.n	8009cc6 <HAL_TIMEx_OnePulseN_Start+0x10c>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b08      	cmp	r3, #8
 8009cb2:	d104      	bne.n	8009cbe <HAL_TIMEx_OnePulseN_Start+0x104>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cbc:	e003      	b.n	8009cc6 <HAL_TIMEx_OnePulseN_Start+0x10c>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2204      	movs	r2, #4
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f000 fccb 	bl	800a66a <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	68f9      	ldr	r1, [r7, #12]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fe fb68 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cf0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <HAL_TIMEx_OnePulseN_Stop>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <HAL_TIMEx_OnePulseN_Stop+0x14>
 8009d0c:	2304      	movs	r3, #4
 8009d0e:	e000      	b.n	8009d12 <HAL_TIMEx_OnePulseN_Stop+0x16>
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f000 fca4 	bl	800a66a <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2200      	movs	r2, #0
 8009d28:	68f9      	ldr	r1, [r7, #12]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7fe fb41 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	6a1a      	ldr	r2, [r3, #32]
 8009d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10f      	bne.n	8009d60 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6a1a      	ldr	r2, [r3, #32]
 8009d46:	f240 4344 	movw	r3, #1092	; 0x444
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <HAL_TIMEx_OnePulseN_Stop+0x64>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d5e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6a1a      	ldr	r2, [r3, #32]
 8009d66:	f241 1311 	movw	r3, #4369	; 0x1111
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10f      	bne.n	8009d90 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6a1a      	ldr	r2, [r3, #32]
 8009d76:	f240 4344 	movw	r3, #1092	; 0x444
 8009d7a:	4013      	ands	r3, r2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d107      	bne.n	8009d90 <HAL_TIMEx_OnePulseN_Stop+0x94>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0201 	bic.w	r2, r2, #1
 8009d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_N_STATE_SET(htim, OutputChannel, HAL_TIM_CHANNEL_STATE_READY);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d104      	bne.n	8009da0 <HAL_TIMEx_OnePulseN_Stop+0xa4>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d9e:	e013      	b.n	8009dc8 <HAL_TIMEx_OnePulseN_Stop+0xcc>
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	2b04      	cmp	r3, #4
 8009da4:	d104      	bne.n	8009db0 <HAL_TIMEx_OnePulseN_Stop+0xb4>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dae:	e00b      	b.n	8009dc8 <HAL_TIMEx_OnePulseN_Stop+0xcc>
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d104      	bne.n	8009dc0 <HAL_TIMEx_OnePulseN_Stop+0xc4>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009dbe:	e003      	b.n	8009dc8 <HAL_TIMEx_OnePulseN_Stop+0xcc>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  TIM_CHANNEL_STATE_SET(htim, input_channel, HAL_TIM_CHANNEL_STATE_READY);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <HAL_TIMEx_OnePulseN_Stop+0xdc>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dd6:	e013      	b.n	8009e00 <HAL_TIMEx_OnePulseN_Stop+0x104>
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d104      	bne.n	8009de8 <HAL_TIMEx_OnePulseN_Stop+0xec>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009de6:	e00b      	b.n	8009e00 <HAL_TIMEx_OnePulseN_Stop+0x104>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2b08      	cmp	r3, #8
 8009dec:	d104      	bne.n	8009df8 <HAL_TIMEx_OnePulseN_Stop+0xfc>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009df6:	e003      	b.n	8009e00 <HAL_TIMEx_OnePulseN_Stop+0x104>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8009e00:	2300      	movs	r3, #0
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3710      	adds	r7, #16
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <HAL_TIMEx_OnePulseN_Start_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
 8009e12:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <HAL_TIMEx_OnePulseN_Start_IT+0x14>
 8009e1a:	2304      	movs	r3, #4
 8009e1c:	e000      	b.n	8009e20 <HAL_TIMEx_OnePulseN_Start_IT+0x16>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
  HAL_TIM_ChannelStateTypeDef input_channel_state = TIM_CHANNEL_STATE_GET(htim, input_channel);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <HAL_TIMEx_OnePulseN_Start_IT+0x28>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	e013      	b.n	8009e5a <HAL_TIMEx_OnePulseN_Start_IT+0x50>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	d104      	bne.n	8009e42 <HAL_TIMEx_OnePulseN_Start_IT+0x38>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	e00b      	b.n	8009e5a <HAL_TIMEx_OnePulseN_Start_IT+0x50>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2b08      	cmp	r3, #8
 8009e46:	d104      	bne.n	8009e52 <HAL_TIMEx_OnePulseN_Start_IT+0x48>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	e003      	b.n	8009e5a <HAL_TIMEx_OnePulseN_Start_IT+0x50>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	72fb      	strb	r3, [r7, #11]
  HAL_TIM_ChannelStateTypeDef output_channel_state = TIM_CHANNEL_N_STATE_GET(htim, OutputChannel);
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d104      	bne.n	8009e6c <HAL_TIMEx_OnePulseN_Start_IT+0x62>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	e013      	b.n	8009e94 <HAL_TIMEx_OnePulseN_Start_IT+0x8a>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b04      	cmp	r3, #4
 8009e70:	d104      	bne.n	8009e7c <HAL_TIMEx_OnePulseN_Start_IT+0x72>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	e00b      	b.n	8009e94 <HAL_TIMEx_OnePulseN_Start_IT+0x8a>
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b08      	cmp	r3, #8
 8009e80:	d104      	bne.n	8009e8c <HAL_TIMEx_OnePulseN_Start_IT+0x82>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	e003      	b.n	8009e94 <HAL_TIMEx_OnePulseN_Start_IT+0x8a>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	72bb      	strb	r3, [r7, #10]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Check the TIM channels state */
  if ((output_channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009e96:	7abb      	ldrb	r3, [r7, #10]
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d102      	bne.n	8009ea2 <HAL_TIMEx_OnePulseN_Start_IT+0x98>
      || (input_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d001      	beq.n	8009ea6 <HAL_TIMEx_OnePulseN_Start_IT+0x9c>
  {
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e05e      	b.n	8009f64 <HAL_TIMEx_OnePulseN_Start_IT+0x15a>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_N_STATE_SET(htim, OutputChannel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d104      	bne.n	8009eb6 <HAL_TIMEx_OnePulseN_Start_IT+0xac>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eb4:	e013      	b.n	8009ede <HAL_TIMEx_OnePulseN_Start_IT+0xd4>
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d104      	bne.n	8009ec6 <HAL_TIMEx_OnePulseN_Start_IT+0xbc>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ec4:	e00b      	b.n	8009ede <HAL_TIMEx_OnePulseN_Start_IT+0xd4>
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	2b08      	cmp	r3, #8
 8009eca:	d104      	bne.n	8009ed6 <HAL_TIMEx_OnePulseN_Start_IT+0xcc>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ed4:	e003      	b.n	8009ede <HAL_TIMEx_OnePulseN_Start_IT+0xd4>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2202      	movs	r2, #2
 8009eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  TIM_CHANNEL_STATE_SET(htim, input_channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d104      	bne.n	8009eee <HAL_TIMEx_OnePulseN_Start_IT+0xe4>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2202      	movs	r2, #2
 8009ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009eec:	e013      	b.n	8009f16 <HAL_TIMEx_OnePulseN_Start_IT+0x10c>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d104      	bne.n	8009efe <HAL_TIMEx_OnePulseN_Start_IT+0xf4>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009efc:	e00b      	b.n	8009f16 <HAL_TIMEx_OnePulseN_Start_IT+0x10c>
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d104      	bne.n	8009f0e <HAL_TIMEx_OnePulseN_Start_IT+0x104>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f0c:	e003      	b.n	8009f16 <HAL_TIMEx_OnePulseN_Start_IT+0x10c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2202      	movs	r2, #2
 8009f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68da      	ldr	r2, [r3, #12]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 0202 	orr.w	r2, r2, #2
 8009f24:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68da      	ldr	r2, [r3, #12]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f042 0204 	orr.w	r2, r2, #4
 8009f34:	60da      	str	r2, [r3, #12]

  /* Enable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_ENABLE);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2204      	movs	r2, #4
 8009f3c:	6839      	ldr	r1, [r7, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 fb93 	bl	800a66a <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_ENABLE);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fe fa30 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f60:	645a      	str	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3710      	adds	r7, #16
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}

08009f6c <HAL_TIMEx_OnePulseN_Stop_IT>:
  *            @arg TIM_CHANNEL_1: TIM Channel 1 selected
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_OnePulseN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
  uint32_t input_channel = (OutputChannel == TIM_CHANNEL_1) ? TIM_CHANNEL_2 : TIM_CHANNEL_1;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d101      	bne.n	8009f80 <HAL_TIMEx_OnePulseN_Stop_IT+0x14>
 8009f7c:	2304      	movs	r3, #4
 8009f7e:	e000      	b.n	8009f82 <HAL_TIMEx_OnePulseN_Stop_IT+0x16>
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, OutputChannel));

  /* Disable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68da      	ldr	r2, [r3, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0202 	bic.w	r2, r2, #2
 8009f92:	60da      	str	r2, [r3, #12]

  /* Disable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0204 	bic.w	r2, r2, #4
 8009fa2:	60da      	str	r2, [r3, #12]

  /* Disable the complementary One Pulse output channel and the Input Capture channel */
  TIM_CCxNChannelCmd(htim->Instance, OutputChannel, TIM_CCxN_DISABLE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 fb5c 	bl	800a66a <TIM_CCxNChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, input_channel, TIM_CCx_DISABLE);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	68f9      	ldr	r1, [r7, #12]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe f9f9 	bl	80083b2 <TIM_CCxChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	6a1a      	ldr	r2, [r3, #32]
 8009fc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009fca:	4013      	ands	r3, r2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d10f      	bne.n	8009ff0 <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6a1a      	ldr	r2, [r3, #32]
 8009fd6:	f240 4344 	movw	r3, #1092	; 0x444
 8009fda:	4013      	ands	r3, r2
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d107      	bne.n	8009ff0 <HAL_TIMEx_OnePulseN_Stop_IT+0x84>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009fee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6a1a      	ldr	r2, [r3, #32]
 8009ff6:	f241 1311 	movw	r3, #4369	; 0x1111
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10f      	bne.n	800a020 <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6a1a      	ldr	r2, [r3, #32]
 800a006:	f240 4344 	movw	r3, #1092	; 0x444
 800a00a:	4013      	ands	r3, r2
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d107      	bne.n	800a020 <HAL_TIMEx_OnePulseN_Stop_IT+0xb4>
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0201 	bic.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  /* Set the TIM  channels state */
  TIM_CHANNEL_N_STATE_SET(htim, OutputChannel, HAL_TIM_CHANNEL_STATE_READY);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <HAL_TIMEx_OnePulseN_Stop_IT+0xc4>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a02e:	e013      	b.n	800a058 <HAL_TIMEx_OnePulseN_Stop_IT+0xec>
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	2b04      	cmp	r3, #4
 800a034:	d104      	bne.n	800a040 <HAL_TIMEx_OnePulseN_Stop_IT+0xd4>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a03e:	e00b      	b.n	800a058 <HAL_TIMEx_OnePulseN_Stop_IT+0xec>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b08      	cmp	r3, #8
 800a044:	d104      	bne.n	800a050 <HAL_TIMEx_OnePulseN_Stop_IT+0xe4>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a04e:	e003      	b.n	800a058 <HAL_TIMEx_OnePulseN_Stop_IT+0xec>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  TIM_CHANNEL_STATE_SET(htim, input_channel, HAL_TIM_CHANNEL_STATE_READY);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d104      	bne.n	800a068 <HAL_TIMEx_OnePulseN_Stop_IT+0xfc>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a066:	e013      	b.n	800a090 <HAL_TIMEx_OnePulseN_Stop_IT+0x124>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d104      	bne.n	800a078 <HAL_TIMEx_OnePulseN_Stop_IT+0x10c>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2201      	movs	r2, #1
 800a072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a076:	e00b      	b.n	800a090 <HAL_TIMEx_OnePulseN_Stop_IT+0x124>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b08      	cmp	r3, #8
 800a07c:	d104      	bne.n	800a088 <HAL_TIMEx_OnePulseN_Stop_IT+0x11c>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a086:	e003      	b.n	800a090 <HAL_TIMEx_OnePulseN_Stop_IT+0x124>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a090:	2300      	movs	r3, #0
}
 800a092:	4618      	mov	r0, r3
 800a094:	3710      	adds	r7, #16
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}

0800a09a <HAL_TIMEx_ConfigCommutEvent>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                              uint32_t  CommutationSource)
{
 800a09a:	b480      	push	{r7}
 800a09c:	b085      	sub	sp, #20
 800a09e:	af00      	add	r7, sp, #0
 800a0a0:	60f8      	str	r0, [r7, #12]
 800a0a2:	60b9      	str	r1, [r7, #8]
 800a0a4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d101      	bne.n	800a0b4 <HAL_TIMEx_ConfigCommutEvent+0x1a>
 800a0b0:	2302      	movs	r3, #2
 800a0b2:	e04c      	b.n	800a14e <HAL_TIMEx_ConfigCommutEvent+0xb4>
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d008      	beq.n	800a0d4 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b10      	cmp	r3, #16
 800a0c6:	d005      	beq.n	800a0d4 <HAL_TIMEx_ConfigCommutEvent+0x3a>
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2b20      	cmp	r3, #32
 800a0cc:	d002      	beq.n	800a0d4 <HAL_TIMEx_ConfigCommutEvent+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b30      	cmp	r3, #48	; 0x30
 800a0d2:	d10f      	bne.n	800a0f4 <HAL_TIMEx_ConfigCommutEvent+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	689a      	ldr	r2, [r3, #8]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0e2:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	6899      	ldr	r1, [r3, #8]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f042 0201 	orr.w	r2, r2, #1
 800a102:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f022 0204 	bic.w	r2, r2, #4
 800a112:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	6859      	ldr	r1, [r3, #4]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	430a      	orrs	r2, r1
 800a122:	605a      	str	r2, [r3, #4]

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68da      	ldr	r2, [r3, #12]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f022 0220 	bic.w	r2, r2, #32
 800a132:	60da      	str	r2, [r3, #12]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68da      	ldr	r2, [r3, #12]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a142:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr

0800a158 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 800a16e:	2302      	movs	r3, #2
 800a170:	e04c      	b.n	800a20c <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d008      	beq.n	800a192 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	2b10      	cmp	r3, #16
 800a184:	d005      	beq.n	800a192 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	2b20      	cmp	r3, #32
 800a18a:	d002      	beq.n	800a192 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b30      	cmp	r3, #48	; 0x30
 800a190:	d10f      	bne.n	800a1b2 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	689a      	ldr	r2, [r3, #8]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a1a0:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	6899      	ldr	r1, [r3, #8]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	68ba      	ldr	r2, [r7, #8]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f042 0201 	orr.w	r2, r2, #1
 800a1c0:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f022 0204 	bic.w	r2, r2, #4
 800a1d0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6859      	ldr	r1, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	68da      	ldr	r2, [r3, #12]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1f0:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68da      	ldr	r2, [r3, #12]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f042 0220 	orr.w	r2, r2, #32
 800a200:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	bc80      	pop	{r7}
 800a214:	4770      	bx	lr

0800a216 <HAL_TIMEx_ConfigCommutEvent_DMA>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_DMA(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                  uint32_t  CommutationSource)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	60f8      	str	r0, [r7, #12]
 800a21e:	60b9      	str	r1, [r7, #8]
 800a220:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d101      	bne.n	800a230 <HAL_TIMEx_ConfigCommutEvent_DMA+0x1a>
 800a22c:	2302      	movs	r3, #2
 800a22e:	e058      	b.n	800a2e2 <HAL_TIMEx_ConfigCommutEvent_DMA+0xcc>
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2201      	movs	r2, #1
 800a234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d008      	beq.n	800a250 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2b10      	cmp	r3, #16
 800a242:	d005      	beq.n	800a250 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2b20      	cmp	r3, #32
 800a248:	d002      	beq.n	800a250 <HAL_TIMEx_ConfigCommutEvent_DMA+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	2b30      	cmp	r3, #48	; 0x30
 800a24e:	d10f      	bne.n	800a270 <HAL_TIMEx_ConfigCommutEvent_DMA+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a25e:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6899      	ldr	r1, [r3, #8]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	430a      	orrs	r2, r1
 800a26e:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f042 0201 	orr.w	r2, r2, #1
 800a27e:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f022 0204 	bic.w	r2, r2, #4
 800a28e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	6859      	ldr	r1, [r3, #4]
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	605a      	str	r2, [r3, #4]

  /* Enable the Commutation DMA Request */
  /* Set the DMA Commutation Callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferCpltCallback = TIMEx_DMACommutationCplt;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	4a11      	ldr	r2, [pc, #68]	; (800a2ec <HAL_TIMEx_ConfigCommutEvent_DMA+0xd6>)
 800a2a6:	629a      	str	r2, [r3, #40]	; 0x28
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferHalfCpltCallback = TIMEx_DMACommutationHalfCplt;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2ac:	4a10      	ldr	r2, [pc, #64]	; (800a2f0 <HAL_TIMEx_ConfigCommutEvent_DMA+0xda>)
 800a2ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Set the DMA error callback */
  htim->hdma[TIM_DMA_ID_COMMUTATION]->XferErrorCallback = TIM_DMAError;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	4a0f      	ldr	r2, [pc, #60]	; (800a2f4 <HAL_TIMEx_ConfigCommutEvent_DMA+0xde>)
 800a2b6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable Commutation Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_COM);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68da      	ldr	r2, [r3, #12]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0220 	bic.w	r2, r2, #32
 800a2c6:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation DMA Request */
  __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_COM);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	68da      	ldr	r2, [r3, #12]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2d6:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bc80      	pop	{r7}
 800a2ea:	4770      	bx	lr
 800a2ec:	0800a50d 	.word	0x0800a50d
 800a2f0:	0800a531 	.word	0x0800a531
 800a2f4:	08007817 	.word	0x08007817

0800a2f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d101      	bne.n	800a310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a30c:	2302      	movs	r3, #2
 800a30e:	e046      	b.n	800a39e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a16      	ldr	r2, [pc, #88]	; (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d00e      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35c:	d009      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a12      	ldr	r2, [pc, #72]	; (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d004      	beq.n	800a372 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a10      	ldr	r2, [pc, #64]	; (800a3b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d10c      	bne.n	800a38c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	4313      	orrs	r3, r2
 800a382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68ba      	ldr	r2, [r7, #8]
 800a38a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bc80      	pop	{r7}
 800a3a6:	4770      	bx	lr
 800a3a8:	40012c00 	.word	0x40012c00
 800a3ac:	40000400 	.word	0x40000400
 800a3b0:	40000800 	.word	0x40000800

0800a3b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d101      	bne.n	800a3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a3cc:	2302      	movs	r3, #2
 800a3ce:	e03d      	b.n	800a44c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	4313      	orrs	r3, r2
 800a400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
 800a428:	4313      	orrs	r3, r2
 800a42a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a44a:	2300      	movs	r3, #0
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	bc80      	pop	{r7}
 800a454:	4770      	bx	lr

0800a456 <HAL_TIMEx_RemapConfig>:
  * @param  Remap specifies the TIM remapping source.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  UNUSED(Remap);

  return HAL_OK;
 800a460:	2300      	movs	r3, #0
}
 800a462:	4618      	mov	r0, r3
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	bc80      	pop	{r7}
 800a46a:	4770      	bx	lr

0800a46c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a474:	bf00      	nop
 800a476:	370c      	adds	r7, #12
 800a478:	46bd      	mov	sp, r7
 800a47a:	bc80      	pop	{r7}
 800a47c:	4770      	bx	lr

0800a47e <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a47e:	b480      	push	{r7}
 800a480:	b083      	sub	sp, #12
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a486:	bf00      	nop
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bc80      	pop	{r7}
 800a48e:	4770      	bx	lr

0800a490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a498:	bf00      	nop
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bc80      	pop	{r7}
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(TIM_HandleTypeDef *htim)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  return htim->State;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b0:	b2db      	uxtb	r3, r3
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bc80      	pop	{r7}
 800a4ba:	4770      	bx	lr

0800a4bc <HAL_TIMEx_GetChannelNState>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2
  *            @arg TIM_CHANNEL_3: TIM Channel 3
  * @retval TIM Complementary channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIMEx_GetChannelNState(TIM_HandleTypeDef *htim,  uint32_t ChannelN)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, ChannelN));

  channel_state = TIM_CHANNEL_N_STATE_GET(htim, ChannelN);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d104      	bne.n	800a4d6 <HAL_TIMEx_GetChannelNState+0x1a>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	e013      	b.n	800a4fe <HAL_TIMEx_GetChannelNState+0x42>
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	2b04      	cmp	r3, #4
 800a4da:	d104      	bne.n	800a4e6 <HAL_TIMEx_GetChannelNState+0x2a>
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	e00b      	b.n	800a4fe <HAL_TIMEx_GetChannelNState+0x42>
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	2b08      	cmp	r3, #8
 800a4ea:	d104      	bne.n	800a4f6 <HAL_TIMEx_GetChannelNState+0x3a>
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	e003      	b.n	800a4fe <HAL_TIMEx_GetChannelNState+0x42>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 800a500:	7bfb      	ldrb	r3, [r7, #15]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3714      	adds	r7, #20
 800a506:	46bd      	mov	sp, r7
 800a508:	bc80      	pop	{r7}
 800a50a:	4770      	bx	lr

0800a50c <TIMEx_DMACommutationCplt>:
  * @brief  TIM DMA Commutation callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationCplt(DMA_HandleTypeDef *hdma)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a518:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationCallback(htim);
#else
  HAL_TIMEx_CommutCallback(htim);
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	f7ff ffa2 	bl	800a46c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800a528:	bf00      	nop
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <TIMEx_DMACommutationHalfCplt>:
  * @brief  TIM DMA Commutation half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIMEx_DMACommutationHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	60fb      	str	r3, [r7, #12]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->CommutationHalfCpltCallback(htim);
#else
  HAL_TIMEx_CommutHalfCpltCallback(htim);
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	f7ff ff99 	bl	800a47e <HAL_TIMEx_CommutHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800a54c:	bf00      	nop
 800a54e:	3710      	adds	r7, #16
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <TIM_DMADelayPulseNCplt>:
  * @brief  TIM DMA Delay Pulse complete callback (complementary channel).
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseNCplt(DMA_HandleTypeDef *hdma)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d10b      	bne.n	800a584 <TIM_DMADelayPulseNCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2201      	movs	r2, #1
 800a570:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	699b      	ldr	r3, [r3, #24]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d136      	bne.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a582:	e031      	b.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a588:	687a      	ldr	r2, [r7, #4]
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d10b      	bne.n	800a5a6 <TIM_DMADelayPulseNCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2202      	movs	r2, #2
 800a592:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d125      	bne.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a5a4:	e020      	b.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d10b      	bne.n	800a5c8 <TIM_DMADelayPulseNCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2204      	movs	r2, #4
 800a5b4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d114      	bne.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5c6:	e00f      	b.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d10a      	bne.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2208      	movs	r2, #8
 800a5d6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <TIM_DMADelayPulseNCplt+0x94>
    {
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	f7fd f859 	bl	80076a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	771a      	strb	r2, [r3, #28]
}
 800a5f4:	bf00      	nop
 800a5f6:	3710      	adds	r7, #16
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <TIM_DMAErrorCCxN>:
  * @brief  TIM DMA error callback (complementary channel)
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMAErrorCCxN(DMA_HandleTypeDef *hdma)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b084      	sub	sp, #16
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	429a      	cmp	r2, r3
 800a612:	d107      	bne.n	800a624 <TIM_DMAErrorCCxN+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2201      	movs	r2, #1
 800a618:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a622:	e018      	b.n	800a656 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d107      	bne.n	800a63e <TIM_DMAErrorCCxN+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2202      	movs	r2, #2
 800a632:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a63c:	e00b      	b.n	800a656 <TIM_DMAErrorCCxN+0x5a>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	429a      	cmp	r2, r3
 800a646:	d106      	bne.n	800a656 <TIM_DMAErrorCCxN+0x5a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2204      	movs	r2, #4
 800a64c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f7fd f846 	bl	80076e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2200      	movs	r2, #0
 800a660:	771a      	strb	r2, [r3, #28]
}
 800a662:	bf00      	nop
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b087      	sub	sp, #28
 800a66e:	af00      	add	r7, sp, #0
 800a670:	60f8      	str	r0, [r7, #12]
 800a672:	60b9      	str	r1, [r7, #8]
 800a674:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	f003 031f 	and.w	r3, r3, #31
 800a67c:	2204      	movs	r2, #4
 800a67e:	fa02 f303 	lsl.w	r3, r2, r3
 800a682:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6a1a      	ldr	r2, [r3, #32]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	43db      	mvns	r3, r3
 800a68c:	401a      	ands	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	6a1a      	ldr	r2, [r3, #32]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	f003 031f 	and.w	r3, r3, #31
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	621a      	str	r2, [r3, #32]
}
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bc80      	pop	{r7}
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop

0800a6b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800a6b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800a6b6:	e003      	b.n	800a6c0 <LoopCopyDataInit>

0800a6b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	; (800a6e8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800a6ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800a6bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800a6be:	3104      	adds	r1, #4

0800a6c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800a6c0:	480a      	ldr	r0, [pc, #40]	; (800a6ec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800a6c2:	4b0b      	ldr	r3, [pc, #44]	; (800a6f0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800a6c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800a6c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800a6c8:	d3f6      	bcc.n	800a6b8 <CopyDataInit>
  ldr r2, =_sbss
 800a6ca:	4a0a      	ldr	r2, [pc, #40]	; (800a6f4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800a6cc:	e002      	b.n	800a6d4 <LoopFillZerobss>

0800a6ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800a6ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 800a6d0:	f842 3b04 	str.w	r3, [r2], #4

0800a6d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800a6d4:	4b08      	ldr	r3, [pc, #32]	; (800a6f8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800a6d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 800a6d8:	d3f9      	bcc.n	800a6ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a6da:	f7f5 ffcd 	bl	8000678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6de:	f000 f80f 	bl	800a700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a6e2:	f7f5 fd33 	bl	800014c <main>
  bx lr
 800a6e6:	4770      	bx	lr
  ldr r3, =_sidata
 800a6e8:	0800a7a0 	.word	0x0800a7a0
  ldr r0, =_sdata
 800a6ec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800a6f0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800a6f4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 800a6f8:	2000007c 	.word	0x2000007c

0800a6fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a6fc:	e7fe      	b.n	800a6fc <ADC1_2_IRQHandler>
	...

0800a700 <__libc_init_array>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	2600      	movs	r6, #0
 800a704:	4d0c      	ldr	r5, [pc, #48]	; (800a738 <__libc_init_array+0x38>)
 800a706:	4c0d      	ldr	r4, [pc, #52]	; (800a73c <__libc_init_array+0x3c>)
 800a708:	1b64      	subs	r4, r4, r5
 800a70a:	10a4      	asrs	r4, r4, #2
 800a70c:	42a6      	cmp	r6, r4
 800a70e:	d109      	bne.n	800a724 <__libc_init_array+0x24>
 800a710:	f000 f822 	bl	800a758 <_init>
 800a714:	2600      	movs	r6, #0
 800a716:	4d0a      	ldr	r5, [pc, #40]	; (800a740 <__libc_init_array+0x40>)
 800a718:	4c0a      	ldr	r4, [pc, #40]	; (800a744 <__libc_init_array+0x44>)
 800a71a:	1b64      	subs	r4, r4, r5
 800a71c:	10a4      	asrs	r4, r4, #2
 800a71e:	42a6      	cmp	r6, r4
 800a720:	d105      	bne.n	800a72e <__libc_init_array+0x2e>
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	f855 3b04 	ldr.w	r3, [r5], #4
 800a728:	4798      	blx	r3
 800a72a:	3601      	adds	r6, #1
 800a72c:	e7ee      	b.n	800a70c <__libc_init_array+0xc>
 800a72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a732:	4798      	blx	r3
 800a734:	3601      	adds	r6, #1
 800a736:	e7f2      	b.n	800a71e <__libc_init_array+0x1e>
 800a738:	0800a798 	.word	0x0800a798
 800a73c:	0800a798 	.word	0x0800a798
 800a740:	0800a798 	.word	0x0800a798
 800a744:	0800a79c 	.word	0x0800a79c

0800a748 <memset>:
 800a748:	4603      	mov	r3, r0
 800a74a:	4402      	add	r2, r0
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d100      	bne.n	800a752 <memset+0xa>
 800a750:	4770      	bx	lr
 800a752:	f803 1b01 	strb.w	r1, [r3], #1
 800a756:	e7f9      	b.n	800a74c <memset+0x4>

0800a758 <_init>:
 800a758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75a:	bf00      	nop
 800a75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a75e:	bc08      	pop	{r3}
 800a760:	469e      	mov	lr, r3
 800a762:	4770      	bx	lr

0800a764 <_fini>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr
